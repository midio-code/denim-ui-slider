/* Generated by the Nim Compiler v1.2.6 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI11025805 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11690010 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11035001 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11035017 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10255043 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11025696 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI6251 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11685001 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11685010 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11681068 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12220458 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12206079 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12220429 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14345606 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12093866 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14345429 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11680086 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11635401 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11670063 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10270009 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10255045 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10255041 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10255039 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10255027 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI10255063 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10255029 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10255180 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10255084 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10255035 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10255037 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI10255176 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10255081 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10255033 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10255143 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10252086 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10255069 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10255031 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10255125 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10255118 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10255047 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11650074 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10465244 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10710458 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10581053 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10710429 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11025732 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10711093 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10711090 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10087044 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI10711096 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11995872 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11835013 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11995629 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI4190232 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI4445011 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6235 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6221 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6243 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6245 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI920204 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6249 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6233 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6237 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10275001 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10275009 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10270001 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10265016 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10255482 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10270143 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10265001 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10260001 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10255485 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10255480 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10270125 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9864253 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9864252 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10270084 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10270060 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10270035 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9863088 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9863087 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10255025 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10255163 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9995037 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10255196 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI10255330 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10255194 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI10255311 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10255192 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI10255292 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9862046 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10255273 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI163 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI104 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI9981076 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10255210 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10255198 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10270026 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10251202 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI10270024 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10255484 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11015358 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6253 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI143 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI160043 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6008 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6286 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI6281 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI6217 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6219 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6241 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI112 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI6241 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6241.node = NNI6241;
var NNI6219 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6219.node = NNI6219;
NTI6281.base = NTI6217;
NTI6286.base = NTI6217;
var NNI6217 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI6281, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI112, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI112, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI6286, name: "up", sons: null}]};
NTI6217.node = NNI6217;
var NNI6008 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6008.node = NNI6008;
NTI6217.base = NTI6008;
NTI6219.base = NTI6217;
NTI6241.base = NTI6219;
var NNI160043 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI114, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI143, name: "Field1", sons: null}]};
NTI160043.node = NNI160043;
var NNI6253 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6253.node = NNI6253;
NTI6253.base = NTI6219;
NTI10270026.base = NTI10255484;
var NNI9981076 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "val", len: 0, typ: NTI104, name: "val", sons: null}, 
{kind: 1, offset: "has", len: 0, typ: NTI163, name: "has", sons: null}]};
NTI9981076.node = NNI9981076;
var NNI9862046 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI104, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI104, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI104, name: "Field3", sons: null}]};
NTI9862046.node = NNI9862046;
var NNI10255273 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "val", len: 0, typ: NTI9862046, name: "val", sons: null}, 
{kind: 1, offset: "has", len: 0, typ: NTI163, name: "has", sons: null}]};
NTI10255273.node = NNI10255273;
var NNI10255192 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI10255192, name: "Stretch", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10255192, name: "Center", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10255192, name: "Left", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI10255192, name: "Right", len: 0, sons: null}}};
NTI10255192.node = NNI10255192;
var NNI10255292 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "val", len: 0, typ: NTI10255192, name: "val", sons: null}, 
{kind: 1, offset: "has", len: 0, typ: NTI163, name: "has", sons: null}]};
NTI10255292.node = NNI10255292;
var NNI10255194 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI10255194, name: "Stretch", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10255194, name: "Center", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10255194, name: "Top", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI10255194, name: "Bottom", len: 0, sons: null}}};
NTI10255194.node = NNI10255194;
var NNI10255311 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "val", len: 0, typ: NTI10255194, name: "val", sons: null}, 
{kind: 1, offset: "has", len: 0, typ: NTI163, name: "has", sons: null}]};
NTI10255311.node = NNI10255311;
var NNI10255196 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI10255196, name: "Visible", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10255196, name: "Collapsed", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10255196, name: "Hidden", len: 0, sons: null}}};
NTI10255196.node = NNI10255196;
var NNI10255330 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "val", len: 0, typ: NTI10255196, name: "val", sons: null}, 
{kind: 1, offset: "has", len: 0, typ: NTI163, name: "has", sons: null}]};
NTI10255330.node = NNI10255330;
var NNI9995037 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "val", len: 0, typ: NTI163, name: "val", sons: null}, 
{kind: 1, offset: "has", len: 0, typ: NTI163, name: "has", sons: null}]};
NTI9995037.node = NNI9995037;
var NNI9863088 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "x", len: 0, typ: NTI104, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI104, name: "y", sons: null}]};
NTI9863088.node = NNI9863088;
NTI9863087.base = NTI9863088;
var NNI10255025 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "scale", len: 0, typ: NTI9863087, name: "scale", sons: null}, 
{kind: 1, offset: "translation", len: 0, typ: NTI9863087, name: "translation", sons: null}, 
{kind: 1, offset: "rotation", len: 0, typ: NTI104, name: "rotation", sons: null}]};
NTI10255025.node = NNI10255025;
var NNI10255163 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "val", len: 0, typ: NTI10255025, name: "val", sons: null}, 
{kind: 1, offset: "has", len: 0, typ: NTI163, name: "has", sons: null}]};
NTI10255163.node = NNI10255163;
var NNI10255210 = {kind: 2, len: 16, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "width", len: 0, typ: NTI9981076, name: "width", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI9981076, name: "height", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI9981076, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI9981076, name: "minWidth", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI9981076, name: "maxHeight", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI9981076, name: "minHeight", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI9981076, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI9981076, name: "y", sons: null}, 
{kind: 1, offset: "xOffset", len: 0, typ: NTI9981076, name: "xOffset", sons: null}, 
{kind: 1, offset: "yOffset", len: 0, typ: NTI9981076, name: "yOffset", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI10255273, name: "margin", sons: null}, 
{kind: 1, offset: "horizontalAlignment", len: 0, typ: NTI10255292, name: "horizontalAlignment", sons: null}, 
{kind: 1, offset: "verticalAlignment", len: 0, typ: NTI10255311, name: "verticalAlignment", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI10255330, name: "visibility", sons: null}, 
{kind: 1, offset: "clipToBounds", len: 0, typ: NTI9995037, name: "clipToBounds", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI10255163, name: "transform", sons: null}]};
NTI10255210.node = NNI10255210;
NTI10255198.base = NTI10255210;
var NNI10270035 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "val", len: 0, typ: NTI10255484, name: "val", sons: null}, 
{kind: 1, offset: "has", len: 0, typ: NTI163, name: "has", sons: null}]};
NTI10270035.node = NNI10270035;
var NNI10270060 = {kind: 1, offset: "val", len: 0, typ: NTI9863087, name: "val", sons: null};
NTI10270060.node = NNI10270060;
var NNI9864253 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "pos", len: 0, typ: NTI9863087, name: "pos", sons: null}, 
{kind: 1, offset: "size", len: 0, typ: NTI9863087, name: "size", sons: null}]};
NTI9864253.node = NNI9864253;
NTI9864252.base = NTI9864253;
var NNI10270084 = {kind: 1, offset: "val", len: 0, typ: NTI9864252, name: "val", sons: null};
NTI10270084.node = NNI10270084;
var NNI10255485 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI112, name: "name", sons: null}, 
{kind: 1, offset: "measure", len: 0, typ: NTI10260001, name: "measure", sons: null}, 
{kind: 1, offset: "arrange", len: 0, typ: NTI10265001, name: "arrange", sons: null}]};
NTI10255485.node = NNI10255485;
NTI10255480.base = NTI10255485;
var NNI10270125 = {kind: 1, offset: "val", len: 0, typ: NTI10255480, name: "val", sons: null};
NTI10270125.node = NNI10270125;
var NNI10265016 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI112, name: "name", sons: null}, 
{kind: 1, offset: "render", len: 0, typ: NTI10270001, name: "render", sons: null}]};
NTI10265016.node = NNI10265016;
NTI10255482.base = NTI10265016;
var NNI10270143 = {kind: 1, offset: "val", len: 0, typ: NTI10255482, name: "val", sons: null};
NTI10270143.node = NNI10270143;
var NNI10275009 = {kind: 1, offset: "val", len: 0, typ: NTI10275001, name: "val", sons: null};
NTI10275009.node = NNI10275009;
var NNI10270024 = {kind: 2, len: 16, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "id", len: 0, typ: NTI10251202, name: "id", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI10270026, name: "children", sons: null}, 
{kind: 1, offset: "props", len: 0, typ: NTI10255198, name: "props", sons: null}, 
{kind: 1, offset: "parent", len: 0, typ: NTI10270035, name: "parent", sons: null}, 
{kind: 1, offset: "desiredSize", len: 0, typ: NTI10270060, name: "desiredSize", sons: null}, 
{kind: 1, offset: "bounds", len: 0, typ: NTI10270084, name: "bounds", sons: null}, 
{kind: 1, offset: "previousArrange", len: 0, typ: NTI10270084, name: "previousArrange", sons: null}, 
{kind: 1, offset: "previousMeasure", len: 0, typ: NTI10270060, name: "previousMeasure", sons: null}, 
{kind: 1, offset: "isArrangeValid", len: 0, typ: NTI163, name: "isArrangeValid", sons: null}, 
{kind: 1, offset: "isMeasureValid", len: 0, typ: NTI163, name: "isMeasureValid", sons: null}, 
{kind: 1, offset: "measuring", len: 0, typ: NTI163, name: "measuring", sons: null}, 
{kind: 1, offset: "layout", len: 0, typ: NTI10270125, name: "layout", sons: null}, 
{kind: 1, offset: "drawable", len: 0, typ: NTI10270143, name: "drawable", sons: null}, 
{kind: 1, offset: "onRooted", len: 0, typ: NTI10275009, name: "onRooted", sons: null}, 
{kind: 1, offset: "onUnrooted", len: 0, typ: NTI10275009, name: "onUnrooted", sons: null}, 
{kind: 1, offset: "pointerInsideLastUpdate", len: 0, typ: NTI163, name: "pointerInsideLastUpdate", sons: null}]};
NTI10270024.node = NNI10270024;
NTI10255484.base = NTI10270024;
var NNI11015358 = {kind: 1, offset: "val", len: 0, typ: NTI10255484, name: "val", sons: null};
NTI11015358.node = NNI11015358;
var NNI6237 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6237.node = NNI6237;
var NNI6233 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6233.node = NNI6233;
NTI6233.base = NTI6219;
NTI6237.base = NTI6233;
var NNI6249 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6249.node = NNI6249;
NTI6249.base = NTI6219;
var NNI920204 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI920204.node = NNI920204;
NTI920204.base = NTI6219;
var NNI6245 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6245.node = NNI6245;
var NNI6243 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6243.node = NNI6243;
var NNI6221 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6221.node = NNI6221;
NTI6221.base = NTI6217;
NTI6243.base = NTI6221;
NTI6245.base = NTI6243;
var NNI6235 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6235.node = NNI6235;
NTI6235.base = NTI6233;
var NNI4445011 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI4190232, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI143, name: "b", sons: null}]};
NTI4445011.node = NNI4445011;
NTI11995629.base = NTI11835013;
NTI11995872.base = NTI11835013;
var NNI10711096 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI10087044, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI10255484, name: "Field1", sons: null}]};
NTI10711096.node = NNI10711096;
NTI10711093.base = NTI10711096;
var NNI10711090 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI10711093, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI143, name: "counter", sons: null}]};
NTI10711090.node = NNI10711090;
var NNI11025732 = {kind: 1, offset: "val", len: 0, typ: NTI10255480, name: "val", sons: null};
NTI11025732.node = NNI11025732;
NTI10710429.base = NTI10581053;
NTI10710458.base = NTI10581053;
var NNI10465244 = {kind: 1, offset: "val", len: 0, typ: NTI9864252, name: "val", sons: null};
NTI10465244.node = NNI10465244;
var NNI10252086 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "val", len: 0, typ: NTI112, name: "val", sons: null}, 
{kind: 1, offset: "has", len: 0, typ: NTI163, name: "has", sons: null}]};
NTI10252086.node = NNI10252086;
var NNI10255069 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "stroke", len: 0, typ: NTI10252086, name: "stroke", sons: null}, 
{kind: 1, offset: "fill", len: 0, typ: NTI10252086, name: "fill", sons: null}]};
NTI10255069.node = NNI10255069;
NTI10255031.base = NTI10255069;
var NNI10255125 = {kind: 1, offset: "val", len: 0, typ: NTI10255031, name: "val", sons: null};
NTI10255125.node = NNI10255125;
var NNI10255081 = {kind: 1, offset: "width", len: 0, typ: NTI104, name: "width", sons: null};
NTI10255081.node = NNI10255081;
NTI10255033.base = NTI10255081;
var NNI10255143 = {kind: 1, offset: "val", len: 0, typ: NTI10255033, name: "val", sons: null};
NTI10255143.node = NNI10255143;
NTI10255176.base = NTI10255047;
var NNI10255037 = {kind: 2, offset: 0, typ: null, name: null, len: 6, sons: {"0": {kind: 1, offset: 0, typ: NTI10255037, name: "Container", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10255037, name: "Text", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10255037, name: "Path", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI10255037, name: "Circle", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI10255037, name: "Ellipse", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI10255037, name: "Rectangle", len: 0, sons: null}}};
NTI10255037.node = NNI10255037;
var NNI10255084 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "text", len: 0, typ: NTI112, name: "text", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI104, name: "fontSize", sons: null}, 
{kind: 1, offset: "textBaseline", len: 0, typ: NTI112, name: "textBaseline", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI112, name: "font", sons: null}, 
{kind: 1, offset: "pos", len: 0, typ: NTI9863087, name: "pos", sons: null}, 
{kind: 1, offset: "alignment", len: 0, typ: NTI112, name: "alignment", sons: null}]};
NTI10255084.node = NNI10255084;
NTI10255035.base = NTI10255084;
var NNI10255027 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI10255027, name: "MoveTo", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10255027, name: "LineTo", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10255027, name: "QuadraticCurveTo", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI10255027, name: "Close", len: 0, sons: null}}};
NTI10255027.node = NNI10255027;
var NNI10255063 = {kind: 3, offset: "kind", len: 4, typ: NTI10255027, name: "kind", sons: [[setConstr(0, 1), {kind: 1, offset: "to", len: 0, typ: NTI9863087, name: "to", sons: null}], 
[setConstr(2), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "controlPoint", len: 0, typ: NTI9863087, name: "controlPoint", sons: null}, 
{kind: 1, offset: "point", len: 0, typ: NTI9863087, name: "point", sons: null}]}], 
[setConstr(3), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]};
NTI10255063.node = NNI10255063;
NTI10255029.base = NTI10255063;
NTI10255180.base = NTI10255029;
var NNI10255039 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "center", len: 0, typ: NTI9863087, name: "center", sons: null}, 
{kind: 1, offset: "radius", len: 0, typ: NTI104, name: "radius", sons: null}]};
NTI10255039.node = NNI10255039;
var NNI10255041 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "center", len: 0, typ: NTI9863087, name: "center", sons: null}, 
{kind: 1, offset: "radius", len: 0, typ: NTI9863087, name: "radius", sons: null}, 
{kind: 1, offset: "rotation", len: 0, typ: NTI104, name: "rotation", sons: null}, 
{kind: 1, offset: "startAngle", len: 0, typ: NTI104, name: "startAngle", sons: null}, 
{kind: 1, offset: "endAngle", len: 0, typ: NTI104, name: "endAngle", sons: null}]};
NTI10255041.node = NNI10255041;
var NNI10255045 = {kind: 1, offset: "bounds", len: 0, typ: NTI9864252, name: "bounds", sons: null};
NTI10255045.node = NNI10255045;
var NNI10255118 = {kind: 2, len: 7, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "colorInfo", len: 0, typ: NTI10255125, name: "colorInfo", sons: null}, 
{kind: 1, offset: "strokeInfo", len: 0, typ: NTI10255143, name: "strokeInfo", sons: null}, 
{kind: 1, offset: "clipToBounds", len: 0, typ: NTI163, name: "clipToBounds", sons: null}, 
{kind: 1, offset: "bounds", len: 0, typ: NTI9864252, name: "bounds", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI10255163, name: "transform", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI10255176, name: "children", sons: null}, 
{kind: 3, offset: "kind", len: 6, typ: NTI10255037, name: "kind", sons: [[setConstr(0), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}], 
[setConstr(1), {kind: 1, offset: "textInfo", len: 0, typ: NTI10255035, name: "textInfo", sons: null}], 
[setConstr(2), {kind: 1, offset: "segments", len: 0, typ: NTI10255180, name: "segments", sons: null}], 
[setConstr(3), {kind: 1, offset: "circleInfo", len: 0, typ: NTI10255039, name: "circleInfo", sons: null}], 
[setConstr(4), {kind: 1, offset: "ellipseInfo", len: 0, typ: NTI10255041, name: "ellipseInfo", sons: null}], 
[setConstr(5), {kind: 1, offset: "rectangleInfo", len: 0, typ: NTI10255045, name: "rectangleInfo", sons: null}]]}]};
NTI10255118.node = NNI10255118;
NTI10255047.base = NTI10255118;
var NNI11650074 = {kind: 1, offset: "val", len: 0, typ: NTI10255047, name: "val", sons: null};
NTI11650074.node = NNI11650074;
var NNI10270009 = {kind: 1, offset: "val", len: 0, typ: NTI10255047, name: "val", sons: null};
NTI10270009.node = NNI10270009;
NTI11670063.base = NTI10270009;
NTI11635401.base = NTI10255047;
NTI11680086.base = NTI10255047;
NTI14345429.base = NTI12093866;
NTI14345606.base = NTI12093866;
NTI12220429.base = NTI12206079;
NTI12220458.base = NTI12206079;
var NNI11685010 = {kind: 1, offset: "val", len: 0, typ: NTI11685001, name: "val", sons: null};
NTI11685010.node = NNI11685010;
var NNI11681068 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "update", len: 0, typ: NTI11685010, name: "update", sons: null}, 
{kind: 1, offset: "added", len: 0, typ: NTI10275009, name: "added", sons: null}]};
NTI11681068.node = NNI11681068;
var NNI6251 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6251.node = NNI6251;
NTI6251.base = NTI6219;
NTI11025696.base = NTI10255484;
var NNI10255043 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI104, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI104, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI104, name: "Field3", sons: null}]};
NTI10255043.node = NNI10255043;
var NNI11035017 = {kind: 1, offset: "val", len: 0, typ: NTI11035001, name: "val", sons: null};
NTI11035017.node = NNI11035017;
NTI11690010.base = NTI11681068;
var NNI11025805 = {kind: 1, offset: "val", len: 0, typ: NTI10255482, name: "val", sons: null};
NTI11025805.node = NNI11025805;
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_240023, src_240024, ti_240025) {
  var result_245219 = null;

    switch (ti_240025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(is_fat_pointer_235401(ti_240025))) {
      result_245219 = src_240024;
      }
      else {
        result_245219 = [src_240024[0], src_240024[1]];
      }
      
      break;
    case 19:
            if (dest_240023 === null || dest_240023 === undefined) {
        dest_240023 = {};
      }
      else {
        for (var key in dest_240023) { delete dest_240023[key]; }
      }
      for (var key in src_240024) { dest_240023[key] = src_240024[key]; }
      result_245219 = dest_240023;
    
      break;
    case 18:
    case 17:
      if (!((ti_240025.base == null))) {
      result_245219 = nimCopy(dest_240023, src_240024, ti_240025.base);
      }
      else {
      if ((ti_240025.kind == 17)) {
      result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {m_type: ti_240025} : dest_240023;
      }
      else {
        result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {} : dest_240023;
      }
      }
      nimCopyAux(result_245219, src_240024, ti_240025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_240024 === null) {
        result_245219 = null;
      }
      else {
        if (dest_240023 === null || dest_240023 === undefined) {
          dest_240023 = new Array(src_240024.length);
        }
        else {
          dest_240023.length = src_240024.length;
        }
        result_245219 = dest_240023;
        for (var i = 0; i < src_240024.length; ++i) {
          result_245219[i] = nimCopy(result_245219[i], src_240024[i], ti_240025.base);
        }
      }
    
      break;
    case 28:
            if (src_240024 !== null) {
        result_245219 = src_240024.slice(0);
      }
    
      break;
    default: 
      result_245219 = src_240024;
      break;
    }

  return result_245219;

}
function makeNimstrLit(c_225062) {
      var ln = c_225062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_225062.charCodeAt(i);
  }
  return result;
  

  
}
function arrayConstr(len_250067, value_250068, typ_250069) {
        var result = new Array(len_250067);
    for (var i = 0; i < len_250067; ++i) result[i] = nimCopy(null, value_250068, typ_250069);
    return result;
  

  
}
function cstrToNimstr(c_225079) {
      var ln = c_225079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_225079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_225079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function toJSStr(s_225096) {
                    var Tmp5;
            var Tmp7;

  var result_225097 = null;

    var res_225170 = new_seq_225128((s_225096 != null ? s_225096.length : 0));
    var i_225172 = 0;
    var j_225174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_225172 < (s_225096 != null ? s_225096.length : 0))) break L2;
          var c_225175 = s_225096[i_225172];
          if ((c_225175 < 128)) {
          res_225170[j_225174] = String.fromCharCode(c_225175);
          i_225172 += 1;
          }
          else {
            var helper_225198 = new_seq_225128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_225199 = c_225175.toString(16);
                  if (((code_225199 != null ? code_225199.length : 0) == 1)) {
                  if (helper_225198 != null) { helper_225198.push("%0"); } else { helper_225198 = ["%0"]; };
                  }
                  else {
                  if (helper_225198 != null) { helper_225198.push("%"); } else { helper_225198 = ["%"]; };
                  }
                  
                  if (helper_225198 != null) { helper_225198.push(code_225199); } else { helper_225198 = [code_225199]; };
                  i_225172 += 1;
                    if (((s_225096 != null ? s_225096.length : 0) <= i_225172)) Tmp5 = true; else {                      Tmp5 = (s_225096[i_225172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_225175 = s_225096[i_225172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_225170[j_225174] = decodeURIComponent(helper_225198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_225170[j_225174] = helper_225198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_225174 += 1;
        }
    } while(false);
    if (res_225170 === null) res_225170 = [];
               if (res_225170.length < j_225174) { for (var i=res_225170.length;i<j_225174;++i) res_225170.push(null); }
               else { res_225170.length = j_225174; };
    result_225097 = res_225170.join("");

  return result_225097;

}
function raiseException(e_190218, ename_190219) {
    e_190218.name = ename_190219;
    if ((excHandler == 0)) {
    unhandledException(e_190218);
    }
    
    e_190218.trace = nimCopy(null, raw_write_stack_trace_180059(), NTI112);
    throw e_190218;

  
}
function chckRange(i_255016, a_255017, b_255018) {
      var Tmp1;

  var result_255019 = 0;

  BeforeRet: do {
      if (!(a_255017 <= i_255016)) Tmp1 = false; else {        Tmp1 = (i_255016 <= b_255018);      }    if (Tmp1) {
    result_255019 = i_255016;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_255019;

}
function subInt(a_230421, b_230422) {
        var result = a_230421 - b_230422;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function chckIndx(i_250086, a_250087, b_250088) {
      var Tmp1;

  var result_250089 = 0;

  BeforeRet: do {
      if (!(a_250087 <= i_250086)) Tmp1 = false; else {        Tmp1 = (i_250086 <= b_250088);      }    if (Tmp1) {
    result_250089 = i_250086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_250086, a_250087, b_250088);
    }
    
  } while (false);

  return result_250089;

}
function addInt(a_230403, b_230404) {
        var result = a_230403 + b_230404;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function mnewString(len_230044) {
        return new Array(len_230044);
  

  
}
var ConstSet2 = setConstr(60, 62, 94);
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(45, 43, 32);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);
function divInt(a_230457, b_230458) {
        if (b_230458 == 0) raiseDivByZero();
    if (b_230458 == -1 && a_230457 == 2147483647) raiseOverflow();
    return Math.trunc(a_230457 / b_230458);
  

  
}
function mulInt(a_230439, b_230440) {
        var result = a_230439 * b_230440;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet8 = setConstr([65, 90], [97, 122]);
function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}
function genericReset(x_250044, ti_250045) {
  var result_250046 = null;

    result_250046 = null;
    switch (ti_250045.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (is_fat_pointer_235401(ti_250045)) {
              result_250046 = [null, 0];
      
      }
      
      break;
    case 19:
            result_250046 = {};
    
      break;
    case 18:
    case 17:
      if ((ti_250045.kind == 17)) {
      result_250046 = {m_type: ti_250045};
      }
      else {
        result_250046 = {};
      }
      
      break;
    case 24:
    case 27:
            result_250046 = [];
    
      break;
    case 4:
    case 16:
            result_250046 = new Array(x_250044.length);
      for (var i = 0; i < x_250044.length; ++i) {
        result_250046[i] = genericReset(x_250044[i], ti_250045.base);
      }
    
      break;
    default: 
      break;
    }

  return result_250046;

}
function modInt(a_230475, b_230476) {
        if (b_230476 == 0) raiseDivByZero();
    if (b_230476 == -1 && a_230475 == 2147483647) raiseOverflow();
    return Math.trunc(a_230475 % b_230476);
  

  
}
function eqStrings(a_230222, b_230223) {
        if (a_230222 == b_230223) return true;
    if (a_230222 === null && b_230223.length == 0) return true;
    if (b_230223 === null && a_230222.length == 0) return true;
    if ((!a_230222) || (!b_230223)) return false;
    var alen = a_230222.length;
    if (alen != b_230223.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_230222[i] != b_230223[i]) return false;
    return true;
  

  
}
var ConstSet9 = setConstr(2);
function raiseFieldError(f_220047) {
    raiseException({message: nimCopy(null, f_220047, NTI112), parent: null, m_type: NTI6251, name: null, trace: null, up: null}, "FieldError");

  
}
var ConstSet10 = setConstr(0, 1);
var ConstSet11 = setConstr(0, 1);
var ConstSet12 = setConstr(0, 1);
var ConstSet13 = setConstr(0, 1);
var ConstSet14 = setConstr(2);
var ConstSet15 = setConstr(2);
var ConstSet16 = setConstr(2);
var ConstSet17 = setConstr(2);
var ConstSet18 = setConstr(1);
var ConstSet19 = setConstr(3);
var ConstSet20 = setConstr(4);
var ConstSet21 = setConstr(5);
var nim_program_result = 0;
var global_raise_hook_142018 = [null];
var local_raise_hook_142023 = [null];
var out_of_mem_hook_142026 = [null];
var unhandled_exception_hook_142031 = [null];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var object_id_10090031 = [0];
var counter_10251402 = [1];
function is_power_of_two_8720029(x_8720031) {
    var Tmp1;

  var result_8720032 = false;

  BeforeRet: do {
    if (!(0 < x_8720031)) Tmp1 = false; else {      Tmp1 = ((x_8720031 & (x_8720031 - 1)) == 0);    }    result_8720032 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_8720032;

}
function is_fat_pointer_235401(ti_235403) {
  var result_235404 = false;

  BeforeRet: do {
    result_235404 = !((ConstSet1[ti_235403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_235404;

}
function nimCopyAux(dest_240028, src_240029, n_240031) {
    switch (n_240031.kind) {
    case 0:
      break;
    case 1:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_240031.sons.length; i++) {
      nimCopyAux(dest_240028, src_240029, n_240031.sons[i]);
    }
    
      break;
    case 3:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
      for (var i = 0; i < n_240031.sons.length; ++i) {
        nimCopyAux(dest_240028, src_240029, n_240031.sons[i][1]);
      }
    
      break;
    }

  
}
function add_142042(x_142045, x_142045_Idx, y_142046) {
          if (x_142045[x_142045_Idx] === null) { x_142045[x_142045_Idx] = []; }
      var off = x_142045[x_142045_Idx].length;
      x_142045[x_142045_Idx].length += y_142046.length;
      for (var i = 0; i < y_142046.length; ++i) {
        x_142045[x_142045_Idx][off+i] = y_142046.charCodeAt(i);
      }
    

  
}
function aux_write_stack_trace_160038(f_160040) {
          var Tmp3;

  var result_160041 = [null];

    var it_160049 = f_160040;
    var i_160051 = 0;
    var total_160053 = 0;
    var temp_frames_160060 = arrayConstr(64, {Field0: null, Field1: 0}, NTI160043);
    L1: do {
        L2: while (true) {
          if (!!((it_160049 == null))) Tmp3 = false; else {            Tmp3 = (i_160051 <= 63);          }        if (!Tmp3) break L2;
          temp_frames_160060[i_160051].Field0 = it_160049.procname;
          temp_frames_160060[i_160051].Field1 = it_160049.line;
          i_160051 += 1;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    L4: do {
        L5: while (true) {
        if (!!((it_160049 == null))) break L5;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    result_160041[0] = nimCopy(null, [], NTI112);
    if (!((total_160053 == i_160051))) {
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("(")); } else { result_160041[0] = makeNimstrLit("("); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr(((total_160053 - i_160051))+"")); } else { result_160041[0] = cstrToNimstr(((total_160053 - i_160051))+"").slice(); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_160041[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
    }
    
    L6: do {
      var j_175236 = 0;
      var colontmp__10300663 = 0;
      colontmp__10300663 = (i_160051 - 1);
      var res_10300668 = colontmp__10300663;
      L7: do {
          L8: while (true) {
          if (!(0 <= res_10300668)) break L8;
            j_175236 = res_10300668;
            add_142042(result_160041, 0, temp_frames_160060[j_175236].Field0);
            if ((0 < temp_frames_160060[j_175236].Field1)) {
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(", line: ")); } else { result_160041[0] = makeNimstrLit(", line: "); };
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr((temp_frames_160060[j_175236].Field1)+"")); } else { result_160041[0] = cstrToNimstr((temp_frames_160060[j_175236].Field1)+"").slice(); };
            }
            
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("\x0A")); } else { result_160041[0] = makeNimstrLit("\x0A"); };
            res_10300668 -= 1;
          }
      } while(false);
    } while(false);

  return result_160041[0];

}
function raw_write_stack_trace_180059() {
  var result_180061 = null;

    if (!((framePtr == null))) {
    result_180061 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_160038(framePtr) || []), NTI112);
    }
    else {
      result_180061 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI112);
    }
    

  return result_180061;

}
function new_seq_225128(len_225131) {
  var result_225133 = null;

  var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 643;
    result_225133 = new Array(len_225131); for (var i=0;i<len_225131;++i) {result_225133[i]=null;}  framePtr = F.prev;

  return result_225133;

}
function unhandledException(e_185059) {
    var buf_185060 = [[]];
    if (!(((e_185059.message != null ? e_185059.message.length : 0) == 0))) {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception: "); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(e_185059.message); } else { buf_185060[0] = e_185059.message.slice(); };
    }
    else {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception"); };
    }
    
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit(" [")); } else { buf_185060[0] = makeNimstrLit(" ["); };
    add_142042(buf_185060, 0, e_185059.name);
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("]\x0A")); } else { buf_185060[0] = makeNimstrLit("]\x0A"); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(raw_write_stack_trace_180059()); } else { buf_185060[0] = raw_write_stack_trace_180059().slice(); };
    var cbuf_190201 = toJSStr(buf_185060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_190201);
  }
  else {
    throw cbuf_190201;
  }
  

  
}
function sys_fatal_102618(message_102622) {
  var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
  framePtr = F;
    F.line = 49;
    raiseException({message: nimCopy(null, message_102622, NTI112), m_type: NTI6241, parent: null, name: null, trace: null, up: null}, "AssertionError");
  framePtr = F.prev;

  
}
function raise_assert_102614(msg_102616) {
  var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 22;
    sys_fatal_102618(msg_102616);
  framePtr = F.prev;

  
}
function failed_assert_impl_102680(msg_102682) {
  var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 29;
    raise_assert_102614(msg_102682);
  framePtr = F.prev;

  
}
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI6253, name: null, trace: null, up: null}, "RangeError");

  
}
function init_table_10280038(initial_size_10280042) {
  var result_10280058 = ({data: null, counter: 0});

  var F={procname:"initTable.initTable",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (!(is_power_of_two_8720029(initial_size_10280042))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(initialSize)` "));
    }
    
    F.line = 167;
    result_10280058.counter = 0;
    F.line = 168;
    result_10280058.data = new Array(chckRange(initial_size_10280042, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_10280042, 0, 2147483647);++i) {result_10280058.data[i]={Field0: 0, Field1: null, Field2: null};}  framePtr = F.prev;

  return result_10280058;

}
var world_positions_10300629 = [init_table_10280038(64)];
function init_table_10420278(initial_size_10420282) {
  var result_10420298 = ({data: null, counter: 0});

  var F={procname:"initTable.initTable",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (!(is_power_of_two_8720029(initial_size_10420282))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(initialSize)` "));
    }
    
    F.line = 167;
    result_10420298.counter = 0;
    F.line = 168;
    result_10420298.data = new Array(chckRange(initial_size_10420282, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_10420282, 0, 2147483647);++i) {result_10420298.data[i]={Field0: 0, Field1: null, Field2: null};}  framePtr = F.prev;

  return result_10420298;

}
var clip_bounds_10440629 = [init_table_10420278(64)];
function init_table_10581076(initial_size_10581080) {
  var result_10581096 = ({data: null, counter: 0});

  var F={procname:"initTable.initTable",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (!(is_power_of_two_8720029(initial_size_10581080))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(initialSize)` "));
    }
    
    F.line = 167;
    result_10581096.counter = 0;
    F.line = 168;
    result_10581096.data = new Array(chckRange(initial_size_10581080, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_10581080, 0, 2147483647);++i) {result_10581096.data[i]={Field0: 0, Field1: null, Field2: null};}  framePtr = F.prev;

  return result_10581096;

}
var bounds_changed_handlers_10600629 = [init_table_10581076(64)];
function init_table_10711103(initial_size_10711107) {
  var result_10711123 = ({data: null, counter: 0});

  var F={procname:"initTable.initTable",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (!(is_power_of_two_8720029(initial_size_10711107))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(initialSize)` "));
    }
    
    F.line = 167;
    result_10711123.counter = 0;
    F.line = 168;
    result_10711123.data = new Array(chckRange(initial_size_10711107, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_10711107, 0, 2147483647);++i) {result_10711123.data[i]={Field0: 0, Field1: null, Field2: ({data: null, counter: 0})};}  framePtr = F.prev;

  return result_10711123;

}
var tags_10730629 = [init_table_10711103(64)];
function init_10730726(s_10730731, initial_size_10730732) {
  var F={procname:"init.init",prev:framePtr,filename:"sets.nim",line:0};
  framePtr = F;
    if (!(is_power_of_two_8720029(initial_size_10730732))) {
    F.line = 19;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/setimpl.nim(19, 10) `isPowerOfTwo(initialSize)` "));
    }
    
    F.line = 23;
    s_10730731.counter = 0;
    F.line = 118;
    s_10730731.data = new Array(chckRange(initial_size_10730732, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_10730732, 0, 2147483647);++i) {s_10730731.data[i]={Field0: 0, Field1: null};}  framePtr = F.prev;

  
}
function init_hash_set_10730706(initial_size_10730709) {
  var result_10730711 = [({data: null, counter: 0})];

  var F={procname:"initHashSet.initHashSet",prev:framePtr,filename:"sets.nim",line:0};
  framePtr = F;
    F.line = 137;
    init_10730726(result_10730711[0], initial_size_10730709);
  framePtr = F.prev;

  return result_10730711[0];

}
function init_layout_manager_10907084() {
  var result_10907086 = null;

  var F={procname:"element.initLayoutManager",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 27;
    result_10907086 = {toMeasure: init_hash_set_10730706(64), toArrange: init_hash_set_10730706(64)};
  framePtr = F.prev;

  return result_10907086;

}
var instance_10907142 = init_layout_manager_10907084();
function emitter_10600706() {
  var result_10600710 = null;

  var F={procname:"emitter.emitter",prev:framePtr,filename:"events.nim",line:0};
  framePtr = F;
    F.line = 12;
    result_10600710 = {listeners: [], toAdd: [], toRemove: []};
  framePtr = F.prev;

  return result_10600710;

}
var emitterHEX60gensym10930642_10935006 = [emitter_10600706()];
function init_table_11251098(initial_size_11251102) {
  var result_11251118 = ({data: null, counter: 0});

  var F={procname:"initTable.initTable",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (!(is_power_of_two_8720029(initial_size_11251102))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(initialSize)` "));
    }
    
    F.line = 167;
    result_11251118.counter = 0;
    F.line = 168;
    result_11251118.data = new Array(chckRange(initial_size_11251102, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_11251102, 0, 2147483647);++i) {result_11251118.data[i]={Field0: 0, Field1: 0, Field2: 0};}  framePtr = F.prev;

  return result_11251118;

}
var intrinsic_dock_props_11270629 = [init_table_11251098(64)];
var measure_text_11435012 = [null];
function init_table_11516170(initial_size_11516174) {
  var result_11516176 = ({data: null, counter: 0});

  var F={procname:"initTable.initTable",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (!(is_power_of_two_8720029(initial_size_11516174))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(initialSize)` "));
    }
    
    F.line = 167;
    result_11516176.counter = 0;
    F.line = 168;
    result_11516176.data = new Array(chckRange(initial_size_11516174, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_11516174, 0, 2147483647);++i) {result_11516176.data[i]={Field0: 0, Field1: null, Field2: null};}  framePtr = F.prev;

  return result_11516176;

}
var debug_drawings_11535629 = [init_table_11516170(64)];
function init_table_11690012(initial_size_11690016) {
  var result_11690032 = ({data: null, counter: 0});

  var F={procname:"initTable.initTable",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (!(is_power_of_two_8720029(initial_size_11690016))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(initialSize)` "));
    }
    
    F.line = 167;
    result_11690032.counter = 0;
    F.line = 168;
    result_11690032.data = new Array(chckRange(initial_size_11690016, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_11690016, 0, 2147483647);++i) {result_11690032.data[i]={Field0: 0, Field1: null, Field2: null};}  framePtr = F.prev;

  return result_11690032;

}
var behaviors_list_11710629 = [init_table_11690012(64)];
function init_table_11835029(initial_size_11835033) {
  var result_11835049 = ({data: null, counter: 0});

  var F={procname:"initTable.initTable",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (!(is_power_of_two_8720029(initial_size_11835033))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(initialSize)` "));
    }
    
    F.line = 167;
    result_11835049.counter = 0;
    F.line = 168;
    result_11835049.data = new Array(chckRange(initial_size_11835033, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_11835033, 0, 2147483647);++i) {result_11835049.data[i]={Field0: 0, Field1: null, Field2: null};}  framePtr = F.prev;

  return result_11835049;

}
function emitter_12093745() {
  var result_12093770 = null;

  var F={procname:"emitter.emitter",prev:framePtr,filename:"events.nim",line:0};
  framePtr = F;
    F.line = 12;
    result_12093770 = {listeners: [], toAdd: [], toRemove: []};
  framePtr = F.prev;

  return result_12093770;

}
function emitter_12093856() {
  var result_12093881 = null;

  var F={procname:"emitter.emitter",prev:framePtr,filename:"events.nim",line:0};
  framePtr = F;
    F.line = 12;
    result_12093881 = {listeners: [], toAdd: [], toRemove: []};
  framePtr = F.prev;

  return result_12093881;

}
function none_11015352() {
  var result_11015369 = ({val: null});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  framePtr = F.prev;

  return result_11015369;

}
function none_11015346() {
  var result_11015350 = ({val: null, has: false});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 140;
    nimCopy(result_11015350, none_11015352(), NTI11015358);
  framePtr = F.prev;

  return result_11015350;

}
var event_tableHEX60gensym11830002_11855829 = [init_table_11835029(64)];
var event_tableHEX60gensym12020002_12025013 = [init_table_11835029(64)];
var event_tableHEX60gensym12035002_12040013 = [init_table_11835029(64)];
var event_tableHEX60gensym12050002_12055013 = [init_table_11835029(64)];
var event_tableHEX60gensym12065002_12070013 = [init_table_11835029(64)];
var event_tableHEX60gensym12080002_12085013 = [init_table_11835029(64)];
var pointer_captured_emitter_12093848 = [emitter_12093745()];
var pointer_capture_released_emitter_12093854 = [emitter_12093745()];
var key_down_emitter_12093959 = [emitter_12093856()];
var pointer_captured_to_12093967 = [none_11015346()];
function emitter_12206069() {
  var result_12206094 = null;

  var F={procname:"emitter.emitter",prev:framePtr,filename:"events.nim",line:0};
  framePtr = F;
    F.line = 12;
    result_12206094 = {listeners: [], toAdd: [], toRemove: []};
  framePtr = F.prev;

  return result_12206094;

}
var update_manager_listeners_12206172 = [emitter_12206069()];
var native_container_12316079 = document.getElementById("nativeContainer");
var hard_coded_scale_12316080 = 2.0000000000000000e+00;
function vec2_9863092(x_9863095, y_9863096) {
  var result_9863098 = null;

  var F={procname:"vec2.vec2",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 15;
    result_9863098 = {x: x_9863095, y: y_9863096};
  framePtr = F.prev;

  return result_9863098;

}
var pointer_pos_changed_this_frame_14320055 = [false];
var last_pointer_pos_14320062 = [vec2_9863092(0.0, 0.0)];
var pointer_pressed_last_frame_14320063 = [false];
var pointer_pressed_this_frame_14320064 = [false];
var window_size_14320069 = [null];
function is_some_11159534(self_11159538) {
  var result_11159539 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_11159539 = self_11159538.has;
  framePtr = F.prev;

  return result_11159539;

}
function HEX3DHEX3D_12122704(a_12122707, b_12122708) {
  var result_12122709 = false;

  var F={procname:"==.==",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 337;
    result_12122709 = (((is_some_11159534(a_12122707) && is_some_11159534(b_12122708)) && (a_12122707.val == b_12122708.val)) || (!(is_some_11159534(a_12122707)) && !(is_some_11159534(b_12122708))));
  framePtr = F.prev;

  return result_12122709;

}
function some_12123035(val_12123038) {
  var result_12123040 = ({val: 0, has: false});

  var F={procname:"some.some",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 121;
    result_12123040.has = true;
    F.line = 122;
    result_12123040.val = val_12123038;
  framePtr = F.prev;

  return result_12123040;

}
function to_option_12123028(x_12123031) {
  var result_12123033 = ({val: 0, has: false});

  var F={procname:"toOption.toOption",prev:framePtr,filename:"utils.nim",line:0};
  framePtr = F;
    F.line = 5;
    nimCopy(result_12123033, some_12123035(x_12123031), NTI10255330);
  framePtr = F.prev;

  return result_12123033;

}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI6237, name: null, trace: null, up: null}, "OverflowError");

  
}
function raiseIndexError(i_210047, a_210048, b_210049) {
    var Tmp1;

    if ((b_210049 < a_210048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_210047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_210048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_210049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI112), parent: null, m_type: NTI6249, name: null, trace: null, up: null}, "IndexError");

  
}
function with_elem_12120688(self_12120690, elem_12120691) {
  var result_12120692 = null;

  var F={procname:"element_events.withElem",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
    F.line = 75;
    result_12120692 = {sender: elem_12120691, pos: self_12120690.pos, handled: self_12120690.handled};
  framePtr = F.prev;

  return result_12120692;

}
function is_some_10907193(self_10907197) {
  var result_10907198 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_10907198 = !((self_10907197.val == null));
  framePtr = F.prev;

  return result_10907198;

}
function is_none_10907515(self_10907519) {
  var result_10907520 = false;

  var F={procname:"isNone.isNone",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 158;
    result_10907520 = (self_10907519.val == null);
  framePtr = F.prev;

  return result_10907520;

}
function get_10990156(self_10990161) {
  var result_10990163 = null;
  var result_10990163_Idx = 0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (is_none_10907515(self_10990161)) {
    F.line = 215;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI920204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    F.line = 216;
    result_10990163 = self_10990161; result_10990163_Idx = "val";
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return [result_10990163, result_10990163_Idx];

}
function pointer_captured_by_someone_else_12115459(self_12115461) {
    var Tmp1;
      var Tmp2;

  var result_12115462 = false;

  var F={procname:"element_events.pointerCapturedBySomeoneElse",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
    F.line = 59;
    if (!is_some_10907193(pointer_captured_to_12093967[0])) Tmp1 = false; else {      Tmp1 = !(((Tmp2 = get_10990156(pointer_captured_to_12093967[0]), Tmp2)[0][Tmp2[1]] == self_12115461));    }    result_12115462 = Tmp1;
  framePtr = F.prev;

  return result_12115462;

}
function hash_10090440(x_10090443) {
  var result_10090444 = 0;

  var F={procname:"hash.hash",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
    F.line = 116;
    result_10090444 = x_10090443;
  framePtr = F.prev;

  return result_10090444;

}
function hash_10280010(element_10280012) {
  var result_10280013 = 0;

  var F={procname:"types.hash",prev:framePtr,filename:"types.nim",line:0};
  framePtr = F;
    F.line = 176;
    result_10280013 = hash_10090440(element_10280012.id);
  framePtr = F.prev;

  return result_10280013;

}
function is_filled_10152018(hcode_10152020) {
  var result_10152021 = false;

  var F={procname:"tables.isFilled",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    F.line = 27;
    result_10152021 = !((hcode_10152020 == 0));
  framePtr = F.prev;

  return result_10152021;

}
function next_try_10155014(h_10155016, max_hash_10155017) {
  var result_10155018 = 0;

  var F={procname:"tables.nextTry",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    F.line = 30;
    result_10155018 = (addInt(h_10155016, 1) & max_hash_10155017);
  framePtr = F.prev;

  return result_10155018;

}
function raw_get_10300802(t_10300806, key_10300807, hc_10300808, hc_10300808_Idx) {
            var Tmp3;

  var result_10300809 = 0;

  var F={procname:"rawGet.rawGet",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 63;
    hc_10300808[hc_10300808_Idx] = hash_10280010(key_10300807);
    if ((hc_10300808[hc_10300808_Idx] == 0)) {
    F.line = 65;
    hc_10300808[hc_10300808_Idx] = 314159265;
    }
    
    if (((t_10300806.data != null ? t_10300806.data.length : 0) == 0)) {
    F.line = 47;
    result_10300809 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_10310138 = (hc_10300808[hc_10300808_Idx] & (t_10300806.data != null ? (t_10300806.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_10152018(t_10300806.data[chckIndx(h_10310138, 0, (t_10300806.data != null ? t_10300806.data.length : 0)+0-1)-0].Field0)) break L2;
            if (!(t_10300806.data[chckIndx(h_10310138, 0, (t_10300806.data != null ? t_10300806.data.length : 0)+0-1)-0].Field0 == hc_10300808[hc_10300808_Idx])) Tmp3 = false; else {              Tmp3 = (t_10300806.data[chckIndx(h_10310138, 0, (t_10300806.data != null ? t_10300806.data.length : 0)+0-1)-0].Field1 == key_10300807);            }          if (Tmp3) {
          F.line = 55;
          result_10300809 = h_10310138;
          break BeforeRet;
          }
          
          F.line = 56;
          h_10310138 = next_try_10155014(h_10310138, (t_10300806.data != null ? (t_10300806.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_10300809 = subInt(-1, h_10310138);
  } while (false);
  framePtr = F.prev;

  return result_10300809;

}
function has_key_10300793(t_10300798, key_10300799) {
  var result_10300800 = false;

  var F={procname:"hasKey.hasKey",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 395;
    var hc_10300801 = [0];
    F.line = 396;
    result_10300800 = (0 <= raw_get_10300802(t_10300798, key_10300799, hc_10300801, 0));
  framePtr = F.prev;

  return result_10300800;

}
function HEX5BHEX5D_10310862(t_10310868, key_10310869) {
  var result_10310871 = null;
  var result_10310871_Idx = 0;

  var F={procname:"[].[]",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 257;
    var hcHEX60gensym10155424_10310872 = [0];
    F.line = 258;
    var indexHEX60gensym10155425_10310881 = raw_get_10300802(t_10310868, key_10310869, hcHEX60gensym10155424_10310872, 0);
    if ((0 <= indexHEX60gensym10155425_10310881)) {
    F.line = 259;
    result_10310871 = t_10310868.data[chckIndx(indexHEX60gensym10155425_10310881, 0, (t_10310868.data != null ? t_10310868.data.length : 0)+0-1)-0]; result_10310871_Idx = "Field2";
    }
    else {
      F.line = 264;
      raiseException({message: makeNimstrLit("key not found"), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    
  framePtr = F.prev;

  return [result_10310871, result_10310871_Idx];

}
function actual_world_position_10300676(self_10300678) {
    var Tmp1;

  var result_10300683 = null;

  var F={procname:"types.actualWorldPosition",prev:framePtr,filename:"types.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (has_key_10300793(world_positions_10300629[0], self_10300678)) {
    F.line = 184;
    result_10300683 = (Tmp1 = HEX5BHEX5D_10310862(world_positions_10300629[0], self_10300678), Tmp1)[0][Tmp1[1]];
    break BeforeRet;
    }
    
  } while (false);
  framePtr = F.prev;

  return result_10300683;

}
function is_some_10910042(self_10910046) {
  var result_10910047 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_10910047 = !((self_10910046.val == null));
  framePtr = F.prev;

  return result_10910047;

}
function get_11190187(self_11190191, otherwise_11190192) {
    var Tmp1;

  var result_11190193 = null;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 189;
    if (is_some_10910042(self_11190191)) {
    Tmp1 = self_11190191.val;
    }
    else {
    Tmp1 = otherwise_11190192;
    }
    
    result_11190193 = Tmp1;
  framePtr = F.prev;

  return result_11190193;

}
function is_some_10325097(self_10325101) {
  var result_10325102 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_10325102 = !((self_10325101.val == null));
  framePtr = F.prev;

  return result_10325102;

}
function some_10965088(val_10965091) {
  var result_10965093 = ({val: null});

  var F={procname:"some.some",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    if (!(!((val_10965091 == null)))) {
    F.line = 118;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/options.nim(118, 11) `not val.isNil` "));
    }
    
    F.line = 119;
    result_10965093.val = val_10965091;
  framePtr = F.prev;

  return result_10965093;

}
function none_10975428() {
  var result_10975445 = ({val: null});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  framePtr = F.prev;

  return result_10975445;

}
function map_11190074(self_11190079, callback_11190082) {
    var Tmp1;

  var result_11190084 = ({val: null});

  var F={procname:"map.map",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 243;
    if (is_some_10325097(self_11190079)) {
    Tmp1 = some_10965088(callback_11190082(self_11190079.val));
    }
    else {
    Tmp1 = none_10975428();
    }
    
    nimCopy(result_11190084, Tmp1, NTI10270060);
  framePtr = F.prev;

  return result_11190084;

}
function zero_9863079() {
  var result_9863091 = null;

  var F={procname:"vec.zero",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 24;
    result_9863091 = vec2_9863092(0.0, 0.0);
  framePtr = F.prev;

  return result_9863091;

}
function is_point_inside_11185125(self_11185127, point_11185132) {
    function HEX3Aanonymous_11190001(x_11190025) {
      var result_11190029 = null;

      var F={procname:"isPointInside.:anonymous",prev:framePtr,filename:"element.nim",line:0};
      framePtr = F;
        F.line = 442;
        result_11190029 = x_11190025.size;
      framePtr = F.prev;

      return result_11190029;

    }
    var Tmp1;
    var Tmp2;
    var Tmp3;

  var result_11185133 = false;

  var F={procname:"element.isPointInside",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 441;
    F.line = 441;
    var pos_11185134 = actual_world_position_10300676(self_11185127);
    F.line = 442;
    var size_11190227 = get_11190187(map_11190074(self_11185127.bounds, HEX3Aanonymous_11190001), zero_9863079());
    if (!(pos_11185134.x < point_11185132.x)) Tmp3 = false; else {      Tmp3 = (point_11185132.x < (pos_11185134.x + size_11190227.x));    }    if (!Tmp3) Tmp2 = false; else {      Tmp2 = (pos_11185134.y < point_11185132.y);    }    if (!Tmp2) Tmp1 = false; else {      Tmp1 = (point_11185132.y < (pos_11185134.y + size_11190227.y));    }    result_11185133 = Tmp1;
  framePtr = F.prev;

  return result_11185133;

}
function pointer_captured_12093999(self_12094001) {
    var Tmp1;
      var Tmp2;

  var result_12094002 = false;

  var F={procname:"element_events.pointerCaptured",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
    F.line = 48;
    if (!is_some_10907193(pointer_captured_to_12093967[0])) Tmp1 = false; else {      Tmp1 = ((Tmp2 = get_10990156(pointer_captured_to_12093967[0]), Tmp2)[0][Tmp2[1]] == self_12094001);    }    result_12094002 = Tmp1;
  framePtr = F.prev;

  return result_12094002;

}
function raw_get_11885802(t_11885806, key_11885807, hc_11885808, hc_11885808_Idx) {
            var Tmp3;

  var result_11885809 = 0;

  var F={procname:"rawGet.rawGet",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 63;
    hc_11885808[hc_11885808_Idx] = hash_10280010(key_11885807);
    if ((hc_11885808[hc_11885808_Idx] == 0)) {
    F.line = 65;
    hc_11885808[hc_11885808_Idx] = 314159265;
    }
    
    if (((t_11885806.data != null ? t_11885806.data.length : 0) == 0)) {
    F.line = 47;
    result_11885809 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_11896585 = (hc_11885808[hc_11885808_Idx] & (t_11885806.data != null ? (t_11885806.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_10152018(t_11885806.data[chckIndx(h_11896585, 0, (t_11885806.data != null ? t_11885806.data.length : 0)+0-1)-0].Field0)) break L2;
            if (!(t_11885806.data[chckIndx(h_11896585, 0, (t_11885806.data != null ? t_11885806.data.length : 0)+0-1)-0].Field0 == hc_11885808[hc_11885808_Idx])) Tmp3 = false; else {              Tmp3 = (t_11885806.data[chckIndx(h_11896585, 0, (t_11885806.data != null ? t_11885806.data.length : 0)+0-1)-0].Field1 == key_11885807);            }          if (Tmp3) {
          F.line = 55;
          result_11885809 = h_11896585;
          break BeforeRet;
          }
          
          F.line = 56;
          h_11896585 = next_try_10155014(h_11896585, (t_11885806.data != null ? (t_11885806.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_11885809 = subInt(-1, h_11896585);
  } while (false);
  framePtr = F.prev;

  return result_11885809;

}
function has_key_11973094(t_11973099, key_11973100) {
  var result_11973101 = false;

  var F={procname:"hasKey.hasKey",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 395;
    var hc_11973102 = [0];
    F.line = 396;
    result_11973101 = (0 <= raw_get_11885802(t_11973099, key_11973100, hc_11973102, 0));
  framePtr = F.prev;

  return result_11973101;

}
function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI6235, name: null, trace: null, up: null}, "DivByZeroError");

  
}
function parse_saturated_natural_1035017(s_1035019, b_1035021, b_1035021_Idx, start_1035022) {
      var Tmp1;
          var Tmp4;

  var result_1035024 = 0;

  var F={procname:"parseutils.parseSaturatedNatural",prev:framePtr,filename:"parseutils.nim",line:0};
  framePtr = F;
    F.line = 476;
    var i_1035025 = start_1035022;
    if (((i_1035025 < (s_1035019 != null ? s_1035019.length : 0)) && (s_1035019[chckIndx(i_1035025, 0, (s_1035019 != null ? s_1035019.length : 0)+0-1)-0] == 43))) {
    F.line = 477;
    i_1035025 = addInt(i_1035025, 1);
    }
    
      if (!(i_1035025 < (s_1035019 != null ? s_1035019.length : 0))) Tmp1 = false; else {        Tmp1 = (ConstSet6[s_1035019[chckIndx(i_1035025, 0, (s_1035019 != null ? s_1035019.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    F.line = 479;
    b_1035021[b_1035021_Idx] = 0;
    L2: do {
      F.line = 480;
        L3: while (true) {
          if (!(i_1035025 < (s_1035019 != null ? s_1035019.length : 0))) Tmp4 = false; else {            Tmp4 = (ConstSet7[s_1035019[chckIndx(i_1035025, 0, (s_1035019 != null ? s_1035019.length : 0)+0-1)-0]] != undefined);          }        if (!Tmp4) break L3;
          F.line = 481;
          var c_1045016 = subInt(s_1035019[chckIndx(i_1035025, 0, (s_1035019 != null ? s_1035019.length : 0)+0-1)-0], 48);
          if ((b_1035021[b_1035021_Idx] <= divInt(subInt(2147483647, c_1045016), 10))) {
          F.line = 483;
          b_1035021[b_1035021_Idx] = addInt(mulInt(b_1035021[b_1035021_Idx], 10), c_1045016);
          }
          else {
            F.line = 485;
            b_1035021[b_1035021_Idx] = 2147483647;
          }
          
          F.line = 486;
          i_1035025 = addInt(i_1035025, 1);
          L5: do {
            F.line = 487;
              L6: while (true) {
              if (!((i_1035025 < (s_1035019 != null ? s_1035019.length : 0)) && (s_1035019[chckIndx(i_1035025, 0, (s_1035019 != null ? s_1035019.length : 0)+0-1)-0] == 95))) break L6;
                F.line = 487;
                i_1035025 = addInt(i_1035025, 1);
              }
          } while(false);
        }
    } while(false);
    F.line = 488;
    result_1035024 = subInt(i_1035025, start_1035022);
    }
    
  framePtr = F.prev;

  return result_1035024;

}
function HEX5BHEX5D_4445068(s_4445072, x_4445074) {
  var result_4445075 = null;

  var F={procname:"[].[]",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2436;
    var a_4445201 = x_4445074.a;
    F.line = 2437;
    var l_4445401 = addInt(subInt(subInt((s_4445072 != null ? s_4445072.length : 0), x_4445074.b), a_4445201), 1);
    F.line = 2438;
    result_4445075 = nimCopy(null, mnewString(chckRange(l_4445401, 0, 2147483647)), NTI112);
    L1: do {
      F.line = 2439;
      var i_4445409 = 0;
      F.line = 106;
      var i_14320823 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_14320823 < l_4445401)) break L3;
            F.line = 2439;
            i_4445409 = i_14320823;
            F.line = 2439;
            result_4445075[chckIndx(i_4445409, 0, (result_4445075 != null ? result_4445075.length : 0)+0-1)-0] = s_4445072[chckIndx(addInt(i_4445409, a_4445201), 0, (s_4445072 != null ? s_4445072.length : 0)+0-1)-0];
            F.line = 109;
            i_14320823 = addInt(i_14320823, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_4445075;

}
function HEX2EHEX2E_4445001(a_4445006, b_4445008) {
  var result_4445014 = ({a: 0, b: 0});

  var F={procname:".....",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 469;
    nimCopy(result_4445014, {a: a_4445006, b: b_4445008}, NTI4445011);
  framePtr = F.prev;

  return result_4445014;

}
function parse_standard_format_specifier_9755322(s_9755324, start_9755325, ignore_unknown_suffix_9755327) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_9755328 = ({fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0});

  var F={procname:"strformat.parseStandardFormatSpecifier",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    F.line = 379;
    result_9755328.fill = 32;
    F.line = 380;
    result_9755328.align = 0;
    F.line = 381;
    result_9755328.sign = 45;
    F.line = 382;
    var i_9755331 = start_9755325;
    if (((addInt(i_9755331, 1) < (s_9755324 != null ? s_9755324.length : 0)) && (ConstSet2[s_9755324[chckIndx(addInt(i_9755331, 1), 0, (s_9755324 != null ? s_9755324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 384;
    result_9755328.fill = s_9755324[chckIndx(i_9755331, 0, (s_9755324 != null ? s_9755324.length : 0)+0-1)-0];
    F.line = 385;
    result_9755328.align = s_9755324[chckIndx(addInt(i_9755331, 1), 0, (s_9755324 != null ? s_9755324.length : 0)+0-1)-0];
    F.line = 386;
    i_9755331 = addInt(i_9755331, 2);
    }
    else {
    if (((i_9755331 < (s_9755324 != null ? s_9755324.length : 0)) && (ConstSet3[s_9755324[chckIndx(i_9755331, 0, (s_9755324 != null ? s_9755324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 388;
    result_9755328.align = s_9755324[chckIndx(i_9755331, 0, (s_9755324 != null ? s_9755324.length : 0)+0-1)-0];
    F.line = 389;
    i_9755331 = addInt(i_9755331, 1);
    }
    }
    if (((i_9755331 < (s_9755324 != null ? s_9755324.length : 0)) && (ConstSet4[s_9755324[chckIndx(i_9755331, 0, (s_9755324 != null ? s_9755324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 392;
    result_9755328.sign = s_9755324[chckIndx(i_9755331, 0, (s_9755324 != null ? s_9755324.length : 0)+0-1)-0];
    F.line = 393;
    i_9755331 = addInt(i_9755331, 1);
    }
    
    if (((i_9755331 < (s_9755324 != null ? s_9755324.length : 0)) && (s_9755324[chckIndx(i_9755331, 0, (s_9755324 != null ? s_9755324.length : 0)+0-1)-0] == 35))) {
    F.line = 396;
    result_9755328.alternateForm = true;
    F.line = 397;
    i_9755331 = addInt(i_9755331, 1);
    }
    
      if (!((addInt(i_9755331, 1) < (s_9755324 != null ? s_9755324.length : 0)) && (s_9755324[chckIndx(i_9755331, 0, (s_9755324 != null ? s_9755324.length : 0)+0-1)-0] == 48))) Tmp1 = false; else {        Tmp1 = (ConstSet5[s_9755324[chckIndx(addInt(i_9755331, 1), 0, (s_9755324 != null ? s_9755324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    F.line = 400;
    result_9755328.padWithZero = true;
    F.line = 401;
    i_9755331 = addInt(i_9755331, 1);
    }
    
    F.line = 403;
    var parsed_length_9775015 = parse_saturated_natural_1035017(s_9755324, result_9755328, "minimumWidth", i_9755331);
    F.line = 404;
    i_9755331 = addInt(i_9755331, parsed_length_9775015);
    if (((i_9755331 < (s_9755324 != null ? s_9755324.length : 0)) && (s_9755324[chckIndx(i_9755331, 0, (s_9755324 != null ? s_9755324.length : 0)+0-1)-0] == 46))) {
    F.line = 406;
    i_9755331 = addInt(i_9755331, 1);
    F.line = 407;
    var parsed_length_b_9775029 = parse_saturated_natural_1035017(s_9755324, result_9755328, "precision", i_9755331);
    F.line = 408;
    i_9755331 = addInt(i_9755331, parsed_length_b_9775029);
    }
    else {
      F.line = 410;
      result_9755328.precision = -1;
    }
    
      if (!(i_9755331 < (s_9755324 != null ? s_9755324.length : 0))) Tmp2 = false; else {        Tmp2 = (ConstSet8[s_9755324[chckIndx(i_9755331, 0, (s_9755324 != null ? s_9755324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp2) {
    F.line = 413;
    result_9755328.typ = s_9755324[chckIndx(i_9755331, 0, (s_9755324 != null ? s_9755324.length : 0)+0-1)-0];
    F.line = 414;
    i_9755331 = addInt(i_9755331, 1);
    }
    
    F.line = 415;
    result_9755328.endPosition = i_9755331;
      if (!!((i_9755331 == (s_9755324 != null ? s_9755324.length : 0)))) Tmp3 = false; else {        Tmp3 = !(ignore_unknown_suffix_9755327);      }    if (Tmp3) {
    F.line = 417;
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_4445068(s_9755324, HEX2EHEX2E_4445001(i_9755331, 1)) || []), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
    }
    
  framePtr = F.prev;

  return result_9755328;

}
function nucruneLen(s_1116829) {
  var result_1116830 = 0;

  var F={procname:"unicode.runeLen",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
    F.line = 41;
    var i_1116832 = 0;
    L1: do {
      F.line = 42;
        L2: while (true) {
        if (!(i_1116832 < (s_1116829 != null ? s_1116829.length : 0))) break L2;
          if ((s_1116829[chckIndx(i_1116832, 0, (s_1116829 != null ? s_1116829.length : 0)+0-1)-0] <= 127)) {
          F.line = 43;
          i_1116832 = addInt(i_1116832, 1);
          }
          else {
          if ((((s_1116829[chckIndx(i_1116832, 0, (s_1116829 != null ? s_1116829.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          F.line = 44;
          i_1116832 = addInt(i_1116832, 2);
          }
          else {
          if ((((s_1116829[chckIndx(i_1116832, 0, (s_1116829 != null ? s_1116829.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
          F.line = 45;
          i_1116832 = addInt(i_1116832, 3);
          }
          else {
          if ((((s_1116829[chckIndx(i_1116832, 0, (s_1116829 != null ? s_1116829.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
          F.line = 46;
          i_1116832 = addInt(i_1116832, 4);
          }
          else {
          if ((((s_1116829[chckIndx(i_1116832, 0, (s_1116829 != null ? s_1116829.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
          F.line = 47;
          i_1116832 = addInt(i_1116832, 5);
          }
          else {
          if ((((s_1116829[chckIndx(i_1116832, 0, (s_1116829 != null ? s_1116829.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
          F.line = 48;
          i_1116832 = addInt(i_1116832, 6);
          }
          else {
            F.line = 49;
          i_1116832 = addInt(i_1116832, 1);
          }
          }}}}}
          F.line = 50;
          result_1116830 = addInt(result_1116830, 1);
        }
    } while(false);
  framePtr = F.prev;

  return result_1116830;

}
function rune_len_at_1116932(s_1116934, i_1116935) {
  var result_1116936 = 0;

  var F={procname:"unicode.runeLenAt",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
    if ((s_1116934[chckIndx(i_1116935, 0, (s_1116934 != null ? s_1116934.length : 0)+0-1)-0] <= 127)) {
    F.line = 62;
    result_1116936 = 1;
    }
    else {
    if ((((s_1116934[chckIndx(i_1116935, 0, (s_1116934 != null ? s_1116934.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
    F.line = 63;
    result_1116936 = 2;
    }
    else {
    if ((((s_1116934[chckIndx(i_1116935, 0, (s_1116934 != null ? s_1116934.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
    F.line = 64;
    result_1116936 = 3;
    }
    else {
    if ((((s_1116934[chckIndx(i_1116935, 0, (s_1116934 != null ? s_1116934.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
    F.line = 65;
    result_1116936 = 4;
    }
    else {
    if ((((s_1116934[chckIndx(i_1116935, 0, (s_1116934 != null ? s_1116934.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
    F.line = 66;
    result_1116936 = 5;
    }
    else {
    if ((((s_1116934[chckIndx(i_1116935, 0, (s_1116934 != null ? s_1116934.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
    F.line = 67;
    result_1116936 = 6;
    }
    else {
      F.line = 68;
      result_1116936 = 1;
    }
    }}}}}
  framePtr = F.prev;

  return result_1116936;

}
function rune_offset_1740244(s_1740246, pos_1740247, start_1740248) {
  var result_1740249 = 0;

  var F={procname:"unicode.runeOffset",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 319;
    var i_1740251 = 0;
    F.line = 320;
    var o_1740252 = start_1740248;
    L1: do {
      F.line = 321;
        L2: while (true) {
        if (!(i_1740251 < pos_1740247)) break L2;
          F.line = 322;
          o_1740252 = addInt(o_1740252, chckRange(rune_len_at_1116932(s_1740246, o_1740252), 0, 2147483647));
          if (((s_1740246 != null ? s_1740246.length : 0) <= o_1740252)) {
          F.line = 324;
          result_1740249 = -1;
          break BeforeRet;
          }
          
          F.line = 325;
          i_1740251 = addInt(i_1740251, 1);
        }
    } while(false);
    F.line = 326;
    result_1740249 = o_1740252;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1740249;

}
function validate_utf8_1360229(s_1360231) {
            var Tmp3;
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;

  var result_1360232 = 0;

  var F={procname:"unicode.validateUtf8",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 172;
    var i_1360234 = 0;
    F.line = 173;
    var l_1360235 = (s_1360231 != null ? s_1360231.length : 0);
    L1: do {
      F.line = 174;
        L2: while (true) {
        if (!(i_1360234 < l_1360235)) break L2;
          if ((s_1360231[chckIndx(i_1360234, 0, (s_1360231 != null ? s_1360231.length : 0)+0-1)-0] <= 127)) {
          F.line = 176;
          i_1360234 = addInt(i_1360234, 1);
          }
          else {
          if ((((s_1360231[chckIndx(i_1360234, 0, (s_1360231 != null ? s_1360231.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          if ((s_1360231[chckIndx(i_1360234, 0, (s_1360231 != null ? s_1360231.length : 0)+0-1)-0] < 194)) {
          F.line = 178;
          result_1360232 = i_1360234;
          break BeforeRet;
          }
          
            if (!(addInt(i_1360234, 1) < l_1360235)) Tmp3 = false; else {              Tmp3 = (((s_1360231[chckIndx(addInt(i_1360234, 1), 0, (s_1360231 != null ? s_1360231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp3) {
          F.line = 179;
          i_1360234 = addInt(i_1360234, 2);
          }
          else {
            F.line = 180;
            result_1360232 = i_1360234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_1360231[chckIndx(i_1360234, 0, (s_1360231 != null ? s_1360231.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
            if (!(addInt(i_1360234, 2) < l_1360235)) Tmp5 = false; else {              Tmp5 = (((s_1360231[chckIndx(addInt(i_1360234, 1), 0, (s_1360231 != null ? s_1360231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp5) Tmp4 = false; else {              Tmp4 = (((s_1360231[chckIndx(addInt(i_1360234, 2), 0, (s_1360231 != null ? s_1360231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp4) {
          F.line = 183;
          i_1360234 = addInt(i_1360234, 3);
          }
          else {
            F.line = 184;
            result_1360232 = i_1360234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_1360231[chckIndx(i_1360234, 0, (s_1360231 != null ? s_1360231.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
            if (!(addInt(i_1360234, 3) < l_1360235)) Tmp8 = false; else {              Tmp8 = (((s_1360231[chckIndx(addInt(i_1360234, 1), 0, (s_1360231 != null ? s_1360231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp8) Tmp7 = false; else {              Tmp7 = (((s_1360231[chckIndx(addInt(i_1360234, 2), 0, (s_1360231 != null ? s_1360231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp7) Tmp6 = false; else {              Tmp6 = (((s_1360231[chckIndx(addInt(i_1360234, 3), 0, (s_1360231 != null ? s_1360231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp6) {
          F.line = 189;
          i_1360234 = addInt(i_1360234, 4);
          }
          else {
            F.line = 190;
            result_1360232 = i_1360234;
            break BeforeRet;
          }
          
          }
          else {
            F.line = 192;
            result_1360232 = i_1360234;
            break BeforeRet;
          }
          }}}
        }
    } while(false);
    F.line = 193;
    result_1360232 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1360232;

}
function nsuRepeatChar(c_9300048, count_9300049) {
  var result_9300050 = null;

  var F={procname:"strutils.repeat",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 1282;
    result_9300050 = nimCopy(null, mnewString(count_9300049), NTI112);
    L1: do {
      F.line = 1283;
      var i_9300059 = 0;
      F.line = 66;
      var colontmp__14320854 = 0;
      F.line = 1283;
      colontmp__14320854 = subInt(count_9300049, 1);
      F.line = 77;
      var res_14320855 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_14320855 <= colontmp__14320854)) break L3;
            F.line = 1283;
            i_9300059 = res_14320855;
            F.line = 1283;
            result_9300050[chckIndx(i_9300059, 0, (result_9300050 != null ? result_9300050.length : 0)+0-1)-0] = c_9300048;
            F.line = 80;
            res_14320855 = addInt(res_14320855, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_9300050;

}
function align_string_9755222(s_9755224, minimum_width_9755225, align_9755226, fill_9755227) {
      var Tmp1;

  var result_9755228 = null;

  var F={procname:"strformat.alignString",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    if ((minimum_width_9755225 == 0)) {
    F.line = 282;
    result_9755228 = nimCopy(null, s_9755224, NTI112);
    }
    else {
      F.line = 284;
      if ((validate_utf8_1360229(s_9755224) == -1)) {
      Tmp1 = nucruneLen(s_9755224);
      }
      else {
      Tmp1 = (s_9755224 != null ? s_9755224.length : 0);
      }
      
      var s_rune_len_9755229 = Tmp1;
      F.line = 285;
      var to_fill_9755230 = subInt(minimum_width_9755225, s_rune_len_9755229);
      if ((to_fill_9755230 <= 0)) {
      F.line = 287;
      result_9755228 = nimCopy(null, s_9755224, NTI112);
      }
      else {
      if (((align_9755226 == 60) || (align_9755226 == 0))) {
      F.line = 289;
      result_9755228 = nimCopy(null, (s_9755224 || []).concat(nsuRepeatChar(fill_9755227, chckRange(to_fill_9755230, 0, 2147483647)) || []), NTI112);
      }
      else {
      if ((align_9755226 == 94)) {
      F.line = 291;
      var half_9755231 = divInt(to_fill_9755230, 2);
      F.line = 292;
      result_9755228 = nimCopy(null, (nsuRepeatChar(fill_9755227, chckRange(half_9755231, 0, 2147483647)) || []).concat(s_9755224 || [],nsuRepeatChar(fill_9755227, chckRange(subInt(to_fill_9755230, half_9755231), 0, 2147483647)) || []), NTI112);
      }
      else {
        F.line = 294;
        result_9755228 = nimCopy(null, (nsuRepeatChar(fill_9755227, chckRange(to_fill_9755230, 0, 2147483647)) || []).concat(s_9755224 || []), NTI112);
      }
      }}
    }
    
  framePtr = F.prev;

  return result_9755228;

}
function format_value_9800080(result_9800083, result_9800083_Idx, value_9800084, specifier_9800085) {
  var F={procname:"strformat.formatValue",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    F.line = 502;
    var spec_9800086 = parse_standard_format_specifier_9755322(specifier_9800085, 0, false);
    F.line = 503;
    var value_9800087 = nimCopy(null, value_9800084, NTI112);
    F.line = 504;
    switch (spec_9800086.typ) {
    case 115:
    case 0:
      break;
    default: 
      F.line = 507;
      raiseException({message: (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_9800086.typ]), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
      break;
    }
    if (!((spec_9800086.precision == -1))) {
    if ((spec_9800086.precision < nucruneLen(value_9800087))) {
    F.line = 512;
    (value_9800087 == null ? value_9800087 = mnewString(chckRange(rune_offset_1740244(value_9800087, chckRange(spec_9800086.precision, 0, 2147483647), 0), 0, 2147483647)) : value_9800087.length = chckRange(rune_offset_1740244(value_9800087, chckRange(spec_9800086.precision, 0, 2147483647), 0), 0, 2147483647));
    }
    
    }
    
    F.line = 513;
    if (result_9800083[result_9800083_Idx] != null) { result_9800083[result_9800083_Idx] = (result_9800083[result_9800083_Idx]).concat(align_string_9755222(value_9800087, spec_9800086.minimumWidth, spec_9800086.align, spec_9800086.fill)); } else { result_9800083[result_9800083_Idx] = align_string_9755222(value_9800087, spec_9800086.minimumWidth, spec_9800086.align, spec_9800086.fill).slice(); };
  framePtr = F.prev;

  
}
function is_some_10325338(self_10325342) {
  var result_10325343 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_10325343 = self_10325342.has;
  framePtr = F.prev;

  return result_10325343;

}
function add_float_325219(result_325222, result_325222_Idx, x_325223) {
  var F={procname:"system.addFloat",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2350;
    if (result_325222[result_325222_Idx] != null) { result_325222[result_325222_Idx] = (result_325222[result_325222_Idx]).concat(cstrToNimstr((x_325223)+"")); } else { result_325222[result_325222_Idx] = cstrToNimstr((x_325223)+"").slice(); };
  framePtr = F.prev;

  
}
function add_quoted_11135441(s_11135444, s_11135444_Idx, x_11135445) {
  var F={procname:"addQuoted.addQuoted",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2803;
    add_float_325219(s_11135444, s_11135444_Idx, x_11135445);
  framePtr = F.prev;

  
}
function HEX24_11135415(self_11135419) {
  var result_11135420 = [null];

  var F={procname:"$.$",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    if (is_some_10325338(self_11135419)) {
    F.line = 360;
    result_11135420[0] = nimCopy(null, makeNimstrLit("Some("), NTI112);
    F.line = 361;
    add_quoted_11135441(result_11135420, 0, self_11135419.val);
    F.line = 362;
    if (result_11135420[0] != null) { result_11135420[0] = (result_11135420[0]).concat(makeNimstrLit(")")); } else { result_11135420[0] = makeNimstrLit(")"); };
    }
    else {
      F.line = 364;
      result_11135420[0] = nimCopy(null, makeNimstrLit("None[float]"), NTI112);
    }
    
  framePtr = F.prev;

  return result_11135420[0];

}
function HEX24_11131890(p_11131892) {
  var result_11131893 = null;

  var F={procname:"element.$",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 270;
    F.line = 270;
    var fmt_res_11131898 = [mnewString(0)];
    F.line = 270;
    if (fmt_res_11131898[0] != null) { fmt_res_11131898[0] = (fmt_res_11131898[0]).concat(makeNimstrLit("props: ")); } else { fmt_res_11131898[0] = makeNimstrLit("props: "); };
    F.line = 270;
    format_value_9800080(fmt_res_11131898, 0, HEX24_11135415(p_11131892.x), []);
    F.line = 270;
    if (fmt_res_11131898[0] != null) { fmt_res_11131898[0] = (fmt_res_11131898[0]).concat(makeNimstrLit(" ")); } else { fmt_res_11131898[0] = makeNimstrLit(" "); };
    F.line = 270;
    format_value_9800080(fmt_res_11131898, 0, HEX24_11135415(p_11131892.y), []);
    F.line = 270;
    if (fmt_res_11131898[0] != null) { fmt_res_11131898[0] = (fmt_res_11131898[0]).concat(makeNimstrLit(" ")); } else { fmt_res_11131898[0] = makeNimstrLit(" "); };
    F.line = 270;
    format_value_9800080(fmt_res_11131898, 0, HEX24_11135415(p_11131892.width), []);
    F.line = 270;
    if (fmt_res_11131898[0] != null) { fmt_res_11131898[0] = (fmt_res_11131898[0]).concat(makeNimstrLit(" ")); } else { fmt_res_11131898[0] = makeNimstrLit(" "); };
    F.line = 270;
    format_value_9800080(fmt_res_11131898, 0, HEX24_11135415(p_11131892.height), []);
    result_11131893 = nimCopy(null, fmt_res_11131898[0], NTI112);
  framePtr = F.prev;

  return result_11131893;

}
function HEX24_11137220(p_11137222) {
  var result_11137223 = null;

  var F={procname:"element.$",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 273;
    result_11137223 = nimCopy(null, (makeNimstrLit("Elem: ") || []).concat(HEX24_11131890(p_11137222.props) || []), NTI112);
  framePtr = F.prev;

  return result_11137223;

}
function HEX5BHEX5D_11974120(t_11974126, key_11974127) {
  var result_11974129 = null;
  var result_11974129_Idx = 0;

  var F={procname:"[].[]",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 257;
    var hcHEX60gensym10155424_11974130 = [0];
    F.line = 258;
    var indexHEX60gensym10155425_11974139 = raw_get_11885802(t_11974126, key_11974127, hcHEX60gensym10155424_11974130, 0);
    if ((0 <= indexHEX60gensym10155425_11974139)) {
    F.line = 259;
    result_11974129 = t_11974126.data[chckIndx(indexHEX60gensym10155425_11974139, 0, (t_11974126.data != null ? t_11974126.data.length : 0)+0-1)-0]; result_11974129_Idx = "Field2";
    }
    else {
      F.line = 262;
      raiseException({message: (makeNimstrLit("key not found: ") || []).concat(HEX24_11137220(key_11974127) || []), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    
  framePtr = F.prev;

  return [result_11974129, result_11974129_Idx];

}
function delete_11992632(x_11992637, x_11992637_Idx, i_11992638) {
  var F={procname:"delete.delete",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1254;
    x_11992637[x_11992637_Idx].splice(i_11992638, 1);
  framePtr = F.prev;

  
}
function find_11990415(a_11990419, item_11990420) {
  var result_11990421 = 0;

  var F={procname:"find.find",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    L1: do {
      F.line = 1751;
      var i_11990434 = null;
      F.line = 184;
      var i_14320883 = 0;
      F.line = 185;
      var l_14320884 = (a_11990419 != null ? a_11990419.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14320883 < l_14320884)) break L3;
            F.line = 1751;
            i_11990434 = a_11990419[chckIndx(i_14320883, 0, (a_11990419 != null ? a_11990419.length : 0)+0-1)-0];
            if ((i_11990434 == item_11990420)) {
            F.line = 1752;
            break BeforeRet;
            }
            
            F.line = 1753;
            result_11990421 = addInt(result_11990421, 1);
            F.line = 188;
            i_14320883 = addInt(i_14320883, 1);
            if (!(((a_11990419 != null ? a_11990419.length : 0) == l_14320884))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 1754;
    result_11990421 = -1;
  } while (false);
  framePtr = F.prev;

  return result_11990421;

}
function emit_11980043(self_11980048, self_11980048_Idx, data_11980049) {
  var F={procname:"emit.emit",prev:framePtr,filename:"events.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 24;
      var to_remove_11990414 = null;
      F.line = 184;
      var i_14320862 = 0;
      F.line = 185;
      var l_14320863 = (self_11980048[self_11980048_Idx].toRemove != null ? self_11980048[self_11980048_Idx].toRemove.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14320862 < l_14320863)) break L3;
            F.line = 24;
            to_remove_11990414 = self_11980048[self_11980048_Idx].toRemove[chckIndx(i_14320862, 0, (self_11980048[self_11980048_Idx].toRemove != null ? self_11980048[self_11980048_Idx].toRemove.length : 0)+0-1)-0];
            F.line = 25;
            delete_11992632(self_11980048[self_11980048_Idx], "listeners", chckRange(find_11990415(self_11980048[self_11980048_Idx].listeners, to_remove_11990414), 0, 2147483647));
            F.line = 188;
            i_14320862 = addInt(i_14320862, 1);
            if (!(((self_11980048[self_11980048_Idx].toRemove != null ? self_11980048[self_11980048_Idx].toRemove.length : 0) == l_14320863))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 26;
    self_11980048[self_11980048_Idx].toRemove = nimCopy(null, [], NTI11995629);
    L4: do {
      F.line = 28;
      var to_add_11995642 = null;
      F.line = 184;
      var i_14320866 = 0;
      F.line = 185;
      var l_14320867 = (self_11980048[self_11980048_Idx].toAdd != null ? self_11980048[self_11980048_Idx].toAdd.length : 0);
      L5: do {
        F.line = 186;
          L6: while (true) {
          if (!(i_14320866 < l_14320867)) break L6;
            F.line = 28;
            to_add_11995642 = self_11980048[self_11980048_Idx].toAdd[chckIndx(i_14320866, 0, (self_11980048[self_11980048_Idx].toAdd != null ? self_11980048[self_11980048_Idx].toAdd.length : 0)+0-1)-0];
            F.line = 29;
            if (self_11980048[self_11980048_Idx].listeners != null) { self_11980048[self_11980048_Idx].listeners.push(to_add_11995642); } else { self_11980048[self_11980048_Idx].listeners = [to_add_11995642]; };
            F.line = 188;
            i_14320866 = addInt(i_14320866, 1);
            if (!(((self_11980048[self_11980048_Idx].toAdd != null ? self_11980048[self_11980048_Idx].toAdd.length : 0) == l_14320867))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 30;
    self_11980048[self_11980048_Idx].toAdd = nimCopy(null, [], NTI11995872);
    L7: do {
      F.line = 32;
      var listener_11995885 = null;
      F.line = 184;
      var i_14320870 = 0;
      F.line = 185;
      var l_14320871 = (self_11980048[self_11980048_Idx].listeners != null ? self_11980048[self_11980048_Idx].listeners.length : 0);
      L8: do {
        F.line = 186;
          L9: while (true) {
          if (!(i_14320870 < l_14320871)) break L9;
            F.line = 32;
            listener_11995885 = self_11980048[self_11980048_Idx].listeners[chckIndx(i_14320870, 0, (self_11980048[self_11980048_Idx].listeners != null ? self_11980048[self_11980048_Idx].listeners.length : 0)+0-1)-0];
            F.line = 33;
            listener_11995885(data_11980049);
            F.line = 188;
            i_14320870 = addInt(i_14320870, 1);
            if (!(((self_11980048[self_11980048_Idx].listeners != null ? self_11980048[self_11980048_Idx].listeners.length : 0) == l_14320871))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function emitpointer_moved_12046212(selfHEX60gensym12035006_12046214, argsHEX60gensym12035007_12046215) {
    var Tmp1;

  var F={procname:"element_events.emitpointerMoved",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
    if (has_key_11973094(event_tableHEX60gensym12035002_12040013[0], selfHEX60gensym12035006_12046214)) {
    F.line = 17;
    var eHEX60gensym12035008_12047661 = [(Tmp1 = HEX5BHEX5D_11974120(event_tableHEX60gensym12035002_12040013[0], selfHEX60gensym12035006_12046214), Tmp1)[0][Tmp1[1]]];
    F.line = 18;
    emit_11980043(eHEX60gensym12035008_12047661, 0, argsHEX60gensym12035007_12046215);
    }
    
  framePtr = F.prev;

  
}
function emitpointer_entered_11972633(selfHEX60gensym11830006_11972635, argsHEX60gensym11830007_11972636) {
    var Tmp1;

  var F={procname:"element_events.emitpointerEntered",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
    if (has_key_11973094(event_tableHEX60gensym11830002_11855829[0], selfHEX60gensym11830006_11972635)) {
    F.line = 17;
    var eHEX60gensym11830008_11980016 = [(Tmp1 = HEX5BHEX5D_11974120(event_tableHEX60gensym11830002_11855829[0], selfHEX60gensym11830006_11972635), Tmp1)[0][Tmp1[1]]];
    F.line = 18;
    emit_11980043(eHEX60gensym11830008_11980016, 0, argsHEX60gensym11830007_11972636);
    }
    
  framePtr = F.prev;

  
}
function emitpointer_exited_12031212(selfHEX60gensym12020006_12031214, argsHEX60gensym12020007_12031215) {
    var Tmp1;

  var F={procname:"element_events.emitpointerExited",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
    if (has_key_11973094(event_tableHEX60gensym12020002_12025013[0], selfHEX60gensym12020006_12031214)) {
    F.line = 17;
    var eHEX60gensym12020008_12032661 = [(Tmp1 = HEX5BHEX5D_11974120(event_tableHEX60gensym12020002_12025013[0], selfHEX60gensym12020006_12031214), Tmp1)[0][Tmp1[1]]];
    F.line = 18;
    emit_11980043(eHEX60gensym12020008_12032661, 0, argsHEX60gensym12020007_12031215);
    }
    
  framePtr = F.prev;

  
}
function dispatch_pointer_move_12126113(self_12126115, arg_12126116) {
      var Tmp1;
      var Tmp5;
      var Tmp6;
      var Tmp7;

  var F={procname:"element_events.dispatchPointerMove",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
  BeforeRet: do {
      if (arg_12126116.handled) Tmp1 = true; else {        Tmp1 = HEX3DHEX3D_12122704(self_12126115.props.visibility, to_option_12123028(1));      }    if (Tmp1) {
    F.line = 103;
    break BeforeRet;
    }
    
    L2: do {
      F.line = 104;
      var child_12128114 = null;
      F.line = 36;
      var i_14320789 = subInt((self_12126115.children != null ? self_12126115.children.length : 0), 1);
      L3: do {
        F.line = 37;
          L4: while (true) {
          if (!(-1 < i_14320789)) break L4;
            F.line = 104;
            child_12128114 = self_12126115.children[chckIndx(i_14320789, 0, (self_12126115.children != null ? self_12126115.children.length : 0)+0-1)-0];
            F.line = 105;
            dispatch_pointer_move_12126113(child_12128114, arg_12126116);
            if (arg_12126116.handled) {
            F.line = 107;
            break BeforeRet;
            }
            
            F.line = 39;
            i_14320789 = subInt(i_14320789, 1);
          }
      } while(false);
    } while(false);
    F.line = 109;
    var new_arg_12128115 = with_elem_12120688(arg_12126116, self_12126115);
      if (!!(pointer_captured_by_someone_else_12115459(self_12126115))) Tmp6 = false; else {        Tmp6 = is_point_inside_11185125(self_12126115, arg_12126116.pos);      }      if (Tmp6) Tmp5 = true; else {        Tmp5 = pointer_captured_12093999(self_12126115);      }    if (Tmp5) {
    if (self_12126115.pointerInsideLastUpdate) {
    F.line = 112;
    emitpointer_moved_12046212(self_12126115, new_arg_12128115);
    }
    else {
      F.line = 114;
      self_12126115.pointerInsideLastUpdate = true;
      F.line = 115;
      emitpointer_entered_11972633(self_12126115, new_arg_12128115);
    }
    
    }
    else {
      if (!self_12126115.pointerInsideLastUpdate) Tmp7 = false; else {        Tmp7 = !(pointer_captured_12093999(self_12126115));      }    if (Tmp7) {
    F.line = 117;
    self_12126115.pointerInsideLastUpdate = false;
    F.line = 118;
    emitpointer_exited_12031212(self_12126115, new_arg_12128115);
    }
    }
  } while (false);
  framePtr = F.prev;

  
}
function pointer_args_12120626(element_12120628, pos_12120633) {
  var result_12120634 = null;

  var F={procname:"element_events.pointerArgs",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
    F.line = 69;
    result_12120634 = {sender: element_12120628, pos: pos_12120633, handled: false};
  framePtr = F.prev;

  return result_12120634;

}
function scale_mouse_pos_14320084(ctx_14320086, pos_14320091) {
  var result_14320096 = null;

  var F={procname:"main.scaleMousePos",prev:framePtr,filename:"main.nim",line:0};
  framePtr = F;
    F.line = 34;
    result_14320096 = vec2_9863092((pos_14320091.x / ctx_14320086.scale.x), (pos_14320091.y / ctx_14320086.scale.y));
  framePtr = F.prev;

  return result_14320096;

}
function emitpointer_pressed_12076212(selfHEX60gensym12065006_12076214, argsHEX60gensym12065007_12076215) {
    var Tmp1;

  var F={procname:"element_events.emitpointerPressed",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
    if (has_key_11973094(event_tableHEX60gensym12065002_12070013[0], selfHEX60gensym12065006_12076214)) {
    F.line = 17;
    var eHEX60gensym12065008_12077661 = [(Tmp1 = HEX5BHEX5D_11974120(event_tableHEX60gensym12065002_12070013[0], selfHEX60gensym12065006_12076214), Tmp1)[0][Tmp1[1]]];
    F.line = 18;
    emit_11980043(eHEX60gensym12065008_12077661, 0, argsHEX60gensym12065007_12076215);
    }
    
  framePtr = F.prev;

  
}
function dispatch_pointer_down_12120706(self_12120708, arg_12120709) {
      var Tmp1;
      var Tmp5;
      var Tmp6;

  var F={procname:"element_events.dispatchPointerDown",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
  BeforeRet: do {
      if (arg_12120709.handled) Tmp1 = true; else {        Tmp1 = HEX3DHEX3D_12122704(self_12120708.props.visibility, to_option_12123028(1));      }    if (Tmp1) {
    F.line = 79;
    break BeforeRet;
    }
    
    L2: do {
      F.line = 80;
      var child_12123676 = null;
      F.line = 36;
      var i_14320888 = subInt((self_12120708.children != null ? self_12120708.children.length : 0), 1);
      L3: do {
        F.line = 37;
          L4: while (true) {
          if (!(-1 < i_14320888)) break L4;
            F.line = 80;
            child_12123676 = self_12120708.children[chckIndx(i_14320888, 0, (self_12120708.children != null ? self_12120708.children.length : 0)+0-1)-0];
            F.line = 81;
            dispatch_pointer_down_12120706(child_12123676, arg_12120709);
            if (arg_12120709.handled) {
            F.line = 83;
            break BeforeRet;
            }
            
            F.line = 39;
            i_14320888 = subInt(i_14320888, 1);
          }
      } while(false);
    } while(false);
    if (arg_12120709.handled) {
    F.line = 86;
    rawEcho(makeNimstrLit("ARG WAS HANDLED"));
    }
    
      if (!!(arg_12120709.handled)) Tmp6 = false; else {        Tmp6 = !(pointer_captured_by_someone_else_12115459(self_12120708));      }      if (!Tmp6) Tmp5 = false; else {        Tmp5 = is_point_inside_11185125(self_12120708, arg_12120709.pos);      }    if (Tmp5) {
    F.line = 88;
    emitpointer_pressed_12076212(self_12120708, with_elem_12120688(arg_12120709, self_12120708));
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function emitpointer_released_12091212(selfHEX60gensym12080006_12091214, argsHEX60gensym12080007_12091215) {
    var Tmp1;

  var F={procname:"element_events.emitpointerReleased",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
    if (has_key_11973094(event_tableHEX60gensym12080002_12085013[0], selfHEX60gensym12080006_12091214)) {
    F.line = 17;
    var eHEX60gensym12080008_12092661 = [(Tmp1 = HEX5BHEX5D_11974120(event_tableHEX60gensym12080002_12085013[0], selfHEX60gensym12080006_12091214), Tmp1)[0][Tmp1[1]]];
    F.line = 18;
    emit_11980043(eHEX60gensym12080008_12092661, 0, argsHEX60gensym12080007_12091215);
    }
    
  framePtr = F.prev;

  
}
function dispatch_pointer_up_12124065(self_12124067, arg_12124068) {
      var Tmp1;
      var Tmp5;
        var Tmp6;

  var F={procname:"element_events.dispatchPointerUp",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
  BeforeRet: do {
      if (arg_12124068.handled) Tmp1 = true; else {        Tmp1 = HEX3DHEX3D_12122704(self_12124067.props.visibility, to_option_12123028(1));      }    if (Tmp1) {
    F.line = 92;
    break BeforeRet;
    }
    
    L2: do {
      F.line = 94;
      var child_12126066 = null;
      F.line = 36;
      var i_14320891 = subInt((self_12124067.children != null ? self_12124067.children.length : 0), 1);
      L3: do {
        F.line = 37;
          L4: while (true) {
          if (!(-1 < i_14320891)) break L4;
            F.line = 94;
            child_12126066 = self_12124067.children[chckIndx(i_14320891, 0, (self_12124067.children != null ? self_12124067.children.length : 0)+0-1)-0];
            F.line = 95;
            dispatch_pointer_up_12124065(child_12126066, arg_12124068);
            if (arg_12124068.handled) {
            F.line = 97;
            break BeforeRet;
            }
            
            F.line = 39;
            i_14320891 = subInt(i_14320891, 1);
          }
      } while(false);
    } while(false);
      if (!!(pointer_captured_by_someone_else_12115459(self_12124067))) Tmp5 = false; else {        if (is_point_inside_11185125(self_12124067, arg_12124068.pos)) Tmp6 = true; else {          Tmp6 = pointer_captured_12093999(self_12124067);        }        Tmp5 = Tmp6;      }    if (Tmp5) {
    F.line = 99;
    emitpointer_released_12091212(self_12124067, with_elem_12120688(arg_12124068, self_12124067));
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function rect_10475068(pos_10475072, size_10475074) {
  var result_10475076 = null;

  var F={procname:"rect.rect",prev:framePtr,filename:"rect.nim",line:0};
  framePtr = F;
    F.line = 15;
    result_10475076 = {pos: pos_10475072, size: size_10475074};
  framePtr = F.prev;

  return result_10475076;

}
function divide_14320630(self_14320634, other_14320636) {
  var result_14320638 = null;

  var F={procname:"divide.divide",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 73;
    result_14320638 = vec2_9863092((self_14320634.x / other_14320636.x), (self_14320634.y / other_14320636.y));
  framePtr = F.prev;

  return result_14320638;

}
function len_10920346(s_10920350) {
  var result_10920351 = 0;

  var F={procname:"len.len",prev:framePtr,filename:"sets.nim",line:0};
  framePtr = F;
    F.line = 378;
    result_10920351 = s_10920350.counter;
  framePtr = F.prev;

  return result_10920351;

}
function is_filled_10561418(hcode_10561420) {
  var result_10561421 = false;

  var F={procname:"sets.isFilled",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    F.line = 27;
    result_10561421 = !((hcode_10561420 == 0));
  framePtr = F.prev;

  return result_10561421;

}
function next_try_10565014(h_10565016, max_hash_10565017) {
  var result_10565018 = 0;

  var F={procname:"sets.nextTry",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    F.line = 30;
    result_10565018 = (addInt(h_10565016, 1) & max_hash_10565017);
  framePtr = F.prev;

  return result_10565018;

}
function raw_get_10850426(t_10850430, key_10850431, hc_10850432, hc_10850432_Idx) {
            var Tmp3;

  var result_10850433 = 0;

  var F={procname:"rawGet.rawGet",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 63;
    hc_10850432[hc_10850432_Idx] = hash_10280010(key_10850431);
    if ((hc_10850432[hc_10850432_Idx] == 0)) {
    F.line = 65;
    hc_10850432[hc_10850432_Idx] = 314159265;
    }
    
    if (((t_10850430.data != null ? t_10850430.data.length : 0) == 0)) {
    F.line = 47;
    result_10850433 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_10860169 = (hc_10850432[hc_10850432_Idx] & (t_10850430.data != null ? (t_10850430.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_10561418(t_10850430.data[chckIndx(h_10860169, 0, (t_10850430.data != null ? t_10850430.data.length : 0)+0-1)-0].Field0)) break L2;
            if (!(t_10850430.data[chckIndx(h_10860169, 0, (t_10850430.data != null ? t_10850430.data.length : 0)+0-1)-0].Field0 == hc_10850432[hc_10850432_Idx])) Tmp3 = false; else {              Tmp3 = (t_10850430.data[chckIndx(h_10860169, 0, (t_10850430.data != null ? t_10850430.data.length : 0)+0-1)-0].Field1 == key_10850431);            }          if (Tmp3) {
          F.line = 55;
          result_10850433 = h_10860169;
          break BeforeRet;
          }
          
          F.line = 56;
          h_10860169 = next_try_10565014(h_10860169, (t_10850430.data != null ? (t_10850430.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_10850433 = subInt(-1, h_10860169);
  } while (false);
  framePtr = F.prev;

  return result_10850433;

}
function is_empty_10561401(hcode_10561403) {
  var result_10561404 = false;

  var F={procname:"sets.isEmpty",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    F.line = 24;
    result_10561404 = (hcode_10561403 == 0);
  framePtr = F.prev;

  return result_10561404;

}
function excl_impl_10921605(s_10921610, key_10921611) {
                  var Tmp5;
                  var Tmp6;
                  var Tmp7;
                    var Tmp8;
                    var Tmp9;
          var Tmp10;

  var result_10921612 = false;

  var F={procname:"exclImpl.exclImpl",prev:framePtr,filename:"setimpl.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 77;
    var hc_10921613 = [0];
    F.line = 78;
    var i_10921622 = raw_get_10850426(s_10921610, key_10921611, hc_10921613, 0);
    F.line = 79;
    var msk_10921636 = (s_10921610.data != null ? (s_10921610.data.length-1) : -1);
    F.line = 80;
    result_10921612 = true;
    if ((0 <= i_10921622)) {
    F.line = 83;
    result_10921612 = false;
    F.line = 84;
    s_10921610.counter = subInt(s_10921610.counter, 1);
    L1: do {
      F.line = 85;
        L2: while (true) {
        if (!true) break L2;
          F.line = 86;
          var j_10921698 = i_10921622;
          F.line = 87;
          var r_10921699 = j_10921698;
          F.line = 88;
          s_10921610.data[chckIndx(i_10921622, 0, (s_10921610.data != null ? s_10921610.data.length : 0)+0-1)-0].Field0 = 0;
          F.line = 89;
          s_10921610.data[chckIndx(i_10921622, 0, (s_10921610.data != null ? s_10921610.data.length : 0)+0-1)-0].Field1 = null;
          L3: do {
            F.line = 90;
              L4: while (true) {
              if (!true) break L4;
                F.line = 91;
                i_10921622 = (addInt(i_10921622, 1) & msk_10921636);
                if (is_empty_10561401(s_10921610.data[chckIndx(i_10921622, 0, (s_10921610.data != null ? s_10921610.data.length : 0)+0-1)-0].Field0)) {
                F.line = 93;
                break BeforeRet;
                }
                
                F.line = 94;
                r_10921699 = (s_10921610.data[chckIndx(i_10921622, 0, (s_10921610.data != null ? s_10921610.data.length : 0)+0-1)-0].Field0 & msk_10921636);
                  if (!(r_10921699 <= i_10921622)) Tmp7 = false; else {                    Tmp7 = (j_10921698 < r_10921699);                  }                  if (Tmp7) Tmp6 = true; else {                    if (!(j_10921698 < r_10921699)) Tmp8 = false; else {                      Tmp8 = (i_10921622 < j_10921698);                    }                    Tmp6 = Tmp8;                  }                  if (Tmp6) Tmp5 = true; else {                    if (!(i_10921622 < j_10921698)) Tmp9 = false; else {                      Tmp9 = (r_10921699 <= i_10921622);                    }                    Tmp5 = Tmp9;                  }                if (!(Tmp5)) {
                F.line = 74;
                break L3;
                }
                
              }
          } while(false);
          F.line = 95;
          Tmp10 = s_10921610.data[chckIndx(i_10921622, 0, (s_10921610.data != null ? s_10921610.data.length : 0)+0-1)-0];
          s_10921610.data[chckIndx(i_10921622, 0, (s_10921610.data != null ? s_10921610.data.length : 0)+0-1)-0] = genericReset(s_10921610.data[chckIndx(i_10921622, 0, (s_10921610.data != null ? s_10921610.data.length : 0)+0-1)-0], NTI10711096);
          nimCopy(s_10921610.data[chckIndx(j_10921698, 0, (s_10921610.data != null ? s_10921610.data.length : 0)+0-1)-0], Tmp10, NTI10711096);
        }
    } while(false);
    }
    
  } while (false);
  framePtr = F.prev;

  return result_10921612;

}
function excl_10921549(s_10921554, key_10921555) {
  var F={procname:"excl.excl",prev:framePtr,filename:"sets.nim",line:0};
  framePtr = F;
    F.line = 287;
    excl_impl_10921605(s_10921554, key_10921555);
  framePtr = F.prev;

  
}
function pop_10920645(s_10920650) {
  var result_10920651 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"sets.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    L1: do {
      F.line = 341;
      var h_10920689 = 0;
      F.line = 66;
      var colontmp__14320896 = 0;
      F.line = 341;
      colontmp__14320896 = (s_10920650.data != null ? (s_10920650.data.length-1) : -1);
      F.line = 77;
      var res_14320897 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_14320897 <= colontmp__14320896)) break L3;
            F.line = 341;
            h_10920689 = res_14320897;
            if (is_filled_10561418(s_10920650.data[chckIndx(h_10920689, 0, (s_10920650.data != null ? s_10920650.data.length : 0)+0-1)-0].Field0)) {
            F.line = 343;
            result_10920651 = s_10920650.data[chckIndx(h_10920689, 0, (s_10920650.data != null ? s_10920650.data.length : 0)+0-1)-0].Field1;
            F.line = 344;
            excl_10921549(s_10920650, result_10920651);
            F.line = 345;
            break BeforeRet;
            }
            
            F.line = 80;
            res_14320897 = addInt(res_14320897, 1);
          }
      } while(false);
    } while(false);
    F.line = 346;
    raiseException({message: makeNimstrLit("set is empty"), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
  } while (false);
  framePtr = F.prev;

  return result_10920651;

}
function is_some_10471361(self_10471365) {
  var result_10471366 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_10471366 = self_10471365.has;
  framePtr = F.prev;

  return result_10471366;

}
function get_10471339(self_10471343, otherwise_10471344) {
    var Tmp1;

  var result_10471345 = false;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 189;
    if (is_some_10471361(self_10471343)) {
    Tmp1 = self_10471343.val;
    }
    else {
    Tmp1 = otherwise_10471344;
    }
    
    result_10471345 = Tmp1;
  framePtr = F.prev;

  return result_10471345;

}
function some_11000092(val_11000095) {
  var result_11000097 = ({val: false, has: false});

  var F={procname:"some.some",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 121;
    result_11000097.has = true;
    F.line = 122;
    result_11000097.val = val_11000095;
  framePtr = F.prev;

  return result_11000097;

}
function none_11000215() {
  var result_11000233 = ({val: false, has: false});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  framePtr = F.prev;

  return result_11000233;

}
function map_11000060(self_11000065, callback_11000068) {
    var Tmp1;

  var result_11000070 = ({val: false, has: false});

  var F={procname:"map.map",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 243;
    if (is_some_10907193(self_11000065)) {
    Tmp1 = some_11000092(callback_11000068(self_11000065.val));
    }
    else {
    Tmp1 = none_11000215();
    }
    
    nimCopy(result_11000070, Tmp1, NTI9995037);
  framePtr = F.prev;

  return result_11000070;

}
function some_11000282(val_11000285) {
  var result_11000287 = ({val: null, has: false});

  var F={procname:"some.some",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    if (!(!((val_11000285 == null)))) {
    F.line = 118;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/options.nim(118, 11) `not val.isNil` "));
    }
    
    F.line = 119;
    result_11000287.val = val_11000285;
  framePtr = F.prev;

  return result_11000287;

}
function to_option_11000275(x_11000278) {
  var result_11000280 = ({val: null, has: false});

  var F={procname:"toOption.toOption",prev:framePtr,filename:"utils.nim",line:0};
  framePtr = F;
    F.line = 5;
    nimCopy(result_11000280, some_11000282(x_11000278), NTI10270035);
  framePtr = F.prev;

  return result_11000280;

}
function contains_10905995(s_10905999, key_10906000) {
  var result_10906001 = false;

  var F={procname:"contains.contains",prev:framePtr,filename:"sets.nim",line:0};
  framePtr = F;
    F.line = 171;
    var hc_10906002 = [0];
    F.line = 172;
    var index_10906028 = raw_get_10850426(s_10905999, key_10906000, hc_10906002, 0);
    F.line = 173;
    result_10906001 = (0 <= index_10906028);
  framePtr = F.prev;

  return result_10906001;

}
function imul_10090517(a_10090519, b_10090520) {
  var result_10090521 = 0;

  var F={procname:"hashes.imul",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
    F.line = 133;
    var mask_10090522 = 65535;
    F.line = 135;
    var a_hi_10090531 = (((a_10090519 >>> 0) >>> 16) & mask_10090522);
    F.line = 136;
    var a_lo_10090532 = (a_10090519 & mask_10090522);
    F.line = 137;
    var b_hi_10090541 = (((b_10090520 >>> 0) >>> 16) & mask_10090522);
    F.line = 138;
    var b_lo_10090542 = (b_10090520 & mask_10090522);
    F.line = 139;
    result_10090521 = ((((a_lo_10090532 * b_lo_10090542) >>> 0) + (((((a_hi_10090531 * b_lo_10090542) >>> 0) + ((a_lo_10090532 * b_hi_10090541) >>> 0)) >>> 0) << 16)) >>> 0);
  framePtr = F.prev;

  return result_10090521;

}
function rotl32_10090601(x_10090603, r_10090604) {
  var result_10090605 = 0;

  var F={procname:"hashes.rotl32",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_10090605 = ((x_10090603 << r_10090604) | ((x_10090603 >>> 0) >>> subInt(32, r_10090604)));
  framePtr = F.prev;

  return result_10090605;

}
function murmur_hash_10090629(x_10090632) {
  var result_10090633 = 0;

  var F={procname:"hashes.murmurHash",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 155;
    var size_10090643 = (x_10090632 != null ? x_10090632.length : 0);
    F.line = 156;
    var step_size_10090645 = 4;
    F.line = 157;
    var n_10090646 = divInt(size_10090643, step_size_10090645);
    F.line = 159;
    var h1_10090647 = 0;
    F.line = 160;
    var i_10090649 = 0;
    L1: do {
      F.line = 163;
        L2: while (true) {
        if (!(i_10090649 < mulInt(n_10090646, step_size_10090645))) break L2;
          F.line = 164;
          var k1_10090650 = 0;
          F.line = 166;
          var j_10090651 = step_size_10090645;
          L3: do {
            F.line = 167;
              L4: while (true) {
              if (!(0 < j_10090651)) break L4;
                F.line = 168;
                j_10090651 = subInt(j_10090651, 1);
                F.line = 169;
                k1_10090650 = ((k1_10090650 << 8) | x_10090632[chckIndx(addInt(i_10090649, j_10090651), 0, (x_10090632 != null ? x_10090632.length : 0)+0-1)-0]);
              }
          } while(false);
          F.line = 172;
          i_10090649 = addInt(i_10090649, step_size_10090645);
          F.line = 174;
          k1_10090650 = imul_10090517(k1_10090650, 3432918353);
          F.line = 175;
          k1_10090650 = rotl32_10090601(k1_10090650, 15);
          F.line = 176;
          k1_10090650 = imul_10090517(k1_10090650, 461845907);
          F.line = 178;
          h1_10090647 = (h1_10090647 ^ k1_10090650);
          F.line = 179;
          h1_10090647 = rotl32_10090601(h1_10090647, 13);
          F.line = 180;
          h1_10090647 = ((((h1_10090647 * 5) >>> 0) + 3864292196) >>> 0);
        }
    } while(false);
    F.line = 183;
    var k1_10095207 = 0;
    F.line = 184;
    var rem_10095208 = modInt(size_10090643, step_size_10090645);
    L5: do {
      F.line = 185;
        L6: while (true) {
        if (!(0 < rem_10095208)) break L6;
          F.line = 186;
          rem_10095208 = subInt(rem_10095208, 1);
          F.line = 187;
          k1_10095207 = ((k1_10095207 << 8) | x_10090632[chckIndx(addInt(i_10090649, rem_10095208), 0, (x_10090632 != null ? x_10090632.length : 0)+0-1)-0]);
        }
    } while(false);
    F.line = 188;
    k1_10095207 = imul_10090517(k1_10095207, 3432918353);
    F.line = 189;
    k1_10095207 = rotl32_10090601(k1_10095207, 15);
    F.line = 190;
    k1_10095207 = imul_10090517(k1_10095207, 461845907);
    F.line = 191;
    h1_10090647 = (h1_10090647 ^ k1_10095207);
    F.line = 194;
    h1_10090647 = (h1_10090647 ^ size_10090643);
    F.line = 195;
    h1_10090647 = (h1_10090647 ^ ((h1_10090647 >>> 0) >>> 16));
    F.line = 196;
    h1_10090647 = imul_10090517(h1_10090647, 2246822507);
    F.line = 197;
    h1_10090647 = (h1_10090647 ^ ((h1_10090647 >>> 0) >>> 13));
    F.line = 198;
    h1_10090647 = imul_10090517(h1_10090647, 3266489909);
    F.line = 199;
    h1_10090647 = (h1_10090647 ^ ((h1_10090647 >>> 0) >>> 16));
    F.line = 200;
    result_10090633 = (h1_10090647|0);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_10090633;

}
function hash_10130214(x_10130216) {
  var result_10130217 = 0;

  var F={procname:"hashes.hash",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
    F.line = 229;
    result_10130217 = murmur_hash_10090629((x_10130216.slice(0, (x_10130216 != null ? (x_10130216.length-1) : -1)+1)));
  framePtr = F.prev;

  return result_10130217;

}
function raw_get_10770602(t_10770606, key_10770607, hc_10770608, hc_10770608_Idx) {
            var Tmp3;

  var result_10770609 = 0;

  var F={procname:"rawGet.rawGet",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 63;
    hc_10770608[hc_10770608_Idx] = hash_10130214(key_10770607);
    if ((hc_10770608[hc_10770608_Idx] == 0)) {
    F.line = 65;
    hc_10770608[hc_10770608_Idx] = 314159265;
    }
    
    if (((t_10770606.data != null ? t_10770606.data.length : 0) == 0)) {
    F.line = 47;
    result_10770609 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_10780169 = (hc_10770608[hc_10770608_Idx] & (t_10770606.data != null ? (t_10770606.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_10152018(t_10770606.data[chckIndx(h_10780169, 0, (t_10770606.data != null ? t_10770606.data.length : 0)+0-1)-0].Field0)) break L2;
            if (!(t_10770606.data[chckIndx(h_10780169, 0, (t_10770606.data != null ? t_10770606.data.length : 0)+0-1)-0].Field0 == hc_10770608[hc_10770608_Idx])) Tmp3 = false; else {              Tmp3 = eqStrings(t_10770606.data[chckIndx(h_10780169, 0, (t_10770606.data != null ? t_10770606.data.length : 0)+0-1)-0].Field1, key_10770607);            }          if (Tmp3) {
          F.line = 55;
          result_10770609 = h_10780169;
          break BeforeRet;
          }
          
          F.line = 56;
          h_10780169 = next_try_10155014(h_10780169, (t_10770606.data != null ? (t_10770606.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_10770609 = subInt(-1, h_10780169);
  } while (false);
  framePtr = F.prev;

  return result_10770609;

}
function must_rehash_10805601(t_10805604) {
  var result_10805605 = false;

  var F={procname:"mustRehash.mustRehash",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    if (!((t_10805604.counter < (t_10805604.data != null ? t_10805604.data.length : 0)))) {
    F.line = 33;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/hashcommon.nim(33, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 34;
    result_10805605 = ((mulInt((t_10805604.data != null ? t_10805604.data.length : 0), 2) < mulInt(t_10805604.counter, 3)) || (subInt((t_10805604.data != null ? t_10805604.data.length : 0), t_10805604.counter) < 4));
  framePtr = F.prev;

  return result_10805605;

}
function raw_insert_10831136(t_10831142, data_10831145, data_10831145_Idx, key_10831146, val_10831147, hc_10831148, h_10831149) {
  var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"tableimpl.nim",line:0};
  framePtr = F;
    F.line = 22;
    data_10831145[data_10831145_Idx][chckIndx(h_10831149, 0, (data_10831145[data_10831145_Idx] != null ? data_10831145[data_10831145_Idx].length : 0)+0-1)-0].Field1 = nimCopy(null, key_10831146, NTI112);
    F.line = 23;
    nimCopy(data_10831145[data_10831145_Idx][chckIndx(h_10831149, 0, (data_10831145[data_10831145_Idx] != null ? data_10831145[data_10831145_Idx].length : 0)+0-1)-0].Field2, val_10831147, NTI10711090);
    F.line = 24;
    data_10831145[data_10831145_Idx][chckIndx(h_10831149, 0, (data_10831145[data_10831145_Idx] != null ? data_10831145[data_10831145_Idx].length : 0)+0-1)-0].Field0 = hc_10831148;
  framePtr = F.prev;

  
}
function enlarge_10830192(t_10830198) {
  var F={procname:"enlarge.enlarge",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 267;
    var n_10830206 = null;
    F.line = 268;
    n_10830206 = new Array(chckRange(mulInt((t_10830198.data != null ? t_10830198.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_10830198.data != null ? t_10830198.data.length : 0), 2), 0, 2147483647);++i) {n_10830206[i]={Field0: 0, Field1: null, Field2: ({data: null, counter: 0})};}    F.line = 269;
    var Tmp1 = t_10830198.data; t_10830198.data = n_10830206; n_10830206 = Tmp1;    L2: do {
      F.line = 270;
      var i_10830396 = 0;
      F.line = 39;
      var colontmp__14320915 = 0;
      F.line = 270;
      colontmp__14320915 = (n_10830206 != null ? (n_10830206.length-1) : -1);
      F.line = 56;
      var res_14320920 = 0;
      L3: do {
        F.line = 57;
          L4: while (true) {
          if (!(res_14320920 <= colontmp__14320915)) break L4;
            F.line = 270;
            i_10830396 = res_14320920;
            F.line = 271;
            var eh_10830559 = n_10830206[chckIndx(i_10830396, 0, (n_10830206 != null ? n_10830206.length : 0)+0-1)-0].Field0;
            if (is_filled_10152018(eh_10830559)) {
            F.line = 273;
            var j_10830566 = (eh_10830559 & (t_10830198.data != null ? (t_10830198.data.length-1) : -1));
            L5: do {
              F.line = 274;
                L6: while (true) {
                if (!is_filled_10152018(t_10830198.data[chckIndx(j_10830566, 0, (t_10830198.data != null ? t_10830198.data.length : 0)+0-1)-0].Field0)) break L6;
                  F.line = 275;
                  j_10830566 = next_try_10155014(j_10830566, (t_10830198.data != null ? (t_10830198.data.length-1) : -1));
                }
            } while(false);
            F.line = 277;
            raw_insert_10831136(t_10830198, t_10830198, "data", n_10830206[chckIndx(i_10830396, 0, (n_10830206 != null ? n_10830206.length : 0)+0-1)-0].Field1, n_10830206[chckIndx(i_10830396, 0, (n_10830206 != null ? n_10830206.length : 0)+0-1)-0].Field2, eh_10830559, j_10830566);
            }
            
            F.line = 59;
            res_14320920 = addInt(res_14320920, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function raw_get_known_hc_10831678(t_10831682, key_10831683, hc_10831684) {
  var result_10831685 = 0;

  var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((t_10831682.data != null ? t_10831682.data.length : 0) == 0)) {
    F.line = 47;
    result_10831685 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_10835169 = (hc_10831684 & (t_10831682.data != null ? (t_10831682.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_10152018(t_10831682.data[chckIndx(h_10835169, 0, (t_10831682.data != null ? t_10831682.data.length : 0)+0-1)-0].Field0)) break L2;
          if (((t_10831682.data[chckIndx(h_10835169, 0, (t_10831682.data != null ? t_10831682.data.length : 0)+0-1)-0].Field0 == hc_10831684) && eqStrings(t_10831682.data[chckIndx(h_10835169, 0, (t_10831682.data != null ? t_10831682.data.length : 0)+0-1)-0].Field1, key_10831683))) {
          F.line = 55;
          result_10831685 = h_10835169;
          break BeforeRet;
          }
          
          F.line = 56;
          h_10835169 = next_try_10155014(h_10835169, (t_10831682.data != null ? (t_10831682.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_10831685 = subInt(-1, h_10835169);
  } while (false);
  framePtr = F.prev;

  return result_10831685;

}
function mget_or_put_10745488(t_10745494, key_10745495, val_10745496) {
  var result_10745498 = null;

  var F={procname:"mgetOrPut.mgetOrPut",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (((t_10745494.data != null ? t_10745494.data.length : 0) == 0)) {
    if (!(is_power_of_two_8720029(64))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(defaultInitialSize)` "));
    }
    
    F.line = 167;
    t_10745494.counter = 0;
    F.line = 168;
    t_10745494.data = new Array(64); for (var i=0;i<64;++i) {t_10745494.data[i]={Field0: 0, Field1: null, Field2: ({data: null, counter: 0})};}    }
    
    F.line = 64;
    var hc_10770601 = [0];
    F.line = 65;
    var index_10780693 = raw_get_10770602(t_10745494, key_10745495, hc_10770601, 0);
    if ((index_10780693 < 0)) {
    if (((t_10745494.data != null ? t_10745494.data.length : 0) == 0)) {
    if (!(is_power_of_two_8720029(64))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(defaultInitialSize)` "));
    }
    
    F.line = 167;
    t_10745494.counter = 0;
    F.line = 168;
    t_10745494.data = new Array(64); for (var i=0;i<64;++i) {t_10745494.data[i]={Field0: 0, Field1: null, Field2: ({data: null, counter: 0})};}    }
    
    if (must_rehash_10805601(t_10745494)) {
    F.line = 49;
    enlarge_10830192(t_10745494);
    F.line = 50;
    index_10780693 = raw_get_known_hc_10831678(t_10745494, key_10745495, hc_10770601[0]);
    }
    
    F.line = 51;
    index_10780693 = subInt(-1, index_10780693);
    F.line = 52;
    raw_insert_10831136(t_10745494, t_10745494, "data", key_10745495, val_10745496, hc_10770601[0], index_10780693);
    F.line = 68;
    t_10745494.counter = addInt(t_10745494.counter, 1);
    }
    
    F.line = 70;
    result_10745498 = t_10745494.data[chckIndx(index_10780693, 0, (t_10745494.data != null ? t_10745494.data.length : 0)+0-1)-0].Field2;
  framePtr = F.prev;

  return result_10745498;

}
function tag_set_10730658(tag_10730660) {
  var result_10730666 = null;

  var F={procname:"tag.tagSet",prev:framePtr,filename:"tag.nim",line:0};
  framePtr = F;
    F.line = 11;
    result_10730666 = mget_or_put_10745488(tags_10730629[0], tag_10730660, init_hash_set_10730706(64));
  framePtr = F.prev;

  return result_10730666;

}
function has_tag_10905843(element_10905845, tag_10905846) {
  var result_10905847 = false;

  var F={procname:"tag.hasTag",prev:framePtr,filename:"tag.nim",line:0};
  framePtr = F;
    F.line = 17;
    result_10905847 = contains_10905995(tag_set_10730658(tag_10905846), element_10905845);
  framePtr = F.prev;

  return result_10905847;

}
function is_root_10907030(self_10907032) {
  var result_10990073 = false;

  var F={procname:"element.isRoot",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 141;
    result_10990073 = has_tag_10905843(self_10907032, makeNimstrLit("root"));
  framePtr = F.prev;

  return result_10990073;

}
function get_root_10990087(self_10990089) {
          var Tmp3;

  var result_10990090 = null;

  var F={procname:"element.getRoot",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (is_root_10907030(self_10990089)) {
    F.line = 145;
    result_10990090 = self_10990089;
    break BeforeRet;
    }
    
    F.line = 146;
    result_10990090 = self_10990089;
    L1: do {
      F.line = 147;
        L2: while (true) {
        if (!is_some_10907193(result_10990090.parent)) break L2;
          F.line = 148;
          result_10990090 = (Tmp3 = get_10990156(result_10990090.parent), Tmp3)[0][Tmp3[1]];
        }
    } while(false);
  } while (false);
  framePtr = F.prev;

  return result_10990090;

}
function is_rooted_10907027(self_10907029) {
    function HEX3Aanonymous_11000001(x_11000025) {
      var result_11000029 = false;

      var F={procname:"isRooted.:anonymous",prev:framePtr,filename:"element.nim",line:0};
      framePtr = F;
        F.line = 151;
        result_11000029 = has_tag_10905843(x_11000025, makeNimstrLit("root"));
      framePtr = F.prev;

      return result_11000029;

    }

  var result_10995045 = false;

  var F={procname:"element.isRooted",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 151;
    result_10995045 = get_10471339(map_11000060(to_option_11000275(get_root_10990087(self_10907029)), HEX3Aanonymous_11000001), false);
  framePtr = F.prev;

  return result_10995045;

}
function get_10907494(self_10907498) {
  var result_10907499 = null;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 171;
    if (is_none_10907515(self_10907498)) {
    F.line = 185;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI920204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    result_10907499 = self_10907498.val;
  framePtr = F.prev;

  return result_10907499;

}
function is_none_10910304(self_10910308) {
  var result_10910309 = false;

  var F={procname:"isNone.isNone",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 158;
    result_10910309 = (self_10910308.val == null);
  framePtr = F.prev;

  return result_10910309;

}
function HEX3DHEX3D_11158388(self_11158392, other_11158394) {
    var Tmp1;

  var result_11158395 = false;

  var F={procname:"==.==",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 122;
    if (!(self_11158392.x == other_11158394.x)) Tmp1 = false; else {      Tmp1 = (self_11158392.y == other_11158394.y);    }    result_11158395 = Tmp1;
  framePtr = F.prev;

  return result_11158395;

}
function get_10910281(self_10910286) {
  var result_10910288 = null;
  var result_10910288_Idx = 0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (is_none_10910304(self_10910286)) {
    F.line = 215;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI920204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    F.line = 216;
    result_10910288 = self_10910286; result_10910288_Idx = "val";
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return [result_10910288, result_10910288_Idx];

}
function get_11159512(self_11159516, otherwise_11159517) {
    var Tmp1;

  var result_11159518 = 0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 189;
    if (is_some_11159534(self_11159516)) {
    Tmp1 = self_11159516.val;
    }
    else {
    Tmp1 = otherwise_11159517;
    }
    
    result_11159518 = Tmp1;
  framePtr = F.prev;

  return result_11159518;

}
function is_some_11137572(self_11137576) {
  var result_11137577 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_11137577 = self_11137576.has;
  framePtr = F.prev;

  return result_11137577;

}
function get_11137550(self_11137554, otherwise_11137555) {
    var Tmp1;

  var result_11137556 = {Field0: 0.0, Field1: 0.0, Field2: 0.0, Field3: 0.0};

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 189;
    if (is_some_11137572(self_11137554)) {
    Tmp1 = self_11137554.val;
    }
    else {
    Tmp1 = otherwise_11137555;
    }
    
    nimCopy(result_11137556, Tmp1, NTI9862046);
  framePtr = F.prev;

  return result_11137556;

}
function thickness_11137530(a_11137533) {
  var result_11137535 = {Field0: 0.0, Field1: 0.0, Field2: 0.0, Field3: 0.0};

  var F={procname:"thickness.thickness",prev:framePtr,filename:"thickness.nim",line:0};
  framePtr = F;
    F.line = 13;
    var colontmp__14320929 = a_11137533;
    F.line = 13;
    var colontmp__14320930 = a_11137533;
    F.line = 13;
    var colontmp__14320931 = a_11137533;
    F.line = 13;
    var colontmp__14320932 = a_11137533;
    F.line = 13;
    nimCopy(result_11137535, {Field0: colontmp__14320929, Field1: colontmp__14320930, Field2: colontmp__14320931, Field3: colontmp__14320932}, NTI9862046);
  framePtr = F.prev;

  return result_11137535;

}
function margin_11137477(p_11137479) {
  var result_11137484 = {Field0: 0.0, Field1: 0.0, Field2: 0.0, Field3: 0.0};

  var F={procname:"element.margin",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 276;
    nimCopy(result_11137484, get_11137550(p_11137479.props.margin, thickness_11137530(0.0)), NTI9862046);
  framePtr = F.prev;

  return result_11137484;

}
function get_10325316(self_10325320, otherwise_10325321) {
    var Tmp1;

  var result_10325322 = 0.0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 189;
    if (is_some_10325338(self_10325320)) {
    Tmp1 = self_10325320.val;
    }
    else {
    Tmp1 = otherwise_10325321;
    }
    
    result_10325322 = Tmp1;
  framePtr = F.prev;

  return result_10325322;

}
function min_80014(x_80016, y_80017) {
    var Tmp1;
      var Tmp2;

  var result_80018 = 0.0;

      if ((x_80016 <= y_80017)) Tmp2 = true; else {        Tmp2 = !((y_80017 == y_80017));      }    if (Tmp2) {
    Tmp1 = x_80016;
    }
    else {
    Tmp1 = y_80017;
    }
    
    result_80018 = Tmp1;

  return result_80018;

}
function is_none_10960844(self_10960848) {
  var result_10960849 = false;

  var F={procname:"isNone.isNone",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 158;
    result_10960849 = !(self_10960848.has);
  framePtr = F.prev;

  return result_10960849;

}
function get_10960821(self_10960826) {
  var result_10960828 = null;
  var result_10960828_Idx = 0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (is_none_10960844(self_10960826)) {
    F.line = 215;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI920204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    F.line = 216;
    result_10960828 = self_10960826; result_10960828_Idx = "val";
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return [result_10960828, result_10960828_Idx];

}
function max_90014(x_90016, y_90017) {
    var Tmp1;
      var Tmp2;

  var result_90018 = 0.0;

      if ((y_90017 <= x_90016)) Tmp2 = true; else {        Tmp2 = !((y_90017 == y_90017));      }    if (Tmp2) {
    Tmp1 = x_90016;
    }
    else {
    Tmp1 = y_90017;
    }
    
    result_90018 = Tmp1;

  return result_90018;

}
function apply_layout_constraints_11045862(element_11045864, constraints_11045869) {
    var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_11045874 = null;

  var F={procname:"element.applyLayoutConstraints",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 228;
    F.line = 228;
    var element_width_11045926 = get_10325316(element_11045864.props.width, 0.0);
    F.line = 229;
    var element_height_11045978 = get_10325316(element_11045864.props.height, 0.0);
    F.line = 231;
    if ((0.0 < element_width_11045926)) {
    Tmp1 = element_width_11045926;
    }
    else {
    Tmp1 = constraints_11045869.x;
    }
    
    var width_11050059 = Tmp1;
    F.line = 233;
    if ((0.0 < element_height_11045978)) {
    Tmp2 = element_height_11045978;
    }
    else {
    Tmp2 = constraints_11045869.y;
    }
    
    var height_11055059 = Tmp2;
    if (is_some_10325338(element_11045864.props.maxWidth)) {
    F.line = 237;
    width_11050059 = min_80014(width_11050059, (Tmp3 = get_10960821(element_11045864.props.maxWidth), Tmp3)[0][Tmp3[1]]);
    }
    
    if (is_some_10325338(element_11045864.props.minWidth)) {
    F.line = 239;
    width_11050059 = max_90014(width_11050059, (Tmp4 = get_10960821(element_11045864.props.minWidth), Tmp4)[0][Tmp4[1]]);
    }
    
    if (is_some_10325338(element_11045864.props.maxHeight)) {
    F.line = 241;
    height_11055059 = min_80014(height_11055059, get_10325316(element_11045864.props.maxHeight, 0.0));
    }
    
    if (is_some_10325338(element_11045864.props.maxHeight)) {
    F.line = 243;
    height_11055059 = max_90014(height_11055059, get_10325316(element_11045864.props.minHeight, 0.0));
    }
    
    result_11045874 = vec2_9863092(width_11050059, height_11055059);
  framePtr = F.prev;

  return result_11045874;

}
function left_11145383(self_11145387) {
  var result_11145388 = 0.0;

  var F={procname:"left.left",prev:framePtr,filename:"thickness.nim",line:0};
  framePtr = F;
    F.line = 19;
    result_11145388 = self_11145387["Field0"];
  framePtr = F.prev;

  return result_11145388;

}
function right_11146503(self_11146507) {
  var result_11146508 = 0.0;

  var F={procname:"right.right",prev:framePtr,filename:"thickness.nim",line:0};
  framePtr = F;
    F.line = 25;
    result_11146508 = self_11146507["Field2"];
  framePtr = F.prev;

  return result_11146508;

}
function top_11145891(self_11145895) {
  var result_11145896 = 0.0;

  var F={procname:"top.top",prev:framePtr,filename:"thickness.nim",line:0};
  framePtr = F;
    F.line = 22;
    result_11145896 = self_11145895["Field1"];
  framePtr = F.prev;

  return result_11145896;

}
function bottom_11147131(self_11147135) {
  var result_11147136 = 0.0;

  var F={procname:"bottom.bottom",prev:framePtr,filename:"thickness.nim",line:0};
  framePtr = F;
    F.line = 28;
    result_11147136 = self_11147135["Field3"];
  framePtr = F.prev;

  return result_11147136;

}
function deflate_11159917(self_11159921, thickness_11159923) {
  var result_11159925 = null;

  var F={procname:"deflate.deflate",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 116;
    result_11159925 = vec2_9863092(((self_11159921.x - left_11145383(thickness_11159923)) - right_11146503(thickness_11159923)), ((self_11159921.y - top_11145891(thickness_11159923)) - bottom_11147131(thickness_11159923)));
  framePtr = F.prev;

  return result_11159925;

}
function is_some_10980125(self_10980129) {
  var result_10980130 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_10980130 = !((self_10980129.val == null));
  framePtr = F.prev;

  return result_10980130;

}
function none_11025726() {
  var result_11025743 = ({val: null});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  framePtr = F.prev;

  return result_11025743;

}
function filter_11140061(self_11140065, callback_11140068) {
    var Tmp1;

  var result_11140070 = ({val: null});

  var F={procname:"filter.filter",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 312;
    if ((is_some_10980125(self_11140065) && !(callback_11140068(self_11140065.val)))) {
    Tmp1 = none_11025726();
    }
    else {
    Tmp1 = self_11140065;
    }
    
    nimCopy(result_11140070, Tmp1, NTI11025732);
  framePtr = F.prev;

  return result_11140070;

}
function is_none_11140232(self_11140236) {
  var result_11140237 = false;

  var F={procname:"isNone.isNone",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 158;
    result_11140237 = (self_11140236.val == null);
  framePtr = F.prev;

  return result_11140237;

}
function get_11140209(self_11140214) {
  var result_11140216 = null;
  var result_11140216_Idx = 0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (is_none_11140232(self_11140214)) {
    F.line = 215;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI920204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    F.line = 216;
    result_11140216 = self_11140214; result_11140216_Idx = "val";
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return [result_11140216, result_11140216_Idx];

}
function measure_override_11159441(self_11159443, available_size_11159448) {
      function HEX3Aanonymous_11180001(x_11180008) {
        var result_11180012 = false;

        var F={procname:"measureOverride.:anonymous",prev:framePtr,filename:"element.nim",line:0};
        framePtr = F;
          F.line = 424;
          result_11180012 = !((x_11180008.measure == null));
        framePtr = F.prev;

        return result_11180012;

      }
    var Tmp1;
              var Tmp5;
              var Tmp6;

  var result_11176075 = null;

  var F={procname:"element.measureOverride",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (is_some_10980125(filter_11140061(self_11159443.layout, HEX3Aanonymous_11180001))) {
    F.line = 425;
    result_11176075 = (Tmp1 = get_11140209(self_11159443.layout), Tmp1)[0][Tmp1[1]].measure(self_11159443, available_size_11159448);
    break BeforeRet;
    }
    else {
      F.line = 427;
      var width_11180131 = 0.0;
      F.line = 428;
      var height_11180132 = 0.0;
      L2: do {
        F.line = 430;
        var child_11180148 = null;
        F.line = 184;
        var i_14320936 = 0;
        F.line = 185;
        var l_14320937 = (self_11159443.children != null ? self_11159443.children.length : 0);
        L3: do {
          F.line = 186;
            L4: while (true) {
            if (!(i_14320936 < l_14320937)) break L4;
              F.line = 430;
              child_11180148 = self_11159443.children[chckIndx(i_14320936, 0, (self_11159443.children != null ? self_11159443.children.length : 0)+0-1)-0];
              F.line = 431;
              measure_10907033(child_11180148, available_size_11159448);
              F.line = 432;
              width_11180131 = max_90014(width_11180131, (Tmp5 = get_10910281(child_11180148.desiredSize), Tmp5)[0][Tmp5[1]].x);
              F.line = 433;
              height_11180132 = max_90014(height_11180132, (Tmp6 = get_10910281(child_11180148.desiredSize), Tmp6)[0][Tmp6[1]].y);
              F.line = 188;
              i_14320936 = addInt(i_14320936, 1);
              if (!(((self_11159443.children != null ? self_11159443.children.length : 0) == l_14320937))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      F.line = 435;
      result_11176075 = vec2_9863092(width_11180131, height_11180132);
      break BeforeRet;
    }
    
  } while (false);
  framePtr = F.prev;

  return result_11176075;

}
function non_negative_11160960(self_11160964) {
  var result_11160966 = null;

  var F={procname:"nonNegative.nonNegative",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 125;
    result_11160966 = vec2_9863092(max_90014(self_11160964.x, 0.0), max_90014(self_11160964.y, 0.0));
  framePtr = F.prev;

  return result_11160966;

}
function inflate_11160736(self_11160740, thickness_11160742) {
  var result_11160744 = null;

  var F={procname:"inflate.inflate",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 110;
    result_11160744 = vec2_9863092(((self_11160740.x + left_11145383(thickness_11160742)) + right_11146503(thickness_11160742)), ((self_11160740.y + top_11145891(thickness_11160742)) + bottom_11147131(thickness_11160742)));
  framePtr = F.prev;

  return result_11160744;

}
function measure_core_11159453(self_11159455, available_size_11159460) {
    var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;
    var Tmp5;
    var Tmp6;

  var result_11159465 = null;

  var F={procname:"element.measureCore",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if ((get_11159512(self_11159455.props.visibility, 0) == 1)) {
    F.line = 366;
    result_11159465 = vec2_9863092(0.0, 0.0);
    break BeforeRet;
    }
    
    F.line = 368;
    var margin_11159865 = margin_11137477(self_11159455);
    F.line = 370;
    var constrained_11160169 = apply_layout_constraints_11045862(self_11159455, deflate_11159917(available_size_11159460, margin_11159865));
    F.line = 371;
    var measured_11160170 = measure_override_11159441(self_11159455, constrained_11160169);
    F.line = 373;
    var width_11160171 = measured_11160170.x;
    F.line = 374;
    var height_11160172 = measured_11160170.y;
    if (is_some_10325338(self_11159455.props.width)) {
    F.line = 377;
    width_11160171 = (Tmp1 = get_10960821(self_11159455.props.width), Tmp1)[0][Tmp1[1]];
    }
    
    if (is_some_10325338(self_11159455.props.maxWidth)) {
    F.line = 379;
    width_11160171 = min_80014(width_11160171, (Tmp2 = get_10960821(self_11159455.props.maxWidth), Tmp2)[0][Tmp2[1]]);
    }
    
    if (is_some_10325338(self_11159455.props.minWidth)) {
    F.line = 381;
    width_11160171 = max_90014(width_11160171, (Tmp3 = get_10960821(self_11159455.props.minWidth), Tmp3)[0][Tmp3[1]]);
    }
    
    if (is_some_10325338(self_11159455.props.height)) {
    F.line = 383;
    height_11160172 = (Tmp4 = get_10960821(self_11159455.props.height), Tmp4)[0][Tmp4[1]];
    }
    
    if (is_some_10325338(self_11159455.props.maxHeight)) {
    F.line = 385;
    height_11160172 = min_80014(height_11160172, (Tmp5 = get_10960821(self_11159455.props.maxHeight), Tmp5)[0][Tmp5[1]]);
    }
    
    if (is_some_10325338(self_11159455.props.minHeight)) {
    F.line = 387;
    height_11160172 = max_90014(height_11160172, (Tmp6 = get_10960821(self_11159455.props.minHeight), Tmp6)[0][Tmp6[1]]);
    }
    
    F.line = 389;
    result_11159465 = non_negative_11160960(inflate_11160736(vec2_9863092(width_11160171, height_11160172), margin_11159865));
  } while (false);
  framePtr = F.prev;

  return result_11159465;

}
function HEX3DHEX3D_11175386(a_11175389, b_11175390) {
  var result_11175391 = false;

  var F={procname:"==.==",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 337;
    result_11175391 = (((is_some_10910042(a_11175389) && is_some_10910042(b_11175390)) && HEX3DHEX3D_11158388(a_11175389.val, b_11175390.val)) || (!(is_some_10910042(a_11175389)) && !(is_some_10910042(b_11175390))));
  framePtr = F.prev;

  return result_11175391;

}
function to_option_11175930(x_11175933) {
  var result_11175935 = ({val: null});

  var F={procname:"toOption.toOption",prev:framePtr,filename:"utils.nim",line:0};
  framePtr = F;
    F.line = 5;
    nimCopy(result_11175935, some_10965088(x_11175933), NTI10270060);
  framePtr = F.prev;

  return result_11175935;

}
function must_rehash_10860699(t_10860702) {
  var result_10860703 = false;

  var F={procname:"mustRehash.mustRehash",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    if (!((t_10860702.counter < (t_10860702.data != null ? t_10860702.data.length : 0)))) {
    F.line = 33;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/hashcommon.nim(33, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 34;
    result_10860703 = ((mulInt((t_10860702.data != null ? t_10860702.data.length : 0), 2) < mulInt(t_10860702.counter, 3)) || (subInt((t_10860702.data != null ? t_10860702.data.length : 0), t_10860702.counter) < 4));
  framePtr = F.prev;

  return result_10860703;

}
function raw_get_known_hc_10885894(t_10885898, key_10885899, hc_10885900) {
  var result_10885901 = 0;

  var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((t_10885898.data != null ? t_10885898.data.length : 0) == 0)) {
    F.line = 47;
    result_10885901 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_10890169 = (hc_10885900 & (t_10885898.data != null ? (t_10885898.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_10561418(t_10885898.data[chckIndx(h_10890169, 0, (t_10885898.data != null ? t_10885898.data.length : 0)+0-1)-0].Field0)) break L2;
          if (((t_10885898.data[chckIndx(h_10890169, 0, (t_10885898.data != null ? t_10885898.data.length : 0)+0-1)-0].Field0 == hc_10885900) && (t_10885898.data[chckIndx(h_10890169, 0, (t_10885898.data != null ? t_10885898.data.length : 0)+0-1)-0].Field1 == key_10885899))) {
          F.line = 55;
          result_10885901 = h_10890169;
          break BeforeRet;
          }
          
          F.line = 56;
          h_10890169 = next_try_10565014(h_10890169, (t_10885898.data != null ? (t_10885898.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_10885901 = subInt(-1, h_10890169);
  } while (false);
  framePtr = F.prev;

  return result_10885901;

}
function raw_insert_10891022(s_10891027, data_10891030, data_10891030_Idx, key_10891031, hc_10891032, h_10891033) {
  var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"setimpl.nim",line:0};
  framePtr = F;
    if (((data_10891030[data_10891030_Idx] != null ? data_10891030[data_10891030_Idx].length : 0) == 0)) {
    if (!(is_power_of_two_8720029(64))) {
    F.line = 19;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/setimpl.nim(19, 10) `isPowerOfTwo(defaultInitialSize)` "));
    }
    
    F.line = 23;
    s_10891027.counter = 0;
    F.line = 28;
    s_10891027.data = new Array(64); for (var i=0;i<64;++i) {s_10891027.data[i]={Field0: 0, Field1: null};}    }
    
    F.line = 29;
    data_10891030[data_10891030_Idx][chckIndx(h_10891033, 0, (data_10891030[data_10891030_Idx] != null ? data_10891030[data_10891030_Idx].length : 0)+0-1)-0].Field1 = key_10891031;
    F.line = 30;
    data_10891030[data_10891030_Idx][chckIndx(h_10891033, 0, (data_10891030[data_10891030_Idx] != null ? data_10891030[data_10891030_Idx].length : 0)+0-1)-0].Field0 = hc_10891032;
  framePtr = F.prev;

  
}
function enlarge_10885207(s_10885212) {
  var F={procname:"enlarge.enlarge",prev:framePtr,filename:"setimpl.nim",line:0};
  framePtr = F;
    F.line = 37;
    var n_10885217 = null;
    F.line = 38;
    n_10885217 = new Array(chckRange(mulInt((s_10885212.data != null ? s_10885212.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((s_10885212.data != null ? s_10885212.data.length : 0), 2), 0, 2147483647);++i) {n_10885217[i]={Field0: 0, Field1: null};}    F.line = 39;
    var Tmp1 = s_10885212.data; s_10885212.data = n_10885217; n_10885217 = Tmp1;    L2: do {
      F.line = 40;
      var i_10885407 = 0;
      F.line = 39;
      var colontmp__14320942 = 0;
      F.line = 40;
      colontmp__14320942 = (n_10885217 != null ? (n_10885217.length-1) : -1);
      F.line = 56;
      var res_14320943 = 0;
      L3: do {
        F.line = 57;
          L4: while (true) {
          if (!(res_14320943 <= colontmp__14320942)) break L4;
            F.line = 40;
            i_10885407 = res_14320943;
            if (is_filled_10561418(n_10885217[chckIndx(i_10885407, 0, (n_10885217 != null ? n_10885217.length : 0)+0-1)-0].Field0)) {
            F.line = 42;
            var j_10890682 = subInt(-1, raw_get_known_hc_10885894(s_10885212, n_10885217[chckIndx(i_10885407, 0, (n_10885217 != null ? n_10885217.length : 0)+0-1)-0].Field1, n_10885217[chckIndx(i_10885407, 0, (n_10885217 != null ? n_10885217.length : 0)+0-1)-0].Field0));
            F.line = 43;
            raw_insert_10891022(s_10885212, s_10885212, "data", n_10885217[chckIndx(i_10885407, 0, (n_10885217 != null ? n_10885217.length : 0)+0-1)-0].Field1, n_10885217[chckIndx(i_10885407, 0, (n_10885217 != null ? n_10885217.length : 0)+0-1)-0].Field0, j_10890682);
            }
            
            F.line = 59;
            res_14320943 = addInt(res_14320943, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function incl_10835974(s_10835979, key_10835980) {
  var F={procname:"incl.incl",prev:framePtr,filename:"sets.nim",line:0};
  framePtr = F;
    if (((s_10835979.data != null ? s_10835979.data.length : 0) == 0)) {
    if (!(is_power_of_two_8720029(64))) {
    F.line = 19;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/setimpl.nim(19, 10) `isPowerOfTwo(defaultInitialSize)` "));
    }
    
    F.line = 23;
    s_10835979.counter = 0;
    F.line = 47;
    s_10835979.data = new Array(64); for (var i=0;i<64;++i) {s_10835979.data[i]={Field0: 0, Field1: null};}    }
    
    F.line = 48;
    var hc_10850408 = [0];
    F.line = 49;
    var index_10860698 = raw_get_10850426(s_10835979, key_10835980, hc_10850408, 0);
    if ((index_10860698 < 0)) {
    if (must_rehash_10860699(s_10835979)) {
    F.line = 52;
    enlarge_10885207(s_10835979);
    F.line = 53;
    index_10860698 = raw_get_known_hc_10885894(s_10835979, key_10835980, hc_10850408[0]);
    }
    
    F.line = 54;
    raw_insert_10891022(s_10835979, s_10835979, "data", key_10835980, hc_10850408[0], subInt(-1, index_10860698));
    F.line = 55;
    s_10835979.counter = addInt(s_10835979.counter, 1);
    }
    
  framePtr = F.prev;

  
}
function invalidate_arrange_10960452(self_10960454) {
  var F={procname:"element.invalidateArrange",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 85;
    self_10960454.isArrangeValid = false;
    F.line = 86;
    incl_10835974(instance_10907142.toArrange, self_10960454);
  framePtr = F.prev;

  
}
function invalidate_measure_10960574(self_10960576) {
  var F={procname:"element.invalidateMeasure",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 89;
    self_10960576.isMeasureValid = false;
    F.line = 90;
    incl_10835974(instance_10907142.toMeasure, self_10960576);
    F.line = 91;
    invalidate_arrange_10960452(self_10960576);
  framePtr = F.prev;

  
}
function child_desired_size_changed_11161033(self_11161035) {
  var F={procname:"element.childDesiredSizeChanged",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    if (!(self_11161035.measuring)) {
    F.line = 393;
    invalidate_measure_10960574(self_11161035);
    }
    
  framePtr = F.prev;

  
}
function measure_10907033(self_10907035, available_size_10907040) {
      var Tmp1;
      var Tmp2;
      var Tmp3;
        var Tmp4;
      var Tmp6;
    var Tmp7;

  var F={procname:"element.measure",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (!(is_rooted_10907027(self_10907035))) {
    F.line = 397;
    break BeforeRet;
    }
    
      if ((available_size_10907040.x == NaN)) Tmp1 = true; else {        Tmp1 = (available_size_10907040.y == NaN);      }    if (Tmp1) {
    F.line = 400;
    raiseException({message: makeNimstrLit("Cannot call Measure using a size with NaN values."), parent: null, m_type: NTI6217, name: null, trace: null, up: null}, "Exception");
    }
    
      if (!(self_10907035.isMeasureValid)) Tmp3 = true; else {        Tmp3 = is_none_10910304(self_10907035.previousMeasure);      }      if (Tmp3) Tmp2 = true; else {        Tmp2 = !(HEX3DHEX3D_11158388((Tmp4 = get_10910281(self_10907035.previousMeasure), Tmp4)[0][Tmp4[1]], available_size_10907040));      }    if (Tmp2) {
    F.line = 403;
    var previous_desired_size_11170451 = nimCopy(null, self_10907035.desiredSize, NTI10270060);
    F.line = 404;
    var desired_size_11170452 = zero_9863079();
    F.line = 406;
    self_10907035.isMeasureValid = true;
    F.line = 408;
    try {
    F.line = 409;
    self_10907035.measuring = true;
    F.line = 410;
    desired_size_11170452 = measure_core_11159453(self_10907035, available_size_10907040);
    } finally {
    framePtr = F;
    F.line = 412;
    self_10907035.measuring = false;
    }
    F.line = 417;
    nimCopy(self_10907035.desiredSize, some_10965088(desired_size_11170452), NTI10270060);
    F.line = 418;
    nimCopy(self_10907035.previousMeasure, some_10965088(available_size_10907040), NTI10270060);
      if (!!(HEX3DHEX3D_11175386(to_option_11175930(desired_size_11170452), previous_desired_size_11170451))) Tmp6 = false; else {        Tmp6 = is_some_10907193(self_10907035.parent);      }    if (Tmp6) {
    F.line = 421;
    child_desired_size_changed_11161033((Tmp7 = get_10990156(self_10907035.parent), Tmp7)[0][Tmp7[1]]);
    }
    
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function measure_10907157(self_10907159, elem_10907160, available_size_10907165) {
    var Tmp1;

  var F={procname:"element.measure",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (!(is_rooted_10907027(elem_10907160))) {
    F.line = 33;
    break BeforeRet;
    }
    
    F.line = 35;
    var parent_10907177 = nimCopy(null, elem_10907160.parent, NTI10270035);
    if (is_some_10907193(parent_10907177)) {
    F.line = 37;
    measure_10907157(self_10907159, get_10907494(parent_10907177), available_size_10907165);
    }
    
    if (!(elem_10907160.isMeasureValid)) {
    if (is_root_10907030(elem_10907160)) {
    F.line = 41;
    measure_10907033(elem_10907160, available_size_10907165);
    }
    else {
    if (is_some_10910042(elem_10907160.previousMeasure)) {
    F.line = 43;
    measure_10907033(elem_10907160, (Tmp1 = get_10910281(elem_10907160.previousMeasure), Tmp1)[0][Tmp1[1]]);
    }
    }
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function perform_outstanding_measure_10916924(self_10916926, available_size_10916931) {
  var F={procname:"element.performOutstandingMeasure",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 64;
        L2: while (true) {
        if (!(0 < len_10920346(self_10916926.toMeasure))) break L2;
          F.line = 65;
          var elem_10925016 = pop_10920645(self_10916926.toMeasure);
          F.line = 66;
          measure_10907157(self_10916926, elem_10925016, available_size_10916931);
        }
    } while(false);
  framePtr = F.prev;

  
}
function map_11159297(self_11159302, callback_11159305) {
    var Tmp1;

  var result_11159307 = ({val: false, has: false});

  var F={procname:"map.map",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 243;
    if (is_some_10325097(self_11159302)) {
    Tmp1 = some_11000092(callback_11159305(self_11159302.val));
    }
    else {
    Tmp1 = none_11000215();
    }
    
    nimCopy(result_11159307, Tmp1, NTI9995037);
  framePtr = F.prev;

  return result_11159307;

}
function HEX3DHEX3D_11158009(self_11158013, other_11158015) {
    var Tmp1;

  var result_11158016 = false;

  var F={procname:"==.==",prev:framePtr,filename:"rect.nim",line:0};
  framePtr = F;
    F.line = 124;
    if (!HEX3DHEX3D_11158388(other_11158015.size, self_11158013.size)) Tmp1 = false; else {      Tmp1 = HEX3DHEX3D_11158388(other_11158015.pos, self_11158013.pos);    }    result_11158016 = Tmp1;
  framePtr = F.prev;

  return result_11158016;

}
function x_9864321(self_9864326) {
  var result_9864328 = 0.0;

  var F={procname:"x.x",prev:framePtr,filename:"rect.nim",line:0};
  framePtr = F;
    F.line = 32;
    result_9864328 = self_9864326.pos.x;
  framePtr = F.prev;

  return result_9864328;

}
function y_9864544(self_9864549) {
  var result_9864551 = 0.0;

  var F={procname:"y.y",prev:framePtr,filename:"rect.nim",line:0};
  framePtr = F;
    F.line = 35;
    result_9864551 = self_9864549.pos.y;
  framePtr = F.prev;

  return result_9864551;

}
function width_9864437(self_9864441) {
  var result_9864442 = 0.0;

  var F={procname:"width.width",prev:framePtr,filename:"rect.nim",line:0};
  framePtr = F;
    F.line = 39;
    result_9864442 = self_9864441.size.x;
  framePtr = F.prev;

  return result_9864442;

}
function height_9864660(self_9864664) {
  var result_9864665 = 0.0;

  var F={procname:"height.height",prev:framePtr,filename:"rect.nim",line:0};
  framePtr = F;
    F.line = 42;
    result_9864665 = self_9864664.size.y;
  framePtr = F.prev;

  return result_9864665;

}
function is_some_11147646(self_11147650) {
  var result_11147651 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_11147651 = self_11147650.has;
  framePtr = F.prev;

  return result_11147651;

}
function get_11147624(self_11147628, otherwise_11147629) {
    var Tmp1;

  var result_11147630 = 0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 189;
    if (is_some_11147646(self_11147628)) {
    Tmp1 = self_11147628.val;
    }
    else {
    Tmp1 = otherwise_11147629;
    }
    
    result_11147630 = Tmp1;
  framePtr = F.prev;

  return result_11147630;

}
function is_some_11147911(self_11147915) {
  var result_11147916 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_11147916 = self_11147915.has;
  framePtr = F.prev;

  return result_11147916;

}
function get_11147889(self_11147893, otherwise_11147894) {
    var Tmp1;

  var result_11147895 = 0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 189;
    if (is_some_11147911(self_11147893)) {
    Tmp1 = self_11147893.val;
    }
    else {
    Tmp1 = otherwise_11147894;
    }
    
    result_11147895 = Tmp1;
  framePtr = F.prev;

  return result_11147895;

}
function with_x_11150542(self_11150547, x_11150548) {
  var result_11150550 = null;

  var F={procname:"withX.withX",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 33;
    result_11150550 = vec2_9863092(x_11150548, self_11150547.y);
  framePtr = F.prev;

  return result_11150550;

}
function with_y_11155542(self_11155547, y_11155548) {
  var result_11155550 = null;

  var F={procname:"withY.withY",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 36;
    result_11155550 = vec2_9863092(self_11155547.x, y_11155548);
  framePtr = F.prev;

  return result_11155550;

}
function constrain_11155579(self_11155583, constraint_11155585) {
  var result_11155587 = null;

  var F={procname:"constrain.constrain",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 129;
    result_11155587 = vec2_9863092(min_80014(self_11155583.x, constraint_11155585.x), min_80014(self_11155583.y, constraint_11155585.y));
  framePtr = F.prev;

  return result_11155587;

}
function max_11145136(self_11145140, other_11145142) {
  var result_11145144 = null;

  var F={procname:"max.max",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 93;
    result_11145144 = vec2_9863092(max_90014(other_11145142.x, self_11145140.x), max_90014(other_11145142.y, self_11145140.y));
  framePtr = F.prev;

  return result_11145144;

}
function arrange_override_11137640(self_11137642, final_size_11137647) {
    var Tmp1;
      function HEX3Aanonymous_11140001(x_11140008) {
        var result_11140012 = false;

        var F={procname:"arrangeOverride.:anonymous",prev:framePtr,filename:"element.nim",line:0};
        framePtr = F;
          F.line = 282;
          result_11140012 = !((x_11140008.arrange == null));
        framePtr = F.prev;

        return result_11140012;

      }
    var Tmp2;
              var Tmp6;

  var result_11137652 = null;

  var F={procname:"element.arrangeOverride",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 282;
    if (is_some_10980125(filter_11140061(self_11137642.layout, HEX3Aanonymous_11140001))) {
    Tmp1 = (Tmp2 = get_11140209(self_11137642.layout), Tmp2)[0][Tmp2[1]].arrange(self_11137642, final_size_11137647);
    }
    else {
      F.line = 285;
      var largest_child_11145029 = zero_9863079();
      L3: do {
        F.line = 286;
        var child_11145045 = null;
        F.line = 184;
        var i_14320952 = 0;
        F.line = 185;
        var l_14320953 = (self_11137642.children != null ? self_11137642.children.length : 0);
        L4: do {
          F.line = 186;
            L5: while (true) {
            if (!(i_14320952 < l_14320953)) break L5;
              F.line = 286;
              child_11145045 = self_11137642.children[chckIndx(i_14320952, 0, (self_11137642.children != null ? self_11137642.children.length : 0)+0-1)-0];
              if (is_some_10910042(child_11145045.desiredSize)) {
              F.line = 288;
              largest_child_11145029 = max_11145136(largest_child_11145029, (Tmp6 = get_10910281(child_11145045.desiredSize), Tmp6)[0][Tmp6[1]]);
              }
              
              F.line = 188;
              i_14320952 = addInt(i_14320952, 1);
              if (!(((self_11137642.children != null ? self_11137642.children.length : 0) == l_14320953))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      F.line = 290;
      var arrange_rect_11145242 = rect_10475068(zero_9863079(), max_11145136(final_size_11137647, largest_child_11145029));
      L7: do {
        F.line = 291;
        var child_11145258 = null;
        F.line = 184;
        var i_14320956 = 0;
        F.line = 185;
        var l_14320957 = (self_11137642.children != null ? self_11137642.children.length : 0);
        L8: do {
          F.line = 186;
            L9: while (true) {
            if (!(i_14320956 < l_14320957)) break L9;
              F.line = 291;
              child_11145258 = self_11137642.children[chckIndx(i_14320956, 0, (self_11137642.children != null ? self_11137642.children.length : 0)+0-1)-0];
              F.line = 292;
              arrange_10916371(child_11145258, arrange_rect_11145242);
              F.line = 188;
              i_14320956 = addInt(i_14320956, 1);
              if (!(((self_11137642.children != null ? self_11137642.children.length : 0) == l_14320957))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
    Tmp1 = arrange_rect_11145242.size;
    }
    
    result_11137652 = Tmp1;
  framePtr = F.prev;

  return result_11137652;

}
function HEX2BHEX3D_9620021(x_9620025, x_9620025_Idx, y_9620026) {
  var F={procname:"+=.+=",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2589;
    x_9620025[x_9620025_Idx] = (x_9620025[x_9620025_Idx] + y_9620026);
  framePtr = F.prev;

  
}
function some_10455028(val_10455031) {
  var result_10455033 = ({val: null});

  var F={procname:"some.some",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    if (!(!((val_10455031 == null)))) {
    F.line = 118;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/options.nim(118, 11) `not val.isNil` "));
    }
    
    F.line = 119;
    result_10455033.val = val_10455031;
  framePtr = F.prev;

  return result_10455033;

}
function to_option_11156251(x_11156254) {
  var result_11156256 = ({val: null});

  var F={procname:"toOption.toOption",prev:framePtr,filename:"utils.nim",line:0};
  framePtr = F;
    F.line = 5;
    nimCopy(result_11156256, some_10455028(x_11156254), NTI10270084);
  framePtr = F.prev;

  return result_11156256;

}
function raw_get_10625602(t_10625606, key_10625607, hc_10625608, hc_10625608_Idx) {
            var Tmp3;

  var result_10625609 = 0;

  var F={procname:"rawGet.rawGet",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 63;
    hc_10625608[hc_10625608_Idx] = hash_10280010(key_10625607);
    if ((hc_10625608[hc_10625608_Idx] == 0)) {
    F.line = 65;
    hc_10625608[hc_10625608_Idx] = 314159265;
    }
    
    if (((t_10625606.data != null ? t_10625606.data.length : 0) == 0)) {
    F.line = 47;
    result_10625609 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_10635138 = (hc_10625608[hc_10625608_Idx] & (t_10625606.data != null ? (t_10625606.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_10152018(t_10625606.data[chckIndx(h_10635138, 0, (t_10625606.data != null ? t_10625606.data.length : 0)+0-1)-0].Field0)) break L2;
            if (!(t_10625606.data[chckIndx(h_10635138, 0, (t_10625606.data != null ? t_10625606.data.length : 0)+0-1)-0].Field0 == hc_10625608[hc_10625608_Idx])) Tmp3 = false; else {              Tmp3 = (t_10625606.data[chckIndx(h_10635138, 0, (t_10625606.data != null ? t_10625606.data.length : 0)+0-1)-0].Field1 == key_10625607);            }          if (Tmp3) {
          F.line = 55;
          result_10625609 = h_10635138;
          break BeforeRet;
          }
          
          F.line = 56;
          h_10635138 = next_try_10155014(h_10635138, (t_10625606.data != null ? (t_10625606.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_10625609 = subInt(-1, h_10635138);
  } while (false);
  framePtr = F.prev;

  return result_10625609;

}
function has_key_10691194(t_10691199, key_10691200) {
  var result_10691201 = false;

  var F={procname:"hasKey.hasKey",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 395;
    var hc_10691202 = [0];
    F.line = 396;
    result_10691201 = (0 <= raw_get_10625602(t_10691199, key_10691200, hc_10691202, 0));
  framePtr = F.prev;

  return result_10691201;

}
function contains_10691184(t_10691189, key_10691190) {
  var result_10691191 = false;

  var F={procname:"contains.contains",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 406;
    result_10691191 = has_key_10691194(t_10691189, key_10691190);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_10691191;

}
function delete_10705397(x_10705402, x_10705402_Idx, i_10705403) {
  var F={procname:"delete.delete",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1254;
    x_10705402[x_10705402_Idx].splice(i_10705403, 1);
  framePtr = F.prev;

  
}
function find_10705215(a_10705219, item_10705220) {
  var result_10705221 = 0;

  var F={procname:"find.find",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    L1: do {
      F.line = 1751;
      var i_10705228 = null;
      F.line = 184;
      var i_14320983 = 0;
      F.line = 185;
      var l_14320984 = (a_10705219 != null ? a_10705219.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14320983 < l_14320984)) break L3;
            F.line = 1751;
            i_10705228 = a_10705219[chckIndx(i_14320983, 0, (a_10705219 != null ? a_10705219.length : 0)+0-1)-0];
            if ((i_10705228 == item_10705220)) {
            F.line = 1752;
            break BeforeRet;
            }
            
            F.line = 1753;
            result_10705221 = addInt(result_10705221, 1);
            F.line = 188;
            i_14320983 = addInt(i_14320983, 1);
            if (!(((a_10705219 != null ? a_10705219.length : 0) == l_14320984))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 1754;
    result_10705221 = -1;
  } while (false);
  framePtr = F.prev;

  return result_10705221;

}
function emit_10695095(self_10695100, self_10695100_Idx, data_10695101) {
  var F={procname:"emit.emit",prev:framePtr,filename:"events.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 24;
      var to_remove_10705214 = null;
      F.line = 184;
      var i_14320962 = 0;
      F.line = 185;
      var l_14320963 = (self_10695100[self_10695100_Idx].toRemove != null ? self_10695100[self_10695100_Idx].toRemove.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14320962 < l_14320963)) break L3;
            F.line = 24;
            to_remove_10705214 = self_10695100[self_10695100_Idx].toRemove[chckIndx(i_14320962, 0, (self_10695100[self_10695100_Idx].toRemove != null ? self_10695100[self_10695100_Idx].toRemove.length : 0)+0-1)-0];
            F.line = 25;
            delete_10705397(self_10695100[self_10695100_Idx], "listeners", chckRange(find_10705215(self_10695100[self_10695100_Idx].listeners, to_remove_10705214), 0, 2147483647));
            F.line = 188;
            i_14320962 = addInt(i_14320962, 1);
            if (!(((self_10695100[self_10695100_Idx].toRemove != null ? self_10695100[self_10695100_Idx].toRemove.length : 0) == l_14320963))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 26;
    self_10695100[self_10695100_Idx].toRemove = nimCopy(null, [], NTI10710429);
    L4: do {
      F.line = 28;
      var to_add_10710436 = null;
      F.line = 184;
      var i_14320966 = 0;
      F.line = 185;
      var l_14320967 = (self_10695100[self_10695100_Idx].toAdd != null ? self_10695100[self_10695100_Idx].toAdd.length : 0);
      L5: do {
        F.line = 186;
          L6: while (true) {
          if (!(i_14320966 < l_14320967)) break L6;
            F.line = 28;
            to_add_10710436 = self_10695100[self_10695100_Idx].toAdd[chckIndx(i_14320966, 0, (self_10695100[self_10695100_Idx].toAdd != null ? self_10695100[self_10695100_Idx].toAdd.length : 0)+0-1)-0];
            F.line = 29;
            if (self_10695100[self_10695100_Idx].listeners != null) { self_10695100[self_10695100_Idx].listeners.push(to_add_10710436); } else { self_10695100[self_10695100_Idx].listeners = [to_add_10710436]; };
            F.line = 188;
            i_14320966 = addInt(i_14320966, 1);
            if (!(((self_10695100[self_10695100_Idx].toAdd != null ? self_10695100[self_10695100_Idx].toAdd.length : 0) == l_14320967))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 30;
    self_10695100[self_10695100_Idx].toAdd = nimCopy(null, [], NTI10710458);
    L7: do {
      F.line = 32;
      var listener_10710465 = null;
      F.line = 184;
      var i_14320970 = 0;
      F.line = 185;
      var l_14320971 = (self_10695100[self_10695100_Idx].listeners != null ? self_10695100[self_10695100_Idx].listeners.length : 0);
      L8: do {
        F.line = 186;
          L9: while (true) {
          if (!(i_14320970 < l_14320971)) break L9;
            F.line = 32;
            listener_10710465 = self_10695100[self_10695100_Idx].listeners[chckIndx(i_14320970, 0, (self_10695100[self_10695100_Idx].listeners != null ? self_10695100[self_10695100_Idx].listeners.length : 0)+0-1)-0];
            F.line = 33;
            listener_10710465(data_10695101);
            F.line = 188;
            i_14320970 = addInt(i_14320970, 1);
            if (!(((self_10695100[self_10695100_Idx].listeners != null ? self_10695100[self_10695100_Idx].listeners.length : 0) == l_14320971))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function HEX5BHEX5D_10691401(t_10691407, key_10691408) {
  var result_10691410 = null;
  var result_10691410_Idx = 0;

  var F={procname:"[].[]",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 257;
    var hcHEX60gensym10155424_10691411 = [0];
    F.line = 258;
    var indexHEX60gensym10155425_10691420 = raw_get_10625602(t_10691407, key_10691408, hcHEX60gensym10155424_10691411, 0);
    if ((0 <= indexHEX60gensym10155425_10691420)) {
    F.line = 259;
    result_10691410 = t_10691407.data[chckIndx(indexHEX60gensym10155425_10691420, 0, (t_10691407.data != null ? t_10691407.data.length : 0)+0-1)-0]; result_10691410_Idx = "Field2";
    }
    else {
      F.line = 264;
      raiseException({message: makeNimstrLit("key not found"), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    
  framePtr = F.prev;

  return [result_10691410, result_10691410_Idx];

}
function is_none_10475324(self_10475328) {
  var result_10475329 = false;

  var F={procname:"isNone.isNone",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 158;
    result_10475329 = (self_10475328.val == null);
  framePtr = F.prev;

  return result_10475329;

}
function get_10475301(self_10475306) {
  var result_10475308 = null;
  var result_10475308_Idx = 0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (is_none_10475324(self_10475306)) {
    F.line = 215;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI920204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    F.line = 216;
    result_10475308 = self_10475306; result_10475308_Idx = "val";
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return [result_10475308, result_10475308_Idx];

}
function emit_on_bounds_changed_10691039(self_10691041) {
    var Tmp1;
    var Tmp2;

  var F={procname:"element_bounds_changed_event.emitOnBoundsChanged",prev:framePtr,filename:"element_bounds_changed_event.nim",line:0};
  framePtr = F;
    if (contains_10691184(bounds_changed_handlers_10600629[0], self_10691041)) {
    F.line = 17;
    emit_10695095((Tmp1 = HEX5BHEX5D_10691401(bounds_changed_handlers_10600629[0], self_10691041), Tmp1)[0], Tmp1[1], (Tmp2 = get_10475301(self_10691041.bounds), Tmp2)[0][Tmp2[1]]);
    }
    
  framePtr = F.prev;

  
}
function arrange_core_11145294(self_11145296, final_rect_11145297) {
    var Tmp1;
    var Tmp2;

  var F={procname:"element.arrangeCore",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 298;
    var margin_11145298 = margin_11137477(self_11145296);
    F.line = 299;
    var origin_x_11145806 = [(x_9864321(final_rect_11145297) + left_11145383(margin_11145298))];
    F.line = 300;
    var origin_y_11146314 = [(y_9864544(final_rect_11145297) + top_11145891(margin_11145298))];
    F.line = 301;
    var available_size_minus_margins_11147577 = vec2_9863092(max_90014(0.0, ((width_9864437(final_rect_11145297) - left_11145383(margin_11145298)) - right_11146503(margin_11145298))), max_90014(0.0, ((height_9864660(final_rect_11145297) - top_11145891(margin_11145298)) - bottom_11147131(margin_11145298))));
    F.line = 305;
    var horizontal_alignment_11147842 = get_11147624(self_11145296.props.horizontalAlignment, 0);
    F.line = 306;
    var vertical_alignment_11148042 = get_11147889(self_11145296.props.verticalAlignment, 0);
    F.line = 307;
    var size_11148043 = available_size_minus_margins_11147577;
    if (!((horizontal_alignment_11147842 == 0))) {
    F.line = 310;
    size_11148043 = with_x_11150542(size_11148043, min_80014(size_11148043.x, (((Tmp1 = get_10910281(self_11145296.desiredSize), Tmp1)[0][Tmp1[1]].x - left_11145383(margin_11145298)) - right_11146503(margin_11145298))));
    }
    
    if (!((vertical_alignment_11148042 == 0))) {
    F.line = 313;
    size_11148043 = with_y_11155542(size_11148043, min_80014(size_11148043.y, (((Tmp2 = get_10910281(self_11145296.desiredSize), Tmp2)[0][Tmp2[1]].y - top_11145891(margin_11145298)) - bottom_11147131(margin_11145298))));
    }
    
    F.line = 315;
    size_11148043 = apply_layout_constraints_11045862(self_11145296, size_11148043);
    F.line = 316;
    size_11148043 = constrain_11155579(arrange_override_11137640(self_11145296, size_11148043), size_11148043);
    F.line = 318;
    switch (horizontal_alignment_11147842) {
    case 1:
    case 0:
      F.line = 320;
      HEX2BHEX3D_9620021(origin_x_11145806, 0, ((available_size_minus_margins_11147577.x - size_11148043.x) / 2.0000000000000000e+00));
      break;
    case 3:
      F.line = 322;
      HEX2BHEX3D_9620021(origin_x_11145806, 0, (available_size_minus_margins_11147577.x - size_11148043.x));
      break;
    default: 
      break;
    }
    F.line = 325;
    switch (vertical_alignment_11148042) {
    case 1:
    case 0:
      F.line = 327;
      HEX2BHEX3D_9620021(origin_y_11146314, 0, ((available_size_minus_margins_11147577.y - size_11148043.y) / 2.0000000000000000e+00));
      break;
    case 3:
      F.line = 329;
      HEX2BHEX3D_9620021(origin_y_11146314, 0, (available_size_minus_margins_11147577.y - size_11148043.y));
      break;
    default: 
      break;
    }
    F.line = 339;
    nimCopy(self_11145296.bounds, to_option_11156251(rect_10475068(vec2_9863092((get_10325316(self_11145296.props.x, origin_x_11145806[0]) + get_10325316(self_11145296.props.xOffset, 0.0)), (get_10325316(self_11145296.props.y, origin_y_11146314[0]) + get_10325316(self_11145296.props.yOffset, 0.0))), vec2_9863092(get_10325316(self_11145296.props.width, size_11148043.x), get_10325316(self_11145296.props.height, size_11148043.y)))), NTI10270084);
    F.line = 343;
    emit_on_bounds_changed_10691039(self_11145296);
  framePtr = F.prev;

  
}
function arrange_10916371(self_10916374, rect_10916375) {
      var Tmp1;
        function HEX3Aanonymous_11157621(x_11157645) {
          var result_11157649 = false;

          var F={procname:"arrange.:anonymous",prev:framePtr,filename:"element.nim",line:0};
          framePtr = F;
            F.line = 353;
            result_11157649 = HEX3DHEX3D_11158009(x_11157645, rect_10916375);
          framePtr = F.prev;

          return result_11157649;

        }

  var F={procname:"arrange.arrange",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (!(is_rooted_10907027(self_10916374))) {
    F.line = 347;
    rawEcho(makeNimstrLit("WARN: Tried to arrange an unrooted element: "), cstrToNimstr((self_10916374.id)+""));
    F.line = 348;
    break BeforeRet;
    }
    
    if (!(self_10916374.isMeasureValid)) {
    F.line = 351;
    measure_10907033(self_10916374, rect_10916375.size);
    }
    
      if (!(self_10916374.isArrangeValid)) Tmp1 = true; else {        Tmp1 = !(get_10471339(map_11159297(self_10916374.previousArrange, HEX3Aanonymous_11157621), false));      }    if (Tmp1) {
    F.line = 354;
    arrange_core_11145294(self_10916374, rect_10916375);
    F.line = 355;
    self_10916374.isArrangeValid = true;
    F.line = 356;
    nimCopy(self_10916374.previousArrange, some_10455028(rect_10916375), NTI10270084);
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function arrange_10915046(self_10915048, elem_10915049, rect_10915050) {
    var Tmp1;

  var F={procname:"element.arrange",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (!(is_rooted_10907027(elem_10915049))) {
    F.line = 47;
    rawEcho(makeNimstrLit("WARN: Tried to arrange an unrooted element: "), cstrToNimstr((elem_10915049.id)+""));
    F.line = 48;
    break BeforeRet;
    }
    
    F.line = 50;
    var parent_10916287 = nimCopy(null, elem_10915049.parent, NTI10270035);
    if (is_some_10907193(parent_10916287)) {
    F.line = 52;
    arrange_10915046(self_10915048, get_10907494(parent_10916287), rect_10915050);
    }
    
    if (!(elem_10915049.isArrangeValid)) {
    if (is_root_10907030(elem_10915049)) {
    F.line = 56;
    arrange_10916371(elem_10915049, rect_10915050);
    }
    else {
    if (is_some_10325097(elem_10915049.previousArrange)) {
    F.line = 58;
    arrange_10916371(elem_10915049, (Tmp1 = get_10475301(elem_10915049.previousArrange), Tmp1)[0][Tmp1[1]]);
    }
    else {
      F.line = 60;
    rawEcho(makeNimstrLit("Tried to arrange element without a desired size"));
    }
    }
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function perform_outstanding_arrange_10925031(self_10925033, rect_10925034) {
  var F={procname:"element.performOutstandingArrange",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 70;
        L2: while (true) {
        if (!(0 < len_10920346(self_10925033.toArrange))) break L2;
          F.line = 71;
          var elem_10930625 = pop_10920645(self_10925033.toArrange);
          F.line = 72;
          arrange_10915046(self_10925033, elem_10930625, rect_10925034);
        }
    } while(false);
  framePtr = F.prev;

  
}
function emitlayout_performed_10940339(argsHEX60gensym10930644_10940341) {
  var F={procname:"element.emitlayoutPerformed",prev:framePtr,filename:"events.nim",line:0};
  framePtr = F;
    F.line = 54;
    emit_10695095(emitterHEX60gensym10930642_10935006, 0, argsHEX60gensym10930644_10940341);
  framePtr = F.prev;

  
}
function perform_outstanding_layouts_and_measures_10960436(rect_10960438) {
  var F={procname:"element.performOutstandingLayoutsAndMeasures",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 80;
    perform_outstanding_measure_10916924(instance_10907142, rect_10960438.size);
    F.line = 81;
    perform_outstanding_arrange_10925031(instance_10907142, rect_10960438);
    F.line = 82;
    emitlayout_performed_10940339(rect_10960438);
  framePtr = F.prev;

  
}
function clear_10315182(t_10315188) {
  var F={procname:"clear.clear",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 149;
      var i_10320139 = 0;
      F.line = 104;
      var colontmp__14320989 = 0;
      F.line = 149;
      colontmp__14320989 = (t_10315188.data != null ? t_10315188.data.length : 0);
      F.line = 106;
      var i_14320990 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_14320990 < colontmp__14320989)) break L3;
            F.line = 149;
            i_10320139 = i_14320990;
            F.line = 151;
            t_10315188.data[chckIndx(i_10320139, 0, (t_10315188.data != null ? t_10315188.data.length : 0)+0-1)-0].Field0 = 0;
            F.line = 152;
            t_10315188.data[chckIndx(i_10320139, 0, (t_10315188.data != null ? t_10315188.data.length : 0)+0-1)-0].Field1 = null;
            F.line = 153;
            t_10315188.data[chckIndx(i_10320139, 0, (t_10315188.data != null ? t_10315188.data.length : 0)+0-1)-0].Field2 = null;
            F.line = 109;
            i_14320990 = addInt(i_14320990, 1);
          }
      } while(false);
    } while(false);
    F.line = 154;
    t_10315188.counter = 0;
  framePtr = F.prev;

  
}
function invalidate_world_positions_cache_10315071() {
  var F={procname:"types.invalidateWorldPositionsCache",prev:framePtr,filename:"types.nim",line:0};
  framePtr = F;
    F.line = 187;
    clear_10315182(world_positions_10300629[0]);
  framePtr = F.prev;

  
}
function add_10330232(self_10330236, other_10330238) {
  var result_10330240 = null;

  var F={procname:"add.add",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 42;
    result_10330240 = vec2_9863092((self_10330236.x + other_10330238.x), (self_10330236.y + other_10330238.y));
  framePtr = F.prev;

  return result_10330240;

}
function some_9981089(val_9981092) {
  var result_9981094 = ({val: 0.0, has: false});

  var F={procname:"some.some",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 121;
    result_9981094.has = true;
    F.line = 122;
    result_9981094.val = val_9981092;
  framePtr = F.prev;

  return result_9981094;

}
function none_10325226() {
  var result_10325244 = ({val: 0.0, has: false});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  framePtr = F.prev;

  return result_10325244;

}
function map_10325071(self_10325076, callback_10325079) {
    var Tmp1;

  var result_10325081 = ({val: 0.0, has: false});

  var F={procname:"map.map",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 243;
    if (is_some_10325097(self_10325076)) {
    Tmp1 = some_9981089(callback_10325079(self_10325076.val));
    }
    else {
    Tmp1 = none_10325226();
    }
    
    nimCopy(result_10325081, Tmp1, NTI9981076);
  framePtr = F.prev;

  return result_10325081;

}
function must_rehash_10380601(t_10380604) {
  var result_10380605 = false;

  var F={procname:"mustRehash.mustRehash",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    if (!((t_10380604.counter < (t_10380604.data != null ? t_10380604.data.length : 0)))) {
    F.line = 33;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/hashcommon.nim(33, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 34;
    result_10380605 = ((mulInt((t_10380604.data != null ? t_10380604.data.length : 0), 2) < mulInt(t_10380604.counter, 3)) || (subInt((t_10380604.data != null ? t_10380604.data.length : 0), t_10380604.counter) < 4));
  framePtr = F.prev;

  return result_10380605;

}
function raw_insert_10406148(t_10406154, data_10406157, data_10406157_Idx, key_10406158, val_10406159, hc_10406160, h_10406161) {
  var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"tableimpl.nim",line:0};
  framePtr = F;
    F.line = 22;
    data_10406157[data_10406157_Idx][chckIndx(h_10406161, 0, (data_10406157[data_10406157_Idx] != null ? data_10406157[data_10406157_Idx].length : 0)+0-1)-0].Field1 = key_10406158;
    F.line = 23;
    data_10406157[data_10406157_Idx][chckIndx(h_10406161, 0, (data_10406157[data_10406157_Idx] != null ? data_10406157[data_10406157_Idx].length : 0)+0-1)-0].Field2 = val_10406159;
    F.line = 24;
    data_10406157[data_10406157_Idx][chckIndx(h_10406161, 0, (data_10406157[data_10406157_Idx] != null ? data_10406157[data_10406157_Idx].length : 0)+0-1)-0].Field0 = hc_10406160;
  framePtr = F.prev;

  
}
function enlarge_10405161(t_10405167) {
  var F={procname:"enlarge.enlarge",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 267;
    var n_10405175 = null;
    F.line = 268;
    n_10405175 = new Array(chckRange(mulInt((t_10405167.data != null ? t_10405167.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_10405167.data != null ? t_10405167.data.length : 0), 2), 0, 2147483647);++i) {n_10405175[i]={Field0: 0, Field1: null, Field2: null};}    F.line = 269;
    var Tmp1 = t_10405167.data; t_10405167.data = n_10405175; n_10405175 = Tmp1;    L2: do {
      F.line = 270;
      var i_10405334 = 0;
      F.line = 39;
      var colontmp__14320999 = 0;
      F.line = 270;
      colontmp__14320999 = (n_10405175 != null ? (n_10405175.length-1) : -1);
      F.line = 56;
      var res_14321000 = 0;
      L3: do {
        F.line = 57;
          L4: while (true) {
          if (!(res_14321000 <= colontmp__14320999)) break L4;
            F.line = 270;
            i_10405334 = res_14321000;
            F.line = 271;
            var eh_10405503 = n_10405175[chckIndx(i_10405334, 0, (n_10405175 != null ? n_10405175.length : 0)+0-1)-0].Field0;
            if (is_filled_10152018(eh_10405503)) {
            F.line = 273;
            var j_10405510 = (eh_10405503 & (t_10405167.data != null ? (t_10405167.data.length-1) : -1));
            L5: do {
              F.line = 274;
                L6: while (true) {
                if (!is_filled_10152018(t_10405167.data[chckIndx(j_10405510, 0, (t_10405167.data != null ? t_10405167.data.length : 0)+0-1)-0].Field0)) break L6;
                  F.line = 275;
                  j_10405510 = next_try_10155014(j_10405510, (t_10405167.data != null ? (t_10405167.data.length-1) : -1));
                }
            } while(false);
            F.line = 277;
            raw_insert_10406148(t_10405167, t_10405167, "data", n_10405175[chckIndx(i_10405334, 0, (n_10405175 != null ? n_10405175.length : 0)+0-1)-0].Field1, n_10405175[chckIndx(i_10405334, 0, (n_10405175 != null ? n_10405175.length : 0)+0-1)-0].Field2, eh_10405503, j_10405510);
            }
            
            F.line = 59;
            res_14321000 = addInt(res_14321000, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function raw_get_known_hc_10406693(t_10406697, key_10406698, hc_10406699) {
  var result_10406700 = 0;

  var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((t_10406697.data != null ? t_10406697.data.length : 0) == 0)) {
    F.line = 47;
    result_10406700 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_10410138 = (hc_10406699 & (t_10406697.data != null ? (t_10406697.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_10152018(t_10406697.data[chckIndx(h_10410138, 0, (t_10406697.data != null ? t_10406697.data.length : 0)+0-1)-0].Field0)) break L2;
          if (((t_10406697.data[chckIndx(h_10410138, 0, (t_10406697.data != null ? t_10406697.data.length : 0)+0-1)-0].Field0 == hc_10406699) && (t_10406697.data[chckIndx(h_10410138, 0, (t_10406697.data != null ? t_10406697.data.length : 0)+0-1)-0].Field1 == key_10406698))) {
          F.line = 55;
          result_10406700 = h_10410138;
          break BeforeRet;
          }
          
          F.line = 56;
          h_10410138 = next_try_10155014(h_10410138, (t_10406697.data != null ? (t_10406697.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_10406700 = subInt(-1, h_10410138);
  } while (false);
  framePtr = F.prev;

  return result_10406700;

}
function HEX5BHEX5DHEX3D_10330370(t_10330376, key_10330377, val_10330378) {
  var F={procname:"[]=.[]=",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (((t_10330376.data != null ? t_10330376.data.length : 0) == 0)) {
    if (!(is_power_of_two_8720029(64))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(defaultInitialSize)` "));
    }
    
    F.line = 167;
    t_10330376.counter = 0;
    F.line = 168;
    t_10330376.data = new Array(64); for (var i=0;i<64;++i) {t_10330376.data[i]={Field0: 0, Field1: null, Field2: null};}    }
    
    F.line = 57;
    var hc_10355601 = [0];
    F.line = 58;
    var index_10355610 = raw_get_10300802(t_10330376, key_10330377, hc_10355601, 0);
    if ((0 <= index_10355610)) {
    F.line = 59;
    t_10330376.data[chckIndx(index_10355610, 0, (t_10330376.data != null ? t_10330376.data.length : 0)+0-1)-0].Field2 = val_10330378;
    }
    else {
      if (((t_10330376.data != null ? t_10330376.data.length : 0) == 0)) {
      if (!(is_power_of_two_8720029(64))) {
      F.line = 166;
      failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(defaultInitialSize)` "));
      }
      
      F.line = 167;
      t_10330376.counter = 0;
      F.line = 168;
      t_10330376.data = new Array(64); for (var i=0;i<64;++i) {t_10330376.data[i]={Field0: 0, Field1: null, Field2: null};}      }
      
      if (must_rehash_10380601(t_10330376)) {
      F.line = 49;
      enlarge_10405161(t_10330376);
      F.line = 50;
      index_10355610 = raw_get_known_hc_10406693(t_10330376, key_10330377, hc_10355601[0]);
      }
      
      F.line = 51;
      index_10355610 = subInt(-1, index_10355610);
      F.line = 52;
      raw_insert_10406148(t_10330376, t_10330376, "data", key_10330377, val_10330378, hc_10355601[0], index_10355610);
      F.line = 60;
      t_10330376.counter = addInt(t_10330376.counter, 1);
    }
    
  framePtr = F.prev;

  
}
function vec2_10255375(xy_10255378) {
  var result_10255380 = null;

  var F={procname:"vec2.vec2",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 18;
    result_10255380 = {x: xy_10255378, y: xy_10255378};
  framePtr = F.prev;

  return result_10255380;

}
function calculate_world_positions_10321293(elem_10321295) {
    function set_world_pos_10321296(e_10321298, parent_pos_10321303) {
        function HEX3Aanonymous_10325001(b_10325024) {
          var result_10325028 = 0.0;

          var F={procname:"setWorldPos.:anonymous",prev:framePtr,filename:"types.nim",line:0};
          framePtr = F;
            F.line = 194;
            result_10325028 = x_9864321(b_10325024);
          framePtr = F.prev;

          return result_10325028;

        }
        function HEX3Aanonymous_10330001(b_10330024) {
          var result_10330028 = 0.0;

          var F={procname:"setWorldPos.:anonymous",prev:framePtr,filename:"types.nim",line:0};
          framePtr = F;
            F.line = 194;
            result_10330028 = y_9864544(b_10330024);
          framePtr = F.prev;

          return result_10330028;

        }

      var F={procname:"calculateWorldPositions.setWorldPos",prev:framePtr,filename:"types.nim",line:0};
      framePtr = F;
        F.line = 194;
        var this_world_pos_10330260 = add_10330232(vec2_9863092(get_10325316(map_10325071(e_10321298.bounds, HEX3Aanonymous_10325001), 0.0), get_10325316(map_10325071(e_10321298.bounds, HEX3Aanonymous_10330001), 0.0)), parent_pos_10321303);
        F.line = 195;
        HEX5BHEX5DHEX3D_10330370(world_positions_10300629[0], e_10321298, this_world_pos_10330260);
        L1: do {
          F.line = 196;
          var child_10420214 = null;
          F.line = 184;
          var i_14320993 = 0;
          F.line = 185;
          var l_14320994 = (e_10321298.children != null ? e_10321298.children.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_14320993 < l_14320994)) break L3;
                F.line = 196;
                child_10420214 = e_10321298.children[chckIndx(i_14320993, 0, (e_10321298.children != null ? e_10321298.children.length : 0)+0-1)-0];
                F.line = 197;
                set_world_pos_10321296(child_10420214, this_world_pos_10330260);
                F.line = 188;
                i_14320993 = addInt(i_14320993, 1);
                if (!(((e_10321298.children != null ? e_10321298.children.length : 0) == l_14320994))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      framePtr = F.prev;

      
    }

  var F={procname:"types.calculateWorldPositions",prev:framePtr,filename:"types.nim",line:0};
  framePtr = F;
    F.line = 191;
    invalidate_world_positions_cache_10315071();
    F.line = 198;
    set_world_pos_10321296(elem_10321295, vec2_10255375(0.0));
  framePtr = F.prev;

  
}
function clear_10465421(t_10465427) {
  var F={procname:"clear.clear",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 149;
      var i_10470139 = 0;
      F.line = 104;
      var colontmp__14321008 = 0;
      F.line = 149;
      colontmp__14321008 = (t_10465427.data != null ? t_10465427.data.length : 0);
      F.line = 106;
      var i_14321009 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_14321009 < colontmp__14321008)) break L3;
            F.line = 149;
            i_10470139 = i_14321009;
            F.line = 151;
            t_10465427.data[chckIndx(i_10470139, 0, (t_10465427.data != null ? t_10465427.data.length : 0)+0-1)-0].Field0 = 0;
            F.line = 152;
            t_10465427.data[chckIndx(i_10470139, 0, (t_10465427.data != null ? t_10465427.data.length : 0)+0-1)-0].Field1 = null;
            F.line = 153;
            t_10465427.data[chckIndx(i_10470139, 0, (t_10465427.data != null ? t_10465427.data.length : 0)+0-1)-0].Field2 = null;
            F.line = 109;
            i_14321009 = addInt(i_14321009, 1);
          }
      } while(false);
    } while(false);
    F.line = 154;
    t_10465427.counter = 0;
  framePtr = F.prev;

  
}
function invalidate_clip_bounds_cache_10465310() {
  var F={procname:"types.invalidateClipBoundsCache",prev:framePtr,filename:"types.nim",line:0};
  framePtr = F;
    F.line = 210;
    clear_10465421(clip_bounds_10440629[0]);
  framePtr = F.prev;

  
}
function none_10465238() {
  var result_10465255 = ({val: null});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  framePtr = F.prev;

  return result_10465255;

}
function map_10475120(self_10475125, callback_10475128) {
    var Tmp1;

  var result_10475130 = ({val: null});

  var F={procname:"map.map",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 243;
    if (is_some_10325097(self_10475125)) {
    Tmp1 = some_10455028(callback_10475128(self_10475125.val));
    }
    else {
    Tmp1 = none_10465238();
    }
    
    nimCopy(result_10475130, Tmp1, NTI10270084);
  framePtr = F.prev;

  return result_10475130;

}
function with_pos_10475050(self_10475054, pos_10475056) {
  var result_10475058 = null;

  var F={procname:"withPos.withPos",prev:framePtr,filename:"rect.nim",line:0};
  framePtr = F;
    F.line = 108;
    result_10475058 = rect_10475068(pos_10475056, self_10475054.size);
  framePtr = F.prev;

  return result_10475058;

}
function raw_get_10440784(t_10440788, key_10440789, hc_10440790, hc_10440790_Idx) {
            var Tmp3;

  var result_10440791 = 0;

  var F={procname:"rawGet.rawGet",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 63;
    hc_10440790[hc_10440790_Idx] = hash_10280010(key_10440789);
    if ((hc_10440790[hc_10440790_Idx] == 0)) {
    F.line = 65;
    hc_10440790[hc_10440790_Idx] = 314159265;
    }
    
    if (((t_10440788.data != null ? t_10440788.data.length : 0) == 0)) {
    F.line = 47;
    result_10440791 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_10450138 = (hc_10440790[hc_10440790_Idx] & (t_10440788.data != null ? (t_10440788.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_10152018(t_10440788.data[chckIndx(h_10450138, 0, (t_10440788.data != null ? t_10440788.data.length : 0)+0-1)-0].Field0)) break L2;
            if (!(t_10440788.data[chckIndx(h_10450138, 0, (t_10440788.data != null ? t_10440788.data.length : 0)+0-1)-0].Field0 == hc_10440790[hc_10440790_Idx])) Tmp3 = false; else {              Tmp3 = (t_10440788.data[chckIndx(h_10450138, 0, (t_10440788.data != null ? t_10440788.data.length : 0)+0-1)-0].Field1 == key_10440789);            }          if (Tmp3) {
          F.line = 55;
          result_10440791 = h_10450138;
          break BeforeRet;
          }
          
          F.line = 56;
          h_10450138 = next_try_10155014(h_10450138, (t_10440788.data != null ? (t_10440788.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_10440791 = subInt(-1, h_10450138);
  } while (false);
  framePtr = F.prev;

  return result_10440791;

}
function must_rehash_10530601(t_10530604) {
  var result_10530605 = false;

  var F={procname:"mustRehash.mustRehash",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    if (!((t_10530604.counter < (t_10530604.data != null ? t_10530604.data.length : 0)))) {
    F.line = 33;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/hashcommon.nim(33, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 34;
    result_10530605 = ((mulInt((t_10530604.data != null ? t_10530604.data.length : 0), 2) < mulInt(t_10530604.counter, 3)) || (subInt((t_10530604.data != null ? t_10530604.data.length : 0), t_10530604.counter) < 4));
  framePtr = F.prev;

  return result_10530605;

}
function raw_insert_10556148(t_10556154, data_10556157, data_10556157_Idx, key_10556158, val_10556159, hc_10556160, h_10556161) {
  var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"tableimpl.nim",line:0};
  framePtr = F;
    F.line = 22;
    data_10556157[data_10556157_Idx][chckIndx(h_10556161, 0, (data_10556157[data_10556157_Idx] != null ? data_10556157[data_10556157_Idx].length : 0)+0-1)-0].Field1 = key_10556158;
    F.line = 23;
    data_10556157[data_10556157_Idx][chckIndx(h_10556161, 0, (data_10556157[data_10556157_Idx] != null ? data_10556157[data_10556157_Idx].length : 0)+0-1)-0].Field2 = val_10556159;
    F.line = 24;
    data_10556157[data_10556157_Idx][chckIndx(h_10556161, 0, (data_10556157[data_10556157_Idx] != null ? data_10556157[data_10556157_Idx].length : 0)+0-1)-0].Field0 = hc_10556160;
  framePtr = F.prev;

  
}
function enlarge_10555161(t_10555167) {
  var F={procname:"enlarge.enlarge",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 267;
    var n_10555175 = null;
    F.line = 268;
    n_10555175 = new Array(chckRange(mulInt((t_10555167.data != null ? t_10555167.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_10555167.data != null ? t_10555167.data.length : 0), 2), 0, 2147483647);++i) {n_10555175[i]={Field0: 0, Field1: null, Field2: null};}    F.line = 269;
    var Tmp1 = t_10555167.data; t_10555167.data = n_10555175; n_10555175 = Tmp1;    L2: do {
      F.line = 270;
      var i_10555334 = 0;
      F.line = 39;
      var colontmp__14321019 = 0;
      F.line = 270;
      colontmp__14321019 = (n_10555175 != null ? (n_10555175.length-1) : -1);
      F.line = 56;
      var res_14321020 = 0;
      L3: do {
        F.line = 57;
          L4: while (true) {
          if (!(res_14321020 <= colontmp__14321019)) break L4;
            F.line = 270;
            i_10555334 = res_14321020;
            F.line = 271;
            var eh_10555503 = n_10555175[chckIndx(i_10555334, 0, (n_10555175 != null ? n_10555175.length : 0)+0-1)-0].Field0;
            if (is_filled_10152018(eh_10555503)) {
            F.line = 273;
            var j_10555510 = (eh_10555503 & (t_10555167.data != null ? (t_10555167.data.length-1) : -1));
            L5: do {
              F.line = 274;
                L6: while (true) {
                if (!is_filled_10152018(t_10555167.data[chckIndx(j_10555510, 0, (t_10555167.data != null ? t_10555167.data.length : 0)+0-1)-0].Field0)) break L6;
                  F.line = 275;
                  j_10555510 = next_try_10155014(j_10555510, (t_10555167.data != null ? (t_10555167.data.length-1) : -1));
                }
            } while(false);
            F.line = 277;
            raw_insert_10556148(t_10555167, t_10555167, "data", n_10555175[chckIndx(i_10555334, 0, (n_10555175 != null ? n_10555175.length : 0)+0-1)-0].Field1, n_10555175[chckIndx(i_10555334, 0, (n_10555175 != null ? n_10555175.length : 0)+0-1)-0].Field2, eh_10555503, j_10555510);
            }
            
            F.line = 59;
            res_14321020 = addInt(res_14321020, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function raw_get_known_hc_10556693(t_10556697, key_10556698, hc_10556699) {
  var result_10556700 = 0;

  var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((t_10556697.data != null ? t_10556697.data.length : 0) == 0)) {
    F.line = 47;
    result_10556700 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_10560138 = (hc_10556699 & (t_10556697.data != null ? (t_10556697.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_10152018(t_10556697.data[chckIndx(h_10560138, 0, (t_10556697.data != null ? t_10556697.data.length : 0)+0-1)-0].Field0)) break L2;
          if (((t_10556697.data[chckIndx(h_10560138, 0, (t_10556697.data != null ? t_10556697.data.length : 0)+0-1)-0].Field0 == hc_10556699) && (t_10556697.data[chckIndx(h_10560138, 0, (t_10556697.data != null ? t_10556697.data.length : 0)+0-1)-0].Field1 == key_10556698))) {
          F.line = 55;
          result_10556700 = h_10560138;
          break BeforeRet;
          }
          
          F.line = 56;
          h_10560138 = next_try_10155014(h_10560138, (t_10556697.data != null ? (t_10556697.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_10556700 = subInt(-1, h_10560138);
  } while (false);
  framePtr = F.prev;

  return result_10556700;

}
function HEX5BHEX5DHEX3D_10480088(t_10480094, key_10480095, val_10480096) {
  var F={procname:"[]=.[]=",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (((t_10480094.data != null ? t_10480094.data.length : 0) == 0)) {
    if (!(is_power_of_two_8720029(64))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(defaultInitialSize)` "));
    }
    
    F.line = 167;
    t_10480094.counter = 0;
    F.line = 168;
    t_10480094.data = new Array(64); for (var i=0;i<64;++i) {t_10480094.data[i]={Field0: 0, Field1: null, Field2: null};}    }
    
    F.line = 57;
    var hc_10505601 = [0];
    F.line = 58;
    var index_10505610 = raw_get_10440784(t_10480094, key_10480095, hc_10505601, 0);
    if ((0 <= index_10505610)) {
    F.line = 59;
    t_10480094.data[chckIndx(index_10505610, 0, (t_10480094.data != null ? t_10480094.data.length : 0)+0-1)-0].Field2 = val_10480096;
    }
    else {
      if (((t_10480094.data != null ? t_10480094.data.length : 0) == 0)) {
      if (!(is_power_of_two_8720029(64))) {
      F.line = 166;
      failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(defaultInitialSize)` "));
      }
      
      F.line = 167;
      t_10480094.counter = 0;
      F.line = 168;
      t_10480094.data = new Array(64); for (var i=0;i<64;++i) {t_10480094.data[i]={Field0: 0, Field1: null, Field2: null};}      }
      
      if (must_rehash_10530601(t_10480094)) {
      F.line = 49;
      enlarge_10555161(t_10480094);
      F.line = 50;
      index_10505610 = raw_get_known_hc_10556693(t_10480094, key_10480095, hc_10505601[0]);
      }
      
      F.line = 51;
      index_10505610 = subInt(-1, index_10505610);
      F.line = 52;
      raw_insert_10556148(t_10480094, t_10480094, "data", key_10480095, val_10480096, hc_10505601[0], index_10505610);
      F.line = 60;
      t_10480094.counter = addInt(t_10480094.counter, 1);
    }
    
  framePtr = F.prev;

  
}
function none_10465232() {
  var result_10465236 = ({val: null});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 140;
    nimCopy(result_10465236, none_10465238(), NTI10465244);
  framePtr = F.prev;

  return result_10465236;

}
function calculate_clip_bounds_10471278(root_10471280) {
    function set_clip_bounds_10471281(e_10471283, closest_10471288) {
        function HEX3Aanonymous_10475001(x_10475024) {
          var result_10475028 = null;

          var F={procname:"setClipBounds.:anonymous",prev:framePtr,filename:"types.nim",line:0};
          framePtr = F;
            F.line = 218;
            result_10475028 = with_pos_10475050(x_10475024, actual_world_position_10300676(e_10471283));
          framePtr = F.prev;

          return result_10475028;

        }
        var Tmp1;
        var Tmp2;

      var F={procname:"calculateClipBounds.setClipBounds",prev:framePtr,filename:"types.nim",line:0};
      framePtr = F;
        F.line = 216;
        var actual_closest_10471293 = [nimCopy(null, closest_10471288, NTI10270084)];
        if (get_10471339(e_10471283.props.clipToBounds, false)) {
        F.line = 218;
        nimCopy(actual_closest_10471293[0], map_10475120(e_10471283.bounds, HEX3Aanonymous_10475001), NTI10270084);
        F.line = 219;
        HEX5BHEX5DHEX3D_10480088(clip_bounds_10440629[0], e_10471283, (Tmp1 = get_10475301(actual_closest_10471293[0]), Tmp1)[0][Tmp1[1]]);
        }
        else {
        if (is_some_10325097(actual_closest_10471293[0])) {
        F.line = 221;
        HEX5BHEX5DHEX3D_10480088(clip_bounds_10440629[0], e_10471283, (Tmp2 = get_10475301(actual_closest_10471293[0]), Tmp2)[0][Tmp2[1]]);
        }
        }
        L3: do {
          F.line = 222;
          var child_10560913 = null;
          F.line = 184;
          var i_14321012 = 0;
          F.line = 185;
          var l_14321013 = (e_10471283.children != null ? e_10471283.children.length : 0);
          L4: do {
            F.line = 186;
              L5: while (true) {
              if (!(i_14321012 < l_14321013)) break L5;
                F.line = 222;
                child_10560913 = e_10471283.children[chckIndx(i_14321012, 0, (e_10471283.children != null ? e_10471283.children.length : 0)+0-1)-0];
                F.line = 223;
                set_clip_bounds_10471281(child_10560913, actual_closest_10471293[0]);
                F.line = 188;
                i_14321012 = addInt(i_14321012, 1);
                if (!(((e_10471283.children != null ? e_10471283.children.length : 0) == l_14321013))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      framePtr = F.prev;

      
    }

  var F={procname:"types.calculateClipBounds",prev:framePtr,filename:"types.nim",line:0};
  framePtr = F;
    F.line = 213;
    invalidate_clip_bounds_cache_10465310();
    F.line = 224;
    set_clip_bounds_10471281(root_10471280, none_10465232());
  framePtr = F.prev;

  
}
function none_11650068() {
  var result_11650085 = ({val: null});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  framePtr = F.prev;

  return result_11650085;

}
function none_11650062() {
  var result_11650066 = ({val: null});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 140;
    nimCopy(result_11650066, none_11650068(), NTI11650074);
  framePtr = F.prev;

  return result_11650066;

}
function is_some_10985113(self_10985117) {
  var result_10985118 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_10985118 = !((self_10985117.val == null));
  framePtr = F.prev;

  return result_10985118;

}
function is_none_11650200(self_11650204) {
  var result_11650205 = false;

  var F={procname:"isNone.isNone",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 158;
    result_11650205 = (self_11650204.val == null);
  framePtr = F.prev;

  return result_11650205;

}
function get_11650177(self_11650182) {
  var result_11650184 = null;
  var result_11650184_Idx = 0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (is_none_11650200(self_11650182)) {
    F.line = 215;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI920204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    F.line = 216;
    result_11650184 = self_11650182; result_11650184_Idx = "val";
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return [result_11650184, result_11650184_Idx];

}
function some_11435204(val_11435207) {
  var result_11435209 = ({val: null});

  var F={procname:"some.some",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    if (!(!((val_11435207 == null)))) {
    F.line = 118;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/options.nim(118, 11) `not val.isNil` "));
    }
    
    F.line = 119;
    result_11435209.val = val_11435207;
  framePtr = F.prev;

  return result_11435209;

}
function is_some_11655154(self_11655158) {
  var result_11655159 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_11655159 = !((self_11655158.val == null));
  framePtr = F.prev;

  return result_11655159;

}
function is_none_11655288(self_11655292) {
  var result_11655293 = false;

  var F={procname:"isNone.isNone",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 158;
    result_11655293 = (self_11655292.val == null);
  framePtr = F.prev;

  return result_11655293;

}
function get_11655265(self_11655270) {
  var result_11655272 = null;
  var result_11655272_Idx = 0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (is_none_11655288(self_11655270)) {
    F.line = 215;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI920204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    F.line = 216;
    result_11655272 = self_11655270; result_11655272_Idx = "val";
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return [result_11655272, result_11655272_Idx];

}
function HEX26_11680079(x_11680083, y_11680085) {
  var result_11680087 = null;

  var F={procname:"&.&",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1599;
    result_11680087 = new Array(chckRange(addInt((x_11680083 != null ? x_11680083.length : 0), (y_11680085 != null ? y_11680085.length : 0)), 0, 2147483647)); for (var i=0;i<chckRange(addInt((x_11680083 != null ? x_11680083.length : 0), (y_11680085 != null ? y_11680085.length : 0)), 0, 2147483647);++i) {result_11680087[i]=null;}    L1: do {
      F.line = 1600;
      var i_11680118 = 0;
      F.line = 66;
      var colontmp__14321032 = 0;
      F.line = 1600;
      colontmp__14321032 = subInt((x_11680083 != null ? x_11680083.length : 0), 1);
      F.line = 77;
      var res_14321033 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_14321033 <= colontmp__14321032)) break L3;
            F.line = 1600;
            i_11680118 = res_14321033;
            F.line = 1601;
            result_11680087[chckIndx(i_11680118, 0, (result_11680087 != null ? result_11680087.length : 0)+0-1)-0] = x_11680083[chckIndx(i_11680118, 0, (x_11680083 != null ? x_11680083.length : 0)+0-1)-0];
            F.line = 80;
            res_14321033 = addInt(res_14321033, 1);
          }
      } while(false);
    } while(false);
    L4: do {
      F.line = 1602;
      var i_11680132 = 0;
      F.line = 66;
      var colontmp__14321039 = 0;
      F.line = 1602;
      colontmp__14321039 = subInt((y_11680085 != null ? y_11680085.length : 0), 1);
      F.line = 77;
      var res_14321040 = 0;
      L5: do {
        F.line = 78;
          L6: while (true) {
          if (!(res_14321040 <= colontmp__14321039)) break L6;
            F.line = 1602;
            i_11680132 = res_14321040;
            F.line = 1603;
            result_11680087[chckIndx(addInt(i_11680132, (x_11680083 != null ? x_11680083.length : 0)), 0, (result_11680087 != null ? result_11680087.length : 0)+0-1)-0] = y_11680085[chckIndx(i_11680132, 0, (y_11680085 != null ? y_11680085.length : 0)+0-1)-0];
            F.line = 80;
            res_14321040 = addInt(res_14321040, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_11680087;

}
function map_11680030(s_11680035, op_11680038) {
  var result_11680040 = null;

  var F={procname:"map.map",prev:framePtr,filename:"sequtils.nim",line:0};
  framePtr = F;
    F.line = 374;
    result_11680040 = new Array(chckRange((s_11680035 != null ? s_11680035.length : 0), 0, 2147483647)); for (var i=0;i<chckRange((s_11680035 != null ? s_11680035.length : 0), 0, 2147483647);++i) {result_11680040[i]=null;}    L1: do {
      F.line = 375;
      var i_11680063 = 0;
      F.line = 104;
      var colontmp__14321046 = 0;
      F.line = 375;
      colontmp__14321046 = (s_11680035 != null ? s_11680035.length : 0);
      F.line = 106;
      var i_14321047 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_14321047 < colontmp__14321046)) break L3;
            F.line = 375;
            i_11680063 = i_14321047;
            F.line = 376;
            result_11680040[chckIndx(i_11680063, 0, (result_11680040 != null ? result_11680040.length : 0)+0-1)-0] = op_11680038(s_11680035[chckIndx(i_11680063, 0, (s_11680035 != null ? s_11680035.length : 0)+0-1)-0]);
            F.line = 109;
            i_14321047 = addInt(i_14321047, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_11680040;

}
function new_seq_11670059(len_11670062) {
  var result_11670064 = null;

  var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 643;
    result_11670064 = new Array(len_11670062); for (var i=0;i<len_11670062;++i) {result_11670064[i]=({val: null});}  framePtr = F.prev;

  return result_11670064;

}
function filter_11670048(s_11670052, pred_11670055) {
  var result_11670057 = null;

  var F={procname:"filter.filter",prev:framePtr,filename:"sequtils.nim",line:0};
  framePtr = F;
    F.line = 455;
    result_11670057 = nimCopy(null, new_seq_11670059(0), NTI11670063);
    L1: do {
      F.line = 456;
      var i_11670096 = 0;
      F.line = 104;
      var colontmp__14321050 = 0;
      F.line = 456;
      colontmp__14321050 = (s_11670052 != null ? s_11670052.length : 0);
      F.line = 106;
      var i_14321051 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_14321051 < colontmp__14321050)) break L3;
            F.line = 456;
            i_11670096 = i_14321051;
            if (pred_11670055(s_11670052[chckIndx(i_11670096, 0, (s_11670052 != null ? s_11670052.length : 0)+0-1)-0])) {
            F.line = 458;
            var Tmp4 = nimCopy(null, s_11670052[chckIndx(i_11670096, 0, (s_11670052 != null ? s_11670052.length : 0)+0-1)-0], NTI10270009);
            if (result_11670057 != null) { result_11670057.push(Tmp4); } else { result_11670057 = [Tmp4]; };
            }
            
            F.line = 109;
            i_14321051 = addInt(i_14321051, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_11670057;

}
function map_11665029(s_11665034, op_11665037) {
  var result_11665039 = null;

  var F={procname:"map.map",prev:framePtr,filename:"sequtils.nim",line:0};
  framePtr = F;
    F.line = 374;
    result_11665039 = new Array(chckRange((s_11665034 != null ? s_11665034.length : 0), 0, 2147483647)); for (var i=0;i<chckRange((s_11665034 != null ? s_11665034.length : 0), 0, 2147483647);++i) {result_11665039[i]=({val: null});}    L1: do {
      F.line = 375;
      var i_11665062 = 0;
      F.line = 104;
      var colontmp__14321054 = 0;
      F.line = 375;
      colontmp__14321054 = (s_11665034 != null ? s_11665034.length : 0);
      F.line = 106;
      var i_14321055 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_14321055 < colontmp__14321054)) break L3;
            F.line = 375;
            i_11665062 = i_14321055;
            F.line = 376;
            nimCopy(result_11665039[chckIndx(i_11665062, 0, (result_11665039 != null ? result_11665039.length : 0)+0-1)-0], op_11665037(s_11665034[chckIndx(i_11665062, 0, (s_11665034 != null ? s_11665034.length : 0)+0-1)-0]), NTI10270009);
            F.line = 109;
            i_14321055 = addInt(i_14321055, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_11665039;

}
function get_11675059(self_11675063) {
  var result_11675064 = null;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 171;
    if (is_none_11655288(self_11675063)) {
    F.line = 185;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI920204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    result_11675064 = self_11675063.val;
  framePtr = F.prev;

  return result_11675064;

}
function len_11635534(t_11635539) {
  var result_11635540 = 0;

  var F={procname:"len.len",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 491;
    result_11635540 = t_11635539.counter;
  framePtr = F.prev;

  return result_11635540;

}
function flush_debug_drawings_11630738() {
  var result_11630741 = null;

  var F={procname:"debug_draw.flushDebugDrawings",prev:framePtr,filename:"debug_draw.nim",line:0};
  framePtr = F;
    F.line = 21;
    F.line = 780;
    var resultHEX60gensym11630745_11645229 = [];
    L1: do {
      F.line = 781;
      var xHEX60gensym11630746_11645236 = null;
      F.line = 728;
      var l_14321066 = len_11635534(debug_drawings_11535629[0]);
      L2: do {
        F.line = 729;
        var h_14321068 = 0;
        F.line = 66;
        var colontmp__14321069 = 0;
        F.line = 729;
        colontmp__14321069 = (debug_drawings_11535629[0].data != null ? (debug_drawings_11535629[0].data.length-1) : -1);
        F.line = 77;
        var res_14321070 = 0;
        L3: do {
          F.line = 78;
            L4: while (true) {
            if (!(res_14321070 <= colontmp__14321069)) break L4;
              F.line = 729;
              h_14321068 = res_14321070;
              if (is_filled_10152018(debug_drawings_11535629[0].data[chckIndx(h_14321068, 0, (debug_drawings_11535629[0].data != null ? debug_drawings_11535629[0].data.length : 0)+0-1)-0].Field0)) {
              F.line = 781;
              xHEX60gensym11630746_11645236 = debug_drawings_11535629[0].data[chckIndx(h_14321068, 0, (debug_drawings_11535629[0].data != null ? debug_drawings_11535629[0].data.length : 0)+0-1)-0].Field2;
              F.line = 782;
              if (resultHEX60gensym11630745_11645229 != null) { resultHEX60gensym11630745_11645229.push(xHEX60gensym11630746_11645236); } else { resultHEX60gensym11630745_11645229 = [xHEX60gensym11630746_11645236]; };
              if (!((len_11635534(debug_drawings_11535629[0]) == l_14321066))) {
              F.line = 732;
              failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tables.nim(732, 13) `len(t) == L` the length of the table changed while iterating over it"));
              }
              
              }
              
              F.line = 80;
              res_14321070 = addInt(res_14321070, 1);
            }
        } while(false);
      } while(false);
    } while(false);
    result_11630741 = nimCopy(null, resultHEX60gensym11630745_11645229, NTI11635401);
  framePtr = F.prev;

  return result_11630741;

}
function render_11646014(self_11646016) {
      var Tmp1;
    var Tmp2;
      var Tmp3;
    var Tmp4;
    function HEX3Aanonymous_11665001(x_11665009) {
      var result_11665013 = ({val: null});

      var F={procname:"render.:anonymous",prev:framePtr,filename:"rendering.nim",line:0};
      framePtr = F;
        F.line = 21;
        nimCopy(result_11665013, render_11646014(x_11665009), NTI10270009);
      framePtr = F.prev;

      return result_11665013;

    }
    function HEX3Aanonymous_11670001(x_11670008) {
      var result_11670012 = false;

      var F={procname:"render.:anonymous",prev:framePtr,filename:"rendering.nim",line:0};
      framePtr = F;
        F.line = 21;
        result_11670012 = is_some_11655154(x_11670008);
      framePtr = F.prev;

      return result_11670012;

    }
    function HEX3Aanonymous_11675001(x_11675009) {
      var result_11675013 = null;

      var F={procname:"render.:anonymous",prev:framePtr,filename:"rendering.nim",line:0};
      framePtr = F;
        F.line = 21;
        result_11675013 = get_11675059(x_11675009);
      framePtr = F.prev;

      return result_11675013;

    }

  var result_11646021 = [({val: null})];

  var F={procname:"rendering.render",prev:framePtr,filename:"rendering.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (!((get_11159512(self_11646016.props.visibility, 0) == 0))) {
    F.line = 8;
    nimCopy(result_11646021[0], none_11650062(), NTI10270009);
    break BeforeRet;
    }
    
      if (!is_some_10985113(self_11646016.drawable)) Tmp1 = false; else {        Tmp1 = is_rooted_10907027(self_11646016);      }    if (Tmp1) {
    F.line = 10;
    nimCopy(result_11646021[0], (Tmp2 = get_11650177(self_11646016.drawable), Tmp2)[0][Tmp2[1]].render(self_11646016), NTI10270009);
    }
    else {
      F.line = 12;
      nimCopy(result_11646021[0], some_11435204({transform: nimCopy(null, self_11646016.props.transform, NTI10255163), bounds: (Tmp3 = get_10475301(self_11646016.bounds), Tmp3)[0][Tmp3[1]], clipToBounds: get_10471339(self_11646016.props.clipToBounds, false), kind: 0, colorInfo: ({val: null}), strokeInfo: ({val: null}), children: null, textInfo: null, segments: null, circleInfo: ({center: null, radius: 0.0}), ellipseInfo: ({center: null, radius: null, rotation: 0.0, startAngle: 0.0, endAngle: 0.0}), rectangleInfo: ({bounds: null})}), NTI10270009);
    }
    
    if (is_some_11655154(result_11646021[0])) {
    F.line = 21;
    (Tmp4 = get_11655265(result_11646021[0]), Tmp4)[0][Tmp4[1]].children = nimCopy(null, HEX26_11680079(map_11680030(filter_11670048(map_11665029(self_11646016.children, HEX3Aanonymous_11665001), HEX3Aanonymous_11670001), HEX3Aanonymous_11675001), flush_debug_drawings_11630738()), NTI11680086);
    }
    
  } while (false);
  framePtr = F.prev;

  return result_11646021[0];

}
function render(ctx_14320120, dt_14320121) {
  var result_14320126 = ({val: null});

  var F={procname:"main.render",prev:framePtr,filename:"main.nim",line:0};
  framePtr = F;
    F.line = 37;
    if (pointer_pos_changed_this_frame_14320055[0]) {
    F.line = 38;
    dispatch_pointer_move_12126113(ctx_14320120.rootElement, pointer_args_12120626(ctx_14320120.rootElement, scale_mouse_pos_14320084(ctx_14320120, last_pointer_pos_14320062[0])));
    F.line = 39;
    pointer_pos_changed_this_frame_14320055[0] = false;
    }
    
    if (((pointer_pressed_last_frame_14320063[0] == false) && (pointer_pressed_this_frame_14320064[0] == true))) {
    F.line = 42;
    dispatch_pointer_down_12120706(ctx_14320120.rootElement, pointer_args_12120626(ctx_14320120.rootElement, scale_mouse_pos_14320084(ctx_14320120, last_pointer_pos_14320062[0])));
    F.line = 43;
    pointer_pressed_last_frame_14320063[0] = true;
    }
    
    if (((pointer_pressed_last_frame_14320063[0] == true) && (pointer_pressed_this_frame_14320064[0] == false))) {
    F.line = 46;
    dispatch_pointer_up_12124065(ctx_14320120.rootElement, pointer_args_12120626(ctx_14320120.rootElement, scale_mouse_pos_14320084(ctx_14320120, last_pointer_pos_14320062[0])));
    F.line = 47;
    pointer_pressed_last_frame_14320063[0] = false;
    }
    
    F.line = 49;
    var available_rect_14320771 = rect_10475068(zero_9863079(), divide_14320630(window_size_14320069[0], ctx_14320120.scale));
    F.line = 50;
    perform_outstanding_layouts_and_measures_10960436(available_rect_14320771);
    F.line = 55;
    calculate_world_positions_10321293(ctx_14320120.rootElement);
    F.line = 56;
    calculate_clip_bounds_10471278(ctx_14320120.rootElement);
    F.line = 58;
    ctx_14320120.dispatchUpdate(dt_14320121);
    nimCopy(result_14320126, render_11646014(ctx_14320120.rootElement), NTI10270009);
  framePtr = F.prev;

  return result_14320126;

}
function dispatchWindowSizeChanged(new_size_14321080) {
  var F={procname:"main.dispatchWindowSizeChanged",prev:framePtr,filename:"main.nim",line:0};
  framePtr = F;
    F.line = 62;
    window_size_14320069[0] = new_size_14321080;
  framePtr = F.prev;

  
}
function dispatchPointerMove(x_14321096, y_14321097) {
      var Tmp1;
      var Tmp2;

  var F={procname:"main.dispatchPointerMove",prev:framePtr,filename:"main.nim",line:0};
  framePtr = F;
      if (!((last_pointer_pos_14320062[0].x == x_14321096))) Tmp2 = true; else {        Tmp2 = !((last_pointer_pos_14320062[0].y == y_14321097));      }      if (!Tmp2) Tmp1 = false; else {        Tmp1 = (pointer_pos_changed_this_frame_14320055[0] == false);      }    if (Tmp1) {
    F.line = 66;
    pointer_pos_changed_this_frame_14320055[0] = true;
    F.line = 67;
    last_pointer_pos_14320062[0] = vec2_9863092(x_14321096, y_14321097);
    }
    
  framePtr = F.prev;

  
}
function dispatchPointerPress(x_14330174, y_14330175) {
  var F={procname:"main.dispatchPointerPress",prev:framePtr,filename:"main.nim",line:0};
  framePtr = F;
    F.line = 70;
    last_pointer_pos_14320062[0] = vec2_9863092(x_14330174, y_14330175);
    F.line = 71;
    pointer_pressed_this_frame_14320064[0] = true;
  framePtr = F.prev;

  
}
function dispatchPointerRelease(x_14330197, y_14330198) {
  var F={procname:"main.dispatchPointerRelease",prev:framePtr,filename:"main.nim",line:0};
  framePtr = F;
    F.line = 74;
    last_pointer_pos_14320062[0] = vec2_9863092(x_14330197, y_14330198);
    F.line = 75;
    pointer_pressed_this_frame_14320064[0] = false;
  framePtr = F.prev;

  
}
function delete_14342165(x_14342170, x_14342170_Idx, i_14342171) {
  var F={procname:"delete.delete",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1254;
    x_14342170[x_14342170_Idx].splice(i_14342171, 1);
  framePtr = F.prev;

  
}
function find_14340215(a_14340219, item_14340220) {
  var result_14340221 = 0;

  var F={procname:"find.find",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    L1: do {
      F.line = 1751;
      var i_14340235 = null;
      F.line = 184;
      var i_14345702 = 0;
      F.line = 185;
      var l_14345703 = (a_14340219 != null ? a_14340219.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14345702 < l_14345703)) break L3;
            F.line = 1751;
            i_14340235 = a_14340219[chckIndx(i_14345702, 0, (a_14340219 != null ? a_14340219.length : 0)+0-1)-0];
            if ((i_14340235 == item_14340220)) {
            F.line = 1752;
            break BeforeRet;
            }
            
            F.line = 1753;
            result_14340221 = addInt(result_14340221, 1);
            F.line = 188;
            i_14345702 = addInt(i_14345702, 1);
            if (!(((a_14340219 != null ? a_14340219.length : 0) == l_14345703))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 1754;
    result_14340221 = -1;
  } while (false);
  framePtr = F.prev;

  return result_14340221;

}
function emit_14330261(self_14330266, self_14330266_Idx, data_14330267) {
  var F={procname:"emit.emit",prev:framePtr,filename:"events.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 24;
      var to_remove_14340214 = null;
      F.line = 184;
      var i_14345681 = 0;
      F.line = 185;
      var l_14345682 = (self_14330266[self_14330266_Idx].toRemove != null ? self_14330266[self_14330266_Idx].toRemove.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14345681 < l_14345682)) break L3;
            F.line = 24;
            to_remove_14340214 = self_14330266[self_14330266_Idx].toRemove[chckIndx(i_14345681, 0, (self_14330266[self_14330266_Idx].toRemove != null ? self_14330266[self_14330266_Idx].toRemove.length : 0)+0-1)-0];
            F.line = 25;
            delete_14342165(self_14330266[self_14330266_Idx], "listeners", chckRange(find_14340215(self_14330266[self_14330266_Idx].listeners, to_remove_14340214), 0, 2147483647));
            F.line = 188;
            i_14345681 = addInt(i_14345681, 1);
            if (!(((self_14330266[self_14330266_Idx].toRemove != null ? self_14330266[self_14330266_Idx].toRemove.length : 0) == l_14345682))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 26;
    self_14330266[self_14330266_Idx].toRemove = nimCopy(null, [], NTI14345429);
    L4: do {
      F.line = 28;
      var to_add_14345443 = null;
      F.line = 184;
      var i_14345685 = 0;
      F.line = 185;
      var l_14345686 = (self_14330266[self_14330266_Idx].toAdd != null ? self_14330266[self_14330266_Idx].toAdd.length : 0);
      L5: do {
        F.line = 186;
          L6: while (true) {
          if (!(i_14345685 < l_14345686)) break L6;
            F.line = 28;
            to_add_14345443 = self_14330266[self_14330266_Idx].toAdd[chckIndx(i_14345685, 0, (self_14330266[self_14330266_Idx].toAdd != null ? self_14330266[self_14330266_Idx].toAdd.length : 0)+0-1)-0];
            F.line = 29;
            if (self_14330266[self_14330266_Idx].listeners != null) { self_14330266[self_14330266_Idx].listeners.push(to_add_14345443); } else { self_14330266[self_14330266_Idx].listeners = [to_add_14345443]; };
            F.line = 188;
            i_14345685 = addInt(i_14345685, 1);
            if (!(((self_14330266[self_14330266_Idx].toAdd != null ? self_14330266[self_14330266_Idx].toAdd.length : 0) == l_14345686))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 30;
    self_14330266[self_14330266_Idx].toAdd = nimCopy(null, [], NTI14345606);
    L7: do {
      F.line = 32;
      var listener_14345620 = null;
      F.line = 184;
      var i_14345689 = 0;
      F.line = 185;
      var l_14345690 = (self_14330266[self_14330266_Idx].listeners != null ? self_14330266[self_14330266_Idx].listeners.length : 0);
      L8: do {
        F.line = 186;
          L9: while (true) {
          if (!(i_14345689 < l_14345690)) break L9;
            F.line = 32;
            listener_14345620 = self_14330266[self_14330266_Idx].listeners[chckIndx(i_14345689, 0, (self_14330266[self_14330266_Idx].listeners != null ? self_14330266[self_14330266_Idx].listeners.length : 0)+0-1)-0];
            F.line = 33;
            listener_14345620(data_14330267);
            F.line = 188;
            i_14345689 = addInt(i_14345689, 1);
            if (!(((self_14330266[self_14330266_Idx].listeners != null ? self_14330266[self_14330266_Idx].listeners.length : 0) == l_14345690))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function dispatchKeyDown(key_code_14330220, key_14330221) {
  var F={procname:"main.dispatchKeyDown",prev:framePtr,filename:"main.nim",line:0};
  framePtr = F;
    F.line = 78;
    emit_14330261(key_down_emitter_12093959, 0, {key: nimCopy(null, key_14330221, NTI112), keyCode: key_code_14330220});
  framePtr = F.prev;

  
}
function add_tag_10835911(element_10835913, tag_10835914) {
  var F={procname:"tag.addTag",prev:framePtr,filename:"tag.nim",line:0};
  framePtr = F;
    F.line = 14;
    incl_10835974(tag_set_10730658(tag_10835914), element_10835913);
  framePtr = F.prev;

  
}
function set_parent_on_children_14320019(elem_14320022) {
  var F={procname:"main.setParentOnChildren",prev:framePtr,filename:"main.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 21;
      var child_14320036 = null;
      F.line = 184;
      var i_14355147 = 0;
      F.line = 185;
      var l_14355148 = (elem_14320022.children != null ? elem_14320022.children.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14355147 < l_14355148)) break L3;
            F.line = 21;
            child_14320036 = elem_14320022.children[chckIndx(i_14355147, 0, (elem_14320022.children != null ? elem_14320022.children.length : 0)+0-1)-0];
            F.line = 22;
            nimCopy(child_14320036.parent, some_11000282(elem_14320022), NTI10270035);
            F.line = 23;
            set_parent_on_children_14320019(child_14320036);
            F.line = 188;
            i_14355147 = addInt(i_14355147, 1);
            if (!(((elem_14320022.children != null ? elem_14320022.children.length : 0) == l_14355148))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function is_some_11010525(self_11010529) {
  var result_11010530 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_11010530 = !((self_11010529.val == null));
  framePtr = F.prev;

  return result_11010530;

}
function is_none_11010703(self_11010707) {
  var result_11010708 = false;

  var F={procname:"isNone.isNone",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 158;
    result_11010708 = (self_11010707.val == null);
  framePtr = F.prev;

  return result_11010708;

}
function get_11010680(self_11010685) {
  var result_11010687 = null;
  var result_11010687_Idx = 0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (is_none_11010703(self_11010685)) {
    F.line = 215;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI920204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    F.line = 216;
    result_11010687 = self_11010685; result_11010687_Idx = "val";
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return [result_11010687, result_11010687_Idx];

}
function dispatch_on_rooted_11010507(self_11010509) {
    var Tmp1;

  var F={procname:"element.dispatchOnRooted",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    if (is_some_11010525(self_11010509.onRooted)) {
    F.line = 155;
    (Tmp1 = get_11010680(self_11010509.onRooted), Tmp1)[0][Tmp1[1]](self_11010509);
    }
    
    L2: do {
      F.line = 156;
      var child_11015057 = null;
      F.line = 184;
      var i_14355151 = 0;
      F.line = 185;
      var l_14355152 = (self_11010509.children != null ? self_11010509.children.length : 0);
      L3: do {
        F.line = 186;
          L4: while (true) {
          if (!(i_14355151 < l_14355152)) break L4;
            F.line = 156;
            child_11015057 = self_11010509.children[chckIndx(i_14355151, 0, (self_11010509.children != null ? self_11010509.children.length : 0)+0-1)-0];
            F.line = 157;
            dispatch_on_rooted_11010507(child_11015057);
            F.line = 188;
            i_14355151 = addInt(i_14355151, 1);
            if (!(((self_11010509.children != null ? self_11010509.children.length : 0) == l_14355152))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function invalidate_layout_10960696(self_10960698) {
  var F={procname:"element.invalidateLayout",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 106;
    invalidate_measure_10960574(self_10960698);
  framePtr = F.prev;

  
}
function delete_12215253(x_12215258, x_12215258_Idx, i_12215259) {
  var F={procname:"delete.delete",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1254;
    x_12215258[x_12215258_Idx].splice(i_12215259, 1);
  framePtr = F.prev;

  
}
function find_12215215(a_12215219, item_12215220) {
  var result_12215221 = 0;

  var F={procname:"find.find",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    L1: do {
      F.line = 1751;
      var i_12215228 = null;
      F.line = 184;
      var i_14355178 = 0;
      F.line = 185;
      var l_14355179 = (a_12215219 != null ? a_12215219.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14355178 < l_14355179)) break L3;
            F.line = 1751;
            i_12215228 = a_12215219[chckIndx(i_14355178, 0, (a_12215219 != null ? a_12215219.length : 0)+0-1)-0];
            if ((i_12215228 == item_12215220)) {
            F.line = 1752;
            break BeforeRet;
            }
            
            F.line = 1753;
            result_12215221 = addInt(result_12215221, 1);
            F.line = 188;
            i_14355178 = addInt(i_14355178, 1);
            if (!(((a_12215219 != null ? a_12215219.length : 0) == l_14355179))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 1754;
    result_12215221 = -1;
  } while (false);
  framePtr = F.prev;

  return result_12215221;

}
function emit_12206609(self_12206614, self_12206614_Idx, data_12206615) {
  var F={procname:"emit.emit",prev:framePtr,filename:"events.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 24;
      var to_remove_12215214 = null;
      F.line = 184;
      var i_14355157 = 0;
      F.line = 185;
      var l_14355158 = (self_12206614[self_12206614_Idx].toRemove != null ? self_12206614[self_12206614_Idx].toRemove.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14355157 < l_14355158)) break L3;
            F.line = 24;
            to_remove_12215214 = self_12206614[self_12206614_Idx].toRemove[chckIndx(i_14355157, 0, (self_12206614[self_12206614_Idx].toRemove != null ? self_12206614[self_12206614_Idx].toRemove.length : 0)+0-1)-0];
            F.line = 25;
            delete_12215253(self_12206614[self_12206614_Idx], "listeners", chckRange(find_12215215(self_12206614[self_12206614_Idx].listeners, to_remove_12215214), 0, 2147483647));
            F.line = 188;
            i_14355157 = addInt(i_14355157, 1);
            if (!(((self_12206614[self_12206614_Idx].toRemove != null ? self_12206614[self_12206614_Idx].toRemove.length : 0) == l_14355158))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 26;
    self_12206614[self_12206614_Idx].toRemove = nimCopy(null, [], NTI12220429);
    L4: do {
      F.line = 28;
      var to_add_12220436 = null;
      F.line = 184;
      var i_14355161 = 0;
      F.line = 185;
      var l_14355162 = (self_12206614[self_12206614_Idx].toAdd != null ? self_12206614[self_12206614_Idx].toAdd.length : 0);
      L5: do {
        F.line = 186;
          L6: while (true) {
          if (!(i_14355161 < l_14355162)) break L6;
            F.line = 28;
            to_add_12220436 = self_12206614[self_12206614_Idx].toAdd[chckIndx(i_14355161, 0, (self_12206614[self_12206614_Idx].toAdd != null ? self_12206614[self_12206614_Idx].toAdd.length : 0)+0-1)-0];
            F.line = 29;
            if (self_12206614[self_12206614_Idx].listeners != null) { self_12206614[self_12206614_Idx].listeners.push(to_add_12220436); } else { self_12206614[self_12206614_Idx].listeners = [to_add_12220436]; };
            F.line = 188;
            i_14355161 = addInt(i_14355161, 1);
            if (!(((self_12206614[self_12206614_Idx].toAdd != null ? self_12206614[self_12206614_Idx].toAdd.length : 0) == l_14355162))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 30;
    self_12206614[self_12206614_Idx].toAdd = nimCopy(null, [], NTI12220458);
    L7: do {
      F.line = 32;
      var listener_12220465 = null;
      F.line = 184;
      var i_14355165 = 0;
      F.line = 185;
      var l_14355166 = (self_12206614[self_12206614_Idx].listeners != null ? self_12206614[self_12206614_Idx].listeners.length : 0);
      L8: do {
        F.line = 186;
          L9: while (true) {
          if (!(i_14355165 < l_14355166)) break L9;
            F.line = 32;
            listener_12220465 = self_12206614[self_12206614_Idx].listeners[chckIndx(i_14355165, 0, (self_12206614[self_12206614_Idx].listeners != null ? self_12206614[self_12206614_Idx].listeners.length : 0)+0-1)-0];
            F.line = 33;
            listener_12220465(data_12206615);
            F.line = 188;
            i_14355165 = addInt(i_14355165, 1);
            if (!(((self_12206614[self_12206614_Idx].listeners != null ? self_12206614[self_12206614_Idx].listeners.length : 0) == l_14355166))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function dispatch_update_12206580(dt_12206582) {
  var F={procname:"update_manager.dispatchUpdate",prev:framePtr,filename:"update_manager.nim",line:0};
  framePtr = F;
    F.line = 15;
    emit_12206609(update_manager_listeners_12206172, 0, dt_12206582);
  framePtr = F.prev;

  
}
function dispatch_update_14345705(dt_14345707) {
  var F={procname:"main.dispatchUpdate",prev:framePtr,filename:"main.nim",line:0};
  framePtr = F;
    F.line = 86;
    dispatch_update_12206580(dt_14345707);
  framePtr = F.prev;

  
}
function raw_get_11710930(t_11710934, key_11710935, hc_11710936, hc_11710936_Idx) {
            var Tmp3;

  var result_11710937 = 0;

  var F={procname:"rawGet.rawGet",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 63;
    hc_11710936[hc_11710936_Idx] = hash_10280010(key_11710935);
    if ((hc_11710936[hc_11710936_Idx] == 0)) {
    F.line = 65;
    hc_11710936[hc_11710936_Idx] = 314159265;
    }
    
    if (((t_11710934.data != null ? t_11710934.data.length : 0) == 0)) {
    F.line = 47;
    result_11710937 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_11720548 = (hc_11710936[hc_11710936_Idx] & (t_11710934.data != null ? (t_11710934.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_10152018(t_11710934.data[chckIndx(h_11720548, 0, (t_11710934.data != null ? t_11710934.data.length : 0)+0-1)-0].Field0)) break L2;
            if (!(t_11710934.data[chckIndx(h_11720548, 0, (t_11710934.data != null ? t_11710934.data.length : 0)+0-1)-0].Field0 == hc_11710936[hc_11710936_Idx])) Tmp3 = false; else {              Tmp3 = (t_11710934.data[chckIndx(h_11720548, 0, (t_11710934.data != null ? t_11710934.data.length : 0)+0-1)-0].Field1 == key_11710935);            }          if (Tmp3) {
          F.line = 55;
          result_11710937 = h_11720548;
          break BeforeRet;
          }
          
          F.line = 56;
          h_11720548 = next_try_10155014(h_11720548, (t_11710934.data != null ? (t_11710934.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_11710937 = subInt(-1, h_11720548);
  } while (false);
  framePtr = F.prev;

  return result_11710937;

}
function has_key_11710907(t_11710912, key_11710913) {
  var result_11710914 = false;

  var F={procname:"hasKey.hasKey",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 395;
    var hc_11710915 = [0];
    F.line = 396;
    result_11710914 = (0 <= raw_get_11710930(t_11710912, key_11710913, hc_11710915, 0));
  framePtr = F.prev;

  return result_11710914;

}
function HEX5BHEX5D_11722286(t_11722292, key_11722293) {
  var result_11722295 = null;
  var result_11722295_Idx = 0;

  var F={procname:"[].[]",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 257;
    var hcHEX60gensym10155424_11722296 = [0];
    F.line = 258;
    var indexHEX60gensym10155425_11722305 = raw_get_11710930(t_11722292, key_11722293, hcHEX60gensym10155424_11722296, 0);
    if ((0 <= indexHEX60gensym10155425_11722305)) {
    F.line = 259;
    result_11722295 = t_11722292.data[chckIndx(indexHEX60gensym10155425_11722305, 0, (t_11722292.data != null ? t_11722292.data.length : 0)+0-1)-0]; result_11722295_Idx = "Field2";
    }
    else {
      F.line = 262;
      raiseException({message: (makeNimstrLit("key not found: ") || []).concat(HEX24_11137220(key_11722293) || []), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    
  framePtr = F.prev;

  return [result_11722295, result_11722295_Idx];

}
function is_some_11735230(self_11735234) {
  var result_11735235 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_11735235 = !((self_11735234.val == null));
  framePtr = F.prev;

  return result_11735235;

}
function is_none_11735501(self_11735505) {
  var result_11735506 = false;

  var F={procname:"isNone.isNone",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 158;
    result_11735506 = (self_11735505.val == null);
  framePtr = F.prev;

  return result_11735506;

}
function get_11735480(self_11735484) {
  var result_11735485 = null;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 171;
    if (is_none_11735501(self_11735484)) {
    F.line = 185;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI920204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    result_11735485 = self_11735484.val;
  framePtr = F.prev;

  return result_11735485;

}
function dispatch_update_11710658(self_11710660, dt_11710661) {
      var Tmp5;

  var result_11710662 = false;

  var F={procname:"behaviors.dispatchUpdate",prev:framePtr,filename:"behaviors.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 17;
    var stop_bubbling_11710663 = false;
    L1: do {
      F.line = 18;
      var child_11710676 = null;
      F.line = 184;
      var i_14355182 = 0;
      F.line = 185;
      var l_14355183 = (self_11710660.children != null ? self_11710660.children.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14355182 < l_14355183)) break L3;
            F.line = 18;
            child_11710676 = self_11710660.children[chckIndx(i_14355182, 0, (self_11710660.children != null ? self_11710660.children.length : 0)+0-1)-0];
            if (dispatch_update_11710658(child_11710676, dt_11710661)) {
            F.line = 20;
            stop_bubbling_11710663 = true;
            }
            
            F.line = 188;
            i_14355182 = addInt(i_14355182, 1);
            if (!(((self_11710660.children != null ? self_11710660.children.length : 0) == l_14355183))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    if ((is_rooted_10907027(self_11710660) && has_key_11710907(behaviors_list_11710629[0], self_11710660))) {
    L4: do {
      F.line = 22;
      var behavior_11735214 = ({update: ({val: null}), added: ({val: null})});
      F.line = 182;
      var colontmp__14355186 = null;
      F.line = 22;
      colontmp__14355186 = (Tmp5 = HEX5BHEX5D_11722286(behaviors_list_11710629[0], self_11710660), Tmp5)[0][Tmp5[1]];
      F.line = 184;
      var i_14355188 = 0;
      F.line = 185;
      var l_14355189 = (colontmp__14355186 != null ? colontmp__14355186.length : 0);
      L6: do {
        F.line = 186;
          L7: while (true) {
          if (!(i_14355188 < l_14355189)) break L7;
            F.line = 22;
            nimCopy(behavior_11735214, colontmp__14355186[chckIndx(i_14355188, 0, (colontmp__14355186 != null ? colontmp__14355186.length : 0)+0-1)-0], NTI11681068);
            if (is_some_11735230(behavior_11735214.update)) {
            F.line = 24;
            get_11735480(behavior_11735214.update)(self_11710660, dt_11710661);
            }
            
            F.line = 188;
            i_14355188 = addInt(i_14355188, 1);
            if (!(((colontmp__14355186 != null ? colontmp__14355186.length : 0) == l_14355189))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    }
    
    F.line = 25;
    result_11710662 = stop_bubbling_11710663;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11710662;

}
function init(size_14345727, scale_14345732, measure_text_function_14350012, render_14355004) {
    function HEX3Aanonymous_14355008(dt_14355010) {
      var F={procname:"init.:anonymous",prev:framePtr,filename:"main.nim",line:0};
      framePtr = F;
        F.line = 111;
        dispatch_update_14345705(dt_14355010);
        F.line = 112;
        dispatch_update_11710658(root_element_14355006, dt_14355010);
      framePtr = F.prev;

      
    }

  var result_14355005 = null;

  var F={procname:"main.init",prev:framePtr,filename:"main.nim",line:0};
  framePtr = F;
    F.line = 94;
    measure_text_11435012[0] = measure_text_function_14350012;
    F.line = 95;
    window_size_14320069[0] = size_14345727;
    F.line = 96;
    var root_element_14355006 = render_14355004();
    F.line = 99;
    add_tag_10835911(root_element_14355006, makeNimstrLit("root"));
    F.line = 100;
    set_parent_on_children_14320019(root_element_14355006);
    F.line = 101;
    dispatch_on_rooted_11010507(root_element_14355006);
    F.line = 102;
    invalidate_layout_10960696(root_element_14355006);
    F.line = 103;
    result_14355005 = {rootElement: root_element_14355006, dispatchPointerMove: dispatchPointerMove, dispatchPointerDown: dispatchPointerPress, dispatchPointerUp: dispatchPointerRelease, dispatchKeyDown: dispatchKeyDown, dispatchWindowSizeChanged: dispatchWindowSizeChanged, dispatchUpdate: HEX3Aanonymous_14355008, scale: scale_14345732, size: size_14345727, render: null};
  framePtr = F.prev;

  return result_14355005;

}
function nim_interop_test() {
  var F={procname:"main.nim_interop_test",prev:framePtr,filename:"main.nim",line:0};
  framePtr = F;
    F.line = 118;
    rawEcho(makeNimstrLit("Hello, world. From nim."));
  framePtr = F.prev;

  
}
function to_float_9981050(x_9981052) {
  var result_9981053 = 0.0;

  var F={procname:"utils.toFloat",prev:framePtr,filename:"utils.nim",line:0};
  framePtr = F;
    F.line = 6;
    result_9981053 = x_9981052;
  framePtr = F.prev;

  return result_9981053;

}
function get_context2d_14357102(c_14357104) {
  var result_14357105 = null;

  var F={procname:"canvas.getContext2d",prev:framePtr,filename:"canvas.nim",line:0};
  framePtr = F;
    F.line = 25;
    result_14357105 = c_14357104.getContext('2d');
  framePtr = F.prev;

  return result_14357105;

}
function add_14436026(self_14436031, self_14436031_Idx, listener_14436033) {
  var F={procname:"add.add",prev:framePtr,filename:"events.nim",line:0};
  framePtr = F;
    F.line = 36;
    if (self_14436031[self_14436031_Idx].toAdd != null) { self_14436031[self_14436031_Idx].toAdd.push(listener_14436033); } else { self_14436031[self_14436031_Idx].toAdd = [listener_14436033]; };
  framePtr = F.prev;

  
}
function is_some_14385595(self_14385599) {
  var result_14385600 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_14385600 = self_14385599.has;
  framePtr = F.prev;

  return result_14385600;

}
function is_none_14385882(self_14385886) {
  var result_14385887 = false;

  var F={procname:"isNone.isNone",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 158;
    result_14385887 = !(self_14385886.has);
  framePtr = F.prev;

  return result_14385887;

}
function get_14385859(self_14385864) {
  var result_14385866 = null;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (is_none_14385882(self_14385864)) {
    F.line = 215;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI920204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    F.line = 216;
    result_14385866 = self_14385864.val;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_14385866;

}
function render_segment_14358080(ctx_14358082, segment_14358083) {
      var Tmp1;
      var Tmp2;
      var Tmp3;
      var Tmp4;
      var Tmp5;
      var Tmp6;
      var Tmp7;
      var Tmp8;

  var F={procname:"canvas_renderer.renderSegment",prev:framePtr,filename:"canvas_renderer.nim",line:0};
  framePtr = F;
    F.line = 8;
    switch (segment_14358083.kind) {
    case 0:
      F.line = 10;
      var Tmp1 = segment_14358083;
      if (ConstSet10[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'to\' is not accessible using discriminant \'kind\' of type \'PathSegment\'")); }
      var Tmp2 = segment_14358083;
      if (ConstSet11[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("\'to\' is not accessible using discriminant \'kind\' of type \'PathSegment\'")); }
      ctx_14358082.moveTo(Tmp1.to.x, Tmp2.to.y);
      break;
    case 1:
      F.line = 12;
      var Tmp3 = segment_14358083;
      if (ConstSet12[Tmp3.kind]===undefined) { raiseFieldError(makeNimstrLit("\'to\' is not accessible using discriminant \'kind\' of type \'PathSegment\'")); }
      var Tmp4 = segment_14358083;
      if (ConstSet13[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'to\' is not accessible using discriminant \'kind\' of type \'PathSegment\'")); }
      ctx_14358082.lineTo(Tmp3.to.x, Tmp4.to.y);
      break;
    case 2:
      F.line = 14;
      var Tmp5 = segment_14358083;
      if (ConstSet14[Tmp5.kind]===undefined) { raiseFieldError(makeNimstrLit("\'controlPoint\' is not accessible using discriminant \'kind\' of type \'PathSegment\'")); }
      var Tmp6 = segment_14358083;
      if (ConstSet15[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'controlPoint\' is not accessible using discriminant \'kind\' of type \'PathSegment\'")); }
      var Tmp7 = segment_14358083;
      if (ConstSet16[Tmp7.kind]===undefined) { raiseFieldError(makeNimstrLit("\'point\' is not accessible using discriminant \'kind\' of type \'PathSegment\'")); }
      var Tmp8 = segment_14358083;
      if (ConstSet17[Tmp8.kind]===undefined) { raiseFieldError(makeNimstrLit("\'point\' is not accessible using discriminant \'kind\' of type \'PathSegment\'")); }
      ctx_14358082.quadraticCurveTo(Tmp5.controlPoint.x, Tmp6.controlPoint.y, Tmp7.point.x, Tmp8.point.y);
      break;
    case 3:
      F.line = 16;
      ctx_14358082.closePath();
      break;
    }
  framePtr = F.prev;

  
}
function is_some_14360954(self_14360958) {
  var result_14360959 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_14360959 = !((self_14360958.val == null));
  framePtr = F.prev;

  return result_14360959;

}
function is_none_14361102(self_14361106) {
  var result_14361107 = false;

  var F={procname:"isNone.isNone",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 158;
    result_14361107 = (self_14361106.val == null);
  framePtr = F.prev;

  return result_14361107;

}
function get_14361081(self_14361085) {
  var result_14361086 = null;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 171;
    if (is_none_14361102(self_14361085)) {
    F.line = 185;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI920204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    result_14361086 = self_14361085.val;
  framePtr = F.prev;

  return result_14361086;

}
function is_some_14360431(self_14360435) {
  var result_14360436 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_14360436 = !((self_14360435.val == null));
  framePtr = F.prev;

  return result_14360436;

}
function is_none_14365101(self_14365105) {
  var result_14365106 = false;

  var F={procname:"isNone.isNone",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 158;
    result_14365106 = (self_14365105.val == null);
  framePtr = F.prev;

  return result_14365106;

}
function get_14365080(self_14365084) {
  var result_14365085 = null;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 171;
    if (is_none_14365101(self_14365084)) {
    F.line = 185;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI920204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    result_14365085 = self_14365084.val;
  framePtr = F.prev;

  return result_14365085;

}
function is_some_10980355(self_10980359) {
  var result_10980360 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_10980360 = self_10980359.has;
  framePtr = F.prev;

  return result_10980360;

}
function is_none_14370104(self_14370108) {
  var result_14370109 = false;

  var F={procname:"isNone.isNone",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 158;
    result_14370109 = !(self_14370108.has);
  framePtr = F.prev;

  return result_14370109;

}
function get_14370081(self_14370086) {
  var result_14370088 = null;
  var result_14370088_Idx = 0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (is_none_14370104(self_14370086)) {
    F.line = 215;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI920204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    F.line = 216;
    result_14370088 = self_14370086; result_14370088_Idx = "val";
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return [result_14370088, result_14370088_Idx];

}
function map_14385354(self_14385359, callback_14385362) {
    var Tmp1;

  var result_14385364 = ({val: 0.0, has: false});

  var F={procname:"map.map",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 243;
    if (is_some_14360954(self_14385359)) {
    Tmp1 = some_9981089(callback_14385362(self_14385359.val));
    }
    else {
    Tmp1 = none_10325226();
    }
    
    nimCopy(result_14385364, Tmp1, NTI9981076);
  framePtr = F.prev;

  return result_14385364;

}
function fill_and_stroke_14360926(ctx_14360928, color_info_14360933, stroke_info_14360938) {
    var Tmp1;
      var Tmp2;
        function HEX3Aanonymous_14385001(x_14385219) {
          var result_14385223 = 0.0;

          var F={procname:"fillAndStroke.:anonymous",prev:framePtr,filename:"canvas_renderer.nim",line:0};
          framePtr = F;
            F.line = 46;
            result_14385223 = x_14385219.width;
          framePtr = F.prev;

          return result_14385223;

        }
    var Tmp3;

  var F={procname:"canvas_renderer.fillAndStroke",prev:framePtr,filename:"canvas_renderer.nim",line:0};
  framePtr = F;
    if (is_some_14360954(stroke_info_14360938)) {
    F.line = 38;
    ctx_14360928.lineWidth = get_14361081(stroke_info_14360938).width;
    }
    else {
      F.line = 40;
      ctx_14360928.lineWidth = 0.0;
    }
    
    if (is_some_14360431(color_info_14360933)) {
    F.line = 42;
    var ci_14370015 = get_14365080(color_info_14360933);
    if (is_some_10980355(ci_14370015.fill)) {
    F.line = 44;
    ctx_14360928.fillStyle = toJSStr((Tmp1 = get_14370081(ci_14370015.fill), Tmp1)[0][Tmp1[1]]);
    F.line = 45;
    ctx_14360928.fill();
    }
    
      if (!is_some_10980355(ci_14370015.stroke)) Tmp2 = false; else {        Tmp2 = (0.0 < get_10325316(map_14385354(stroke_info_14360938, HEX3Aanonymous_14385001), 0.0));      }    if (Tmp2) {
    F.line = 47;
    ctx_14360928.strokeStyle = toJSStr((Tmp3 = get_14370081(ci_14370015.stroke), Tmp3)[0][Tmp3[1]]);
    F.line = 48;
    ctx_14360928.stroke();
    }
    
    }
    
  framePtr = F.prev;

  
}
function get_10980333(self_10980337, otherwise_10980338) {
    var Tmp1;

  var result_10980339 = null;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 189;
    if (is_some_10980355(self_10980337)) {
    Tmp1 = self_10980337.val;
    }
    else {
    Tmp1 = otherwise_10980338;
    }
    
    result_10980339 = nimCopy(null, Tmp1, NTI112);
  framePtr = F.prev;

  return result_10980339;

}
function some_10567184(val_10567187) {
  var result_10567189 = ({val: null, has: false});

  var F={procname:"some.some",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 121;
    result_10567189.has = true;
    F.line = 122;
    result_10567189.val = nimCopy(null, val_10567187, NTI112);
  framePtr = F.prev;

  return result_10567189;

}
function none_10980243() {
  var result_10980261 = ({val: null, has: false});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  framePtr = F.prev;

  return result_10980261;

}
function map_14360405(self_14360410, callback_14360413) {
    var Tmp1;

  var result_14360415 = ({val: null, has: false});

  var F={procname:"map.map",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 243;
    if (is_some_14360431(self_14360410)) {
    Tmp1 = some_10567184(callback_14360413(self_14360410.val));
    }
    else {
    Tmp1 = none_10980243();
    }
    
    nimCopy(result_14360415, Tmp1, NTI10252086);
  framePtr = F.prev;

  return result_14360415;

}
function render_text_14358105(ctx_14358107, color_info_14358112, text_info_14358113) {
    function HEX3Aanonymous_14360001(x_14360219) {
      var result_14360223 = null;

      var F={procname:"renderText.:anonymous",prev:framePtr,filename:"canvas_renderer.nim",line:0};
      framePtr = F;
        F.line = 19;
        result_14360223 = nimCopy(null, get_10980333(x_14360219.fill, makeNimstrLit("red")), NTI112);
      framePtr = F.prev;

      return result_14360223;

    }

  var F={procname:"canvas_renderer.renderText",prev:framePtr,filename:"canvas_renderer.nim",line:0};
  framePtr = F;
    F.line = 19;
    ctx_14358107.fillStyle = toJSStr(get_10980333(map_14360405(color_info_14358112, HEX3Aanonymous_14360001), makeNimstrLit("brown")));
    F.line = 20;
    ctx_14358107.textAlign = toJSStr(text_info_14358113.alignment);
    F.line = 21;
    ctx_14358107.textBaseline = toJSStr(text_info_14358113.textBaseline);
    F.line = 22;
    ctx_14358107.font = toJSStr((cstrToNimstr((text_info_14358113.fontSize)+"") || []).concat(makeNimstrLit("px ") || [],text_info_14358113.font || []));
    F.line = 23;
    ctx_14358107.fillText(toJSStr(text_info_14358113.text), text_info_14358113.pos.x, text_info_14358113.pos.y);
  framePtr = F.prev;

  
}
function render_circle_14360839(ctx_14360841, center_14360846, radius_14360847) {
  var F={procname:"canvas_renderer.renderCircle",prev:framePtr,filename:"canvas_renderer.nim",line:0};
  framePtr = F;
    F.line = 26;
    ctx_14360841.beginPath();
    F.line = 27;
    ctx_14360841.arc((center_14360846.x + radius_14360847), (center_14360846.y + radius_14360847), radius_14360847, 0.0, 6.2831853071795862e+00, false);
  framePtr = F.prev;

  
}
function render_ellipse_14360907(ctx_14360909, info_14360910) {
  var F={procname:"canvas_renderer.renderEllipse",prev:framePtr,filename:"canvas_renderer.nim",line:0};
  framePtr = F;
    F.line = 30;
    ctx_14360909.beginPath();
    F.line = 32;
    var c_14360911 = info_14360910.center;
    F.line = 33;
    var r_14360912 = info_14360910.radius;
    F.line = 34;
    ctx_14360909.ellipse(c_14360911.x, c_14360911.y, r_14360912.x, r_14360912.y, info_14360910.rotation, info_14360910.startAngle, info_14360910.endAngle, false);
  framePtr = F.prev;

  
}
function get_14400286(self_14400291) {
  var result_14400293 = null;
  var result_14400293_Idx = 0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (is_none_14361102(self_14400291)) {
    F.line = 215;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI920204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    F.line = 216;
    result_14400293 = self_14400291; result_14400293_Idx = "val";
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return [result_14400293, result_14400293_Idx];

}
function get_14405096(self_14405101) {
  var result_14405103 = null;
  var result_14405103_Idx = 0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (is_none_14365101(self_14405101)) {
    F.line = 215;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI920204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    F.line = 216;
    result_14405103 = self_14405101; result_14405103_Idx = "val";
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return [result_14405103, result_14405103_Idx];

}
function left_9864295(self_9864299) {
  var result_9864300 = 0.0;

  var F={procname:"left.left",prev:framePtr,filename:"rect.nim",line:0};
  framePtr = F;
    F.line = 46;
    result_9864300 = x_9864321(self_9864299);
  framePtr = F.prev;

  return result_9864300;

}
function top_9864518(self_9864522) {
  var result_9864523 = 0.0;

  var F={procname:"top.top",prev:framePtr,filename:"rect.nim",line:0};
  framePtr = F;
    F.line = 50;
    result_9864523 = y_9864544(self_9864522);
  framePtr = F.prev;

  return result_9864523;

}
function render_primitive_14385575(ctx_14385577, p_14385578, offset_14385579) {
        var Tmp2;
      var Tmp5;
      var Tmp6;
      var Tmp7;
      var Tmp8;
      var Tmp9;
      var Tmp10;
      var Tmp11;
      var Tmp12;

  var F={procname:"canvas_renderer.renderPrimitive",prev:framePtr,filename:"canvas_renderer.nim",line:0};
  framePtr = F;
    if (is_some_14385595(p_14385578.transform)) {
    F.line = 52;
    var t_14390029 = nimCopy(null, get_14385859(p_14385578.transform), NTI10255025);
    F.line = 53;
    var wp_14390030 = offset_14385579;
    F.line = 54;
    var size_14390031 = p_14385578.bounds.size;
    F.line = 55;
    var x_pos_14390050 = (wp_14390030.x + (size_14390031.x / 2.0000000000000000e+00));
    F.line = 56;
    var y_pos_14390069 = (wp_14390030.y + (size_14390031.y / 2.0000000000000000e+00));
    F.line = 57;
    ctx_14385577.translate(x_pos_14390050, y_pos_14390069);
    F.line = 58;
    ctx_14385577.rotate(t_14390029.rotation);
    F.line = 59;
    ctx_14385577.translate(-(x_pos_14390050), -(y_pos_14390069));
    F.line = 60;
    ctx_14385577.translate(t_14390029.translation.x, t_14390029.translation.y);
    F.line = 61;
    ctx_14385577.scale(t_14390029.scale.x, t_14390029.scale.y);
    }
    
    F.line = 63;
    switch (p_14385578.kind) {
    case 0:
      break;
    case 2:
      F.line = 67;
      ctx_14385577.beginPath();
      L1: do {
        F.line = 68;
        var segment_14400214 = null;
        F.line = 182;
        var colontmp__14475179 = null;
        F.line = 68;
        var Tmp2 = p_14385578;
        if (ConstSet9[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("\'segments\' is not accessible using discriminant \'kind\' of type \'Primitive\'")); }
        colontmp__14475179 = Tmp2.segments;
        F.line = 184;
        var i_14475181 = 0;
        F.line = 185;
        var l_14475182 = (colontmp__14475179 != null ? colontmp__14475179.length : 0);
        L3: do {
          F.line = 186;
            L4: while (true) {
            if (!(i_14475181 < l_14475182)) break L4;
              F.line = 68;
              segment_14400214 = colontmp__14475179[chckIndx(i_14475181, 0, (colontmp__14475179 != null ? colontmp__14475179.length : 0)+0-1)-0];
              F.line = 69;
              render_segment_14358080(ctx_14385577, segment_14400214);
              F.line = 188;
              i_14475181 = addInt(i_14475181, 1);
              if (!(((colontmp__14475179 != null ? colontmp__14475179.length : 0) == l_14475182))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      F.line = 70;
      fill_and_stroke_14360926(ctx_14385577, p_14385578.colorInfo, p_14385578.strokeInfo);
      break;
    case 1:
      F.line = 72;
      var Tmp5 = p_14385578;
      if (ConstSet18[Tmp5.kind]===undefined) { raiseFieldError(makeNimstrLit("\'textInfo\' is not accessible using discriminant \'kind\' of type \'Primitive\'")); }
      render_text_14358105(ctx_14385577, p_14385578.colorInfo, Tmp5.textInfo);
      break;
    case 3:
      F.line = 74;
      var Tmp6 = p_14385578;
      if (ConstSet19[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'circleInfo\' is not accessible using discriminant \'kind\' of type \'Primitive\'")); }
      var info_14400218 = nimCopy(null, Tmp6.circleInfo, NTI10255039);
      F.line = 75;
      render_circle_14360839(ctx_14385577, info_14400218.center, info_14400218.radius);
      F.line = 76;
      fill_and_stroke_14360926(ctx_14385577, p_14385578.colorInfo, p_14385578.strokeInfo);
      break;
    case 4:
      F.line = 78;
      var Tmp7 = p_14385578;
      if (ConstSet20[Tmp7.kind]===undefined) { raiseFieldError(makeNimstrLit("\'ellipseInfo\' is not accessible using discriminant \'kind\' of type \'Primitive\'")); }
      var info_14400220 = nimCopy(null, Tmp7.ellipseInfo, NTI10255041);
      F.line = 79;
      render_ellipse_14360907(ctx_14385577, info_14400220);
      F.line = 80;
      fill_and_stroke_14360926(ctx_14385577, p_14385578.colorInfo, p_14385578.strokeInfo);
      break;
    case 5:
      if (is_some_14360954(p_14385578.strokeInfo)) {
      F.line = 83;
      ctx_14385577.lineWidth = (Tmp8 = get_14400286(p_14385578.strokeInfo), Tmp8)[0][Tmp8[1]].width;
      }
      
      if (is_some_14360431(p_14385578.colorInfo)) {
      F.line = 85;
      var Tmp9 = p_14385578;
      if (ConstSet21[Tmp9.kind]===undefined) { raiseFieldError(makeNimstrLit("\'rectangleInfo\' is not accessible using discriminant \'kind\' of type \'Primitive\'")); }
      var b_14405050 = Tmp9.rectangleInfo.bounds;
      F.line = 86;
      var ci_14410029 = (Tmp10 = get_14405096(p_14385578.colorInfo), Tmp10)[0][Tmp10[1]];
      if (is_some_10980355(ci_14410029.fill)) {
      F.line = 88;
      ctx_14385577.fillStyle = toJSStr((Tmp11 = get_14370081(ci_14410029.fill), Tmp11)[0][Tmp11[1]]);
      F.line = 89;
      ctx_14385577.fillRect(left_9864295(b_14405050), top_9864518(b_14405050), width_9864437(b_14405050), height_9864660(b_14405050));
      }
      
      if (is_some_10980355(ci_14410029.stroke)) {
      F.line = 91;
      ctx_14385577.strokeStyle = toJSStr((Tmp12 = get_14370081(ci_14410029.stroke), Tmp12)[0][Tmp12[1]]);
      F.line = 92;
      ctx_14385577.strokeRect(left_9864295(b_14405050), top_9864518(b_14405050), width_9864437(b_14405050), height_9864660(b_14405050));
      }
      
      }
      
      break;
    }
  framePtr = F.prev;

  
}
function get_14420458(self_14420462) {
  var result_14420463 = null;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 171;
    if (is_none_10475324(self_14420462)) {
    F.line = 185;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI920204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    result_14420463 = self_14420462.val;
  framePtr = F.prev;

  return result_14420463;

}
function render_14410869(ctx_14410871, primitive_14410872) {
    function render_inner_14410873(primitive_14410875, offset_14410880) {
      var F={procname:"render.renderInner",prev:framePtr,filename:"canvas_renderer.nim",line:0};
      framePtr = F;
        F.line = 97;
        ctx_14410871.save();
        F.line = 98;
        render_primitive_14385575(ctx_14410871, primitive_14410875, offset_14410880);
        L1: do {
          F.line = 99;
          var p_14420214 = null;
          F.line = 184;
          var i_14475175 = 0;
          F.line = 185;
          var l_14475176 = (primitive_14410875.children != null ? primitive_14410875.children.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_14475175 < l_14475176)) break L3;
                F.line = 99;
                p_14420214 = primitive_14410875.children[chckIndx(i_14475175, 0, (primitive_14410875.children != null ? primitive_14410875.children.length : 0)+0-1)-0];
                if (p_14420214.clipToBounds) {
                F.line = 101;
                ctx_14410871.beginPath();
                F.line = 102;
                var cb_14425020 = get_14420458(to_option_11156251(p_14420214.bounds));
                F.line = 103;
                ctx_14410871.rect(cb_14425020.pos.x, cb_14425020.pos.y, cb_14425020.size.x, cb_14425020.size.y);
                F.line = 104;
                ctx_14410871.clip();
                }
                
                F.line = 105;
                render_inner_14410873(p_14420214, add_10330232(offset_14410880, p_14420214.bounds.pos));
                F.line = 188;
                i_14475175 = addInt(i_14475175, 1);
                if (!(((primitive_14410875.children != null ? primitive_14410875.children.length : 0) == l_14475176))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
        F.line = 106;
        ctx_14410871.restore();
      framePtr = F.prev;

      
    }

  var F={procname:"canvas_renderer.render",prev:framePtr,filename:"canvas_renderer.nim",line:0};
  framePtr = F;
    F.line = 108;
    render_inner_14410873(primitive_14410872, vec2_10255375(0.0));
  framePtr = F.prev;

  
}
function render_primitives_14431027(canvas_context_14431029, primitive_14431030, size_14431035) {
  var F={procname:"midio_ui_canvas.renderPrimitives",prev:framePtr,filename:"midio_ui_canvas.nim",line:0};
  framePtr = F;
    F.line = 8;
    canvas_context_14431029.clearRect(0.0, 0.0, size_14431035.x, size_14431035.y);
    F.line = 9;
    render_14410869(canvas_context_14431029, primitive_14431030);
  framePtr = F.prev;

  
}
function start_app_14431051(render_14435005, canvas_element_id_14435006, native_container_id_14435007) {
    function HEX3Aanonymous_14435822(capturer_14435825) {
      var F={procname:"startApp.:anonymous",prev:framePtr,filename:"midio_ui_canvas.nim",line:0};
      framePtr = F;
        F.line = 45;
        native_container_14435009.style.pointerEvents = "none";
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_14436805(capturer_14436808) {
      var F={procname:"startApp.:anonymous",prev:framePtr,filename:"midio_ui_canvas.nim",line:0};
      framePtr = F;
        F.line = 50;
        native_container_14435009.style.pointerEvents = "auto";
      framePtr = F.prev;

      
    }
    function measure_text_14435070(text_14435072, font_size_14435073, font_14435074, baseline_14435075) {
      var result_14435080 = null;

      var F={procname:"startApp.measureText",prev:framePtr,filename:"midio_ui_canvas.nim",line:0};
      framePtr = F;
        F.line = 37;
        canvas_context_14435068.textBaseline = toJSStr(baseline_14435075);
        F.line = 38;
        canvas_context_14435068.font = toJSStr((cstrToNimstr((font_size_14435073)+"") || []).concat(makeNimstrLit("px ") || [],font_14435074 || []));
        F.line = 39;
        var measured_14435167 = canvas_context_14435068.measureText(toJSStr(text_14435072));
        F.line = 40;
        result_14435080 = vec2_9863092(measured_14435167.width, font_size_14435073);
      framePtr = F.prev;

      return result_14435080;

    }
    function HEX3Aanonymous_14437126(event_14437128) {
      var F={procname:"startApp.:anonymous",prev:framePtr,filename:"midio_ui_canvas.nim",line:0};
      framePtr = F;
        F.line = 66;
        var ev_14437129 = event_14437128;
        F.line = 67;
        var canvas_14437143 = document.getElementById("rootCanvas");
        F.line = 68;
        var bounds_14437144 = canvas_14437143.getBoundingClientRect();
        F.line = 69;
        context_14437025.dispatchPointerDown((to_float_9981050(ev_14437129.clientX) - bounds_14437144.left), (to_float_9981050(ev_14437129.clientY) - bounds_14437144.top));
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_14437242(event_14437244) {
      var F={procname:"startApp.:anonymous",prev:framePtr,filename:"midio_ui_canvas.nim",line:0};
      framePtr = F;
        F.line = 72;
        var ev_14437245 = event_14437244;
        F.line = 73;
        var canvas_14437247 = document.getElementById("rootCanvas");
        F.line = 74;
        var bounds_14437248 = canvas_14437247.getBoundingClientRect();
        F.line = 75;
        context_14437025.dispatchPointerUp((to_float_9981050(ev_14437245.clientX) - bounds_14437248.left), (to_float_9981050(ev_14437245.clientY) - bounds_14437248.top));
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_14437331(event_14437333) {
      var F={procname:"startApp.:anonymous",prev:framePtr,filename:"midio_ui_canvas.nim",line:0};
      framePtr = F;
        F.line = 78;
        var ev_14437334 = event_14437333;
        F.line = 79;
        var canvas_14437336 = document.getElementById("rootCanvas");
        F.line = 80;
        var bounds_14437337 = canvas_14437336.getBoundingClientRect();
        F.line = 81;
        context_14437025.dispatchPointerMove((to_float_9981050(ev_14437334.clientX) - bounds_14437337.left), (to_float_9981050(ev_14437334.clientY) - bounds_14437337.top));
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_14437420(event_14437422) {
      var F={procname:"startApp.:anonymous",prev:framePtr,filename:"midio_ui_canvas.nim",line:0};
      framePtr = F;
        F.line = 84;
        var ev_14437423 = event_14437422;
        F.line = 85;
        context_14437025.dispatchKeyDown(ev_14437423.keyCode, cstrToNimstr(ev_14437423.key));
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_14437540(event_14437542) {
      var F={procname:"startApp.:anonymous",prev:framePtr,filename:"midio_ui_canvas.nim",line:0};
      framePtr = F;
        F.line = 88;
        var ev_14437543 = event_14437542;
        F.line = 89;
        size_14435020 = vec2_9863092(window.innerWidth, window.innerHeight);
        F.line = 90;
        canvas_14435012.width = size_14435020.x;
        F.line = 91;
        canvas_14435012.height = size_14435020.y;
        F.line = 92;
        context_14437025.dispatchWindowSizeChanged(size_14435020);
        F.line = 93;
        canvas_context_14435068.scale(scale_14435032, scale_14435032);
        F.line = 94;
        invalidate_layout_10960696(context_14437025.rootElement);
      framePtr = F.prev;

      
    }
function render_to_js_canvas_14437026(dt_14437028) {
  var F={procname:"startApp.renderToJsCanvas",prev:framePtr,filename:"midio_ui_canvas.nim",line:0};
  framePtr = F;
    F.line = 61;
    var primitive_14437042 = render(context_14437025, dt_14437028);
    if (is_some_11655154(primitive_14437042)) {
    F.line = 63;
    render_primitives_14431027(canvas_context_14435068, get_11675059(primitive_14437042), size_14435020);
    }
    
  framePtr = F.prev;

  
}
    function frame_14437582(time_14437584) {
      var F={procname:"startApp.frame",prev:framePtr,filename:"midio_ui_canvas.nim",line:0};
      framePtr = F;
        F.line = 100;
        var dt_14437611 = (time_14437584 - last_time_14437581);
        F.line = 101;
        last_time_14437581 = time_14437584;
        F.line = 103;
        context_14437025.dispatchUpdate(dt_14437611);
        F.line = 104;
        render_to_js_canvas_14437026(dt_14437611);
        F.line = 106;
        window.requestAnimationFrame(frame_14437582);
      framePtr = F.prev;

      
    }

  var F={procname:"midio_ui_canvas.startApp",prev:framePtr,filename:"midio_ui_canvas.nim",line:0};
  framePtr = F;
    F.line = 15;
    var native_container_14435009 = document.getElementById(toJSStr(native_container_id_14435007));
    F.line = 16;
    var canvas_elem_14435011 = document.getElementById(toJSStr(canvas_element_id_14435006));
    F.line = 18;
    var canvas_14435012 = canvas_elem_14435011;
    F.line = 21;
    var size_14435020 = vec2_9863092(window.innerWidth, window.innerHeight);
    F.line = 22;
    var scale_14435032 = (window.devicePixelRatio * 2.0000000000000000e+00);
    F.line = 24;
    canvas_14435012.width = size_14435020.x;
    F.line = 25;
    canvas_14435012.height = size_14435020.y;
    F.line = 27;
    var element_width_14435033 = canvas_elem_14435011.offsetWidth;
    F.line = 28;
    var element_height_14435034 = canvas_elem_14435011.offsetHeight;
    F.line = 29;
    var canvas_pixel_scale_14435067 = vec2_9863092(((size_14435020.x / to_float_9981050(element_width_14435033)) * 2.0000000000000000e+00), ((size_14435020.y / to_float_9981050(element_height_14435034)) * 2.0000000000000000e+00));
    F.line = 32;
    var canvas_context_14435068 = get_context2d_14357102(canvas_14435012);
    F.line = 33;
    canvas_context_14435068.scale(scale_14435032, scale_14435032);
    F.line = 43;
    add_14436026(pointer_captured_emitter_12093848, 0, HEX3Aanonymous_14435822);
    F.line = 48;
    add_14436026(pointer_capture_released_emitter_12093854, 0, HEX3Aanonymous_14436805);
    F.line = 53;
    var context_14437025 = init(size_14435020, vec2_9863092(scale_14435032, scale_14435032), measure_text_14435070, render_14435005);
    F.line = 65;
    window.addEventListener("mousedown", HEX3Aanonymous_14437126, false);
    F.line = 71;
    window.addEventListener("mouseup", HEX3Aanonymous_14437242, false);
    F.line = 77;
    window.addEventListener("mousemove", HEX3Aanonymous_14437331, false);
    F.line = 83;
    window.addEventListener("keydown", HEX3Aanonymous_14437420, false);
    F.line = 87;
    window.addEventListener("resize", HEX3Aanonymous_14437540, false);
    F.line = 96;
    var is_animating_14437580 = true;
    F.line = 98;
    var last_time_14437581 = 0.0;
    F.line = 108;
    frame_14437582(last_time_14437581);
  framePtr = F.prev;

  
}
function to_option_10567177(x_10567180) {
  var result_10567182 = ({val: null, has: false});

  var F={procname:"toOption.toOption",prev:framePtr,filename:"utils.nim",line:0};
  framePtr = F;
    F.line = 5;
    nimCopy(result_10567182, some_10567184(x_10567180), NTI10252086);
  framePtr = F.prev;

  return result_10567182;

}
function gen_guid_10251403() {
  var result_10251405 = 0;

  var F={procname:"guid.genGuid",prev:framePtr,filename:"guid.nim",line:0};
  framePtr = F;
    F.line = 19;
    result_10251405 = counter_10251402[0];
    F.line = 20;
    counter_10251402[0] = addInt(counter_10251402[0], 1);
  framePtr = F.prev;

  return result_10251405;

}
function new_element_11025693(props_11025695, children_11025712, layout_11025785, drawable_11025858, on_rooted_11035070, on_unrooted_11045009) {
  var result_11045010 = null;

  var F={procname:"element.newElement",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 202;
    result_11045010 = {id: gen_guid_10251403(), props: props_11025695, children: nimCopy(null, children_11025712, NTI11025696), layout: nimCopy(null, layout_11025785, NTI10270125), drawable: nimCopy(null, drawable_11025858, NTI10270143), parent: none_11015346(), onRooted: nimCopy(null, on_rooted_11035070, NTI10275009), onUnrooted: nimCopy(null, on_unrooted_11045009, NTI10275009), desiredSize: ({val: null}), bounds: ({val: null}), previousArrange: ({val: null}), previousMeasure: ({val: null}), isArrangeValid: false, isMeasureValid: false, measuring: false, pointerInsideLastUpdate: false};
    L1: do {
      F.line = 212;
      var child_11045033 = null;
      F.line = 184;
      var i_14475211 = 0;
      F.line = 185;
      var l_14475212 = (children_11025712 != null ? children_11025712.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14475211 < l_14475212)) break L3;
            F.line = 212;
            child_11045033 = children_11025712[chckIndx(i_14475211, 0, (children_11025712 != null ? children_11025712.length : 0)+0-1)-0];
            F.line = 213;
            nimCopy(child_11045033.parent, to_option_11000275(result_11045010), NTI10270035);
            F.line = 188;
            i_14475211 = addInt(i_14475211, 1);
            if (!(((children_11025712 != null ? children_11025712.length : 0) == l_14475212))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_11045010;

}
function none_11025720() {
  var result_11025724 = ({val: null});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 140;
    nimCopy(result_11025724, none_11025726(), NTI11025732);
  framePtr = F.prev;

  return result_11025724;

}
function some_11455019(val_11455022) {
  var result_11455024 = ({val: null});

  var F={procname:"some.some",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    if (!(!((val_11455022 == null)))) {
    F.line = 118;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/options.nim(118, 11) `not val.isNil` "));
    }
    
    F.line = 119;
    result_11455024.val = val_11455022;
  framePtr = F.prev;

  return result_11455024;

}
function is_some_11486356(self_11486360) {
  var result_11486361 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_11486361 = self_11486360.has;
  framePtr = F.prev;

  return result_11486361;

}
function get_11486334(self_11486338, otherwise_11486339) {
    var Tmp1;

  var result_11486340 = {Field0: 0.0, Field1: 0.0, Field2: 0.0, Field3: 0.0};

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 189;
    if (is_some_11486356(self_11486338)) {
    Tmp1 = self_11486338.val;
    }
    else {
    Tmp1 = otherwise_11486339;
    }
    
    nimCopy(result_11486340, Tmp1, NTI10255043);
  framePtr = F.prev;

  return result_11486340;

}
function HEX40_10575804(a_10575808) {
  var result_10575810 = null;

  var F={procname:"@.@",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1538;
    result_10575810 = new Array(chckRange((a_10575808 != null ? a_10575808.length : 0), 0, 2147483647)); for (var i=0;i<chckRange((a_10575808 != null ? a_10575808.length : 0), 0, 2147483647);++i) {result_10575810[i]=null;}    L1: do {
      F.line = 1539;
      var i_10575944 = 0;
      F.line = 66;
      var colontmp__14475219 = 0;
      F.line = 1539;
      colontmp__14475219 = subInt((a_10575808 != null ? a_10575808.length : 0), 1);
      F.line = 77;
      var res_14475220 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_14475220 <= colontmp__14475219)) break L3;
            F.line = 1539;
            i_10575944 = res_14475220;
            F.line = 1539;
            result_10575810[chckIndx(i_10575944, 0, (result_10575810 != null ? result_10575810.length : 0)+0-1)-0] = a_10575808[chckIndx(i_10575944, 0, (a_10575808 != null ? a_10575808.length : 0)+0-1)-0];
            F.line = 80;
            res_14475220 = addInt(res_14475220, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_10575810;

}
function create_path_10576016(self_10576018, color_info_10576023, stroke_info_10576028, segments_10576030) {
    var Tmp1;

  var result_10576031 = null;

  var F={procname:"drawing_primitives.createPath",prev:framePtr,filename:"drawing_primitives.nim",line:0};
  framePtr = F;
    F.line = 51;
    result_10576031 = {transform: nimCopy(null, self_10576018.props.transform, NTI10255163), bounds: (Tmp1 = get_10475301(self_10576018.bounds), Tmp1)[0][Tmp1[1]], clipToBounds: get_10471339(self_10576018.props.clipToBounds, false), kind: 2, segments: HEX40_10575804(segments_10576030), colorInfo: nimCopy(null, color_info_10576023, NTI10255125), strokeInfo: nimCopy(null, stroke_info_10576028, NTI10255143), children: [], textInfo: null, circleInfo: ({center: null, radius: 0.0}), ellipseInfo: ({center: null, radius: null, rotation: 0.0, startAngle: 0.0, endAngle: 0.0}), rectangleInfo: ({bounds: null})};
  framePtr = F.prev;

  return result_10576031;

}
function some_10567250(val_10567253) {
  var result_10567255 = ({val: null});

  var F={procname:"some.some",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    if (!(!((val_10567253 == null)))) {
    F.line = 118;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/options.nim(118, 11) `not val.isNil` "));
    }
    
    F.line = 119;
    result_10567255.val = val_10567253;
  framePtr = F.prev;

  return result_10567255;

}
function some_11466166(val_11466169) {
  var result_11466171 = ({val: null});

  var F={procname:"some.some",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    if (!(!((val_11466169 == null)))) {
    F.line = 118;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/options.nim(118, 11) `not val.isNil` "));
    }
    
    F.line = 119;
    result_11466171.val = val_11466169;
  framePtr = F.prev;

  return result_11466171;

}
function move_to_10575511(x_10575513, y_10575514) {
  var result_10575515 = null;

  var F={procname:"drawing_primitives.moveTo",prev:framePtr,filename:"drawing_primitives.nim",line:0};
  framePtr = F;
    F.line = 30;
    result_10575515 = {kind: 0, to: vec2_9863092(x_10575513, y_10575514), controlPoint: null, point: null};
  framePtr = F.prev;

  return result_10575515;

}
function line_to_10575582(x_10575584, y_10575585) {
  var result_10575586 = null;

  var F={procname:"drawing_primitives.lineTo",prev:framePtr,filename:"drawing_primitives.nim",line:0};
  framePtr = F;
    F.line = 32;
    result_10575586 = {kind: 1, to: vec2_9863092(x_10575584, y_10575585), controlPoint: null, point: null};
  framePtr = F.prev;

  return result_10575586;

}
function curve_to_10575606(cpx_10575608, cpy_10575609, x_10575610, y_10575611) {
  var result_10575612 = null;

  var F={procname:"drawing_primitives.curveTo",prev:framePtr,filename:"drawing_primitives.nim",line:0};
  framePtr = F;
    F.line = 34;
    result_10575612 = {kind: 2, controlPoint: vec2_9863092(cpx_10575608, cpy_10575609), point: vec2_9863092(x_10575610, y_10575611), to: null};
  framePtr = F.prev;

  return result_10575612;

}
function close_10575638() {
  var result_10575640 = null;

  var F={procname:"drawing_primitives.close",prev:framePtr,filename:"drawing_primitives.nim",line:0};
  framePtr = F;
    F.line = 36;
    result_10575640 = {kind: 3, to: null, controlPoint: null, point: null};
  framePtr = F.prev;

  return result_10575640;

}
function render_rectangle_11486118(self_11486120, props_11486121) {
    var Tmp1;
    var Tmp2;

  var result_11486126 = ({val: null});

  var F={procname:"rectangle.renderRectangle",prev:framePtr,filename:"rectangle.nim",line:0};
  framePtr = F;
    F.line = 16;
    F.line = 17;
    var world_pos_11486127 = actual_world_position_10300676(self_11486120);
    F.line = 18;
    var x_11486128 = world_pos_11486127.x;
    F.line = 19;
    var y_11486129 = world_pos_11486127.y;
    F.line = 20;
    var width_11486208 = width_9864437((Tmp1 = get_10475301(self_11486120.bounds), Tmp1)[0][Tmp1[1]]);
    F.line = 21;
    var height_11486287 = height_9864660((Tmp2 = get_10475301(self_11486120.bounds), Tmp2)[0][Tmp2[1]]);
    F.line = 22;
    var radius_11486427 = get_11486334(props_11486121.radius, {Field0: 0.0, Field1: 0.0, Field2: 0.0, Field3: 0.0});
    nimCopy(result_11486126, some_11435204(create_path_10576016(self_11486120, some_10567250({fill: nimCopy(null, props_11486121.color, NTI10252086), stroke: nimCopy(null, props_11486121.stroke, NTI10252086)}), some_11466166({width: get_10325316(props_11486121.strokeWidth, 0.0)}), [move_to_10575511((x_11486128 + radius_11486427["Field0"]), y_11486129), line_to_10575582(((x_11486128 + width_11486208) - radius_11486427["Field1"]), y_11486129), curve_to_10575606((x_11486128 + width_11486208), y_11486129, (x_11486128 + width_11486208), (y_11486129 + radius_11486427["Field1"])), line_to_10575582((x_11486128 + width_11486208), ((y_11486129 + height_11486287) - radius_11486427["Field2"])), curve_to_10575606((x_11486128 + width_11486208), (y_11486129 + height_11486287), ((x_11486128 + width_11486208) - radius_11486427["Field2"]), (y_11486129 + height_11486287)), line_to_10575582((x_11486128 + radius_11486427["Field3"]), (y_11486129 + height_11486287)), curve_to_10575606(x_11486128, (y_11486129 + height_11486287), x_11486128, ((y_11486129 + height_11486287) - radius_11486427["Field3"])), line_to_10575582(x_11486128, (y_11486129 + radius_11486427["Field0"])), curve_to_10575606(x_11486128, y_11486129, (x_11486128 + radius_11486427["Field0"]), y_11486129), close_10575638()])), NTI10270009);
  framePtr = F.prev;

  return result_11486126;

}
function none_11035011() {
  var result_11035028 = ({val: null});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  framePtr = F.prev;

  return result_11035028;

}
function none_11035005() {
  var result_11035009 = ({val: null});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 140;
    nimCopy(result_11035009, none_11035011(), NTI11035017);
  framePtr = F.prev;

  return result_11035009;

}
function create_rectangle_11486539(props_11486541, elem_props_11486542, children_11486559) {
    function HEX3Aanonymous_11490001(elem_11490003) {
      var result_11490005 = ({val: null});

      var F={procname:"createRectangle.:anonymous",prev:framePtr,filename:"rectangle.nim",line:0};
      framePtr = F;
        F.line = 46;
        nimCopy(result_11490005, render_rectangle_11486118(elem_11490003, props_11486541), NTI10270009);
      framePtr = F.prev;

      return result_11490005;

    }

  var result_11486560 = null;

  var F={procname:"rectangle.createRectangle",prev:framePtr,filename:"rectangle.nim",line:0};
  framePtr = F;
    F.line = 42;
    result_11486560 = new_element_11025693(elem_props_11486542, [], none_11025720(), some_11455019({name: makeNimstrLit("rectangle"), render: HEX3Aanonymous_11490001}), none_11035005(), none_11035005());
  framePtr = F.prev;

  return result_11486560;

}
function must_rehash_11790601(t_11790604) {
  var result_11790605 = false;

  var F={procname:"mustRehash.mustRehash",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    if (!((t_11790604.counter < (t_11790604.data != null ? t_11790604.data.length : 0)))) {
    F.line = 33;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/hashcommon.nim(33, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 34;
    result_11790605 = ((mulInt((t_11790604.data != null ? t_11790604.data.length : 0), 2) < mulInt(t_11790604.counter, 3)) || (subInt((t_11790604.data != null ? t_11790604.data.length : 0), t_11790604.counter) < 4));
  framePtr = F.prev;

  return result_11790605;

}
function raw_insert_11817058(t_11817064, data_11817067, data_11817067_Idx, key_11817068, val_11817069, hc_11817070, h_11817071) {
  var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"tableimpl.nim",line:0};
  framePtr = F;
    F.line = 22;
    data_11817067[data_11817067_Idx][chckIndx(h_11817071, 0, (data_11817067[data_11817067_Idx] != null ? data_11817067[data_11817067_Idx].length : 0)+0-1)-0].Field1 = key_11817068;
    F.line = 23;
    data_11817067[data_11817067_Idx][chckIndx(h_11817071, 0, (data_11817067[data_11817067_Idx] != null ? data_11817067[data_11817067_Idx].length : 0)+0-1)-0].Field2 = nimCopy(null, val_11817069, NTI11690010);
    F.line = 24;
    data_11817067[data_11817067_Idx][chckIndx(h_11817071, 0, (data_11817067[data_11817067_Idx] != null ? data_11817067[data_11817067_Idx].length : 0)+0-1)-0].Field0 = hc_11817070;
  framePtr = F.prev;

  
}
function enlarge_11815336(t_11815342) {
  var F={procname:"enlarge.enlarge",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 267;
    var n_11815350 = null;
    F.line = 268;
    n_11815350 = new Array(chckRange(mulInt((t_11815342.data != null ? t_11815342.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_11815342.data != null ? t_11815342.data.length : 0), 2), 0, 2147483647);++i) {n_11815350[i]={Field0: 0, Field1: null, Field2: null};}    F.line = 269;
    var Tmp1 = t_11815342.data; t_11815342.data = n_11815350; n_11815350 = Tmp1;    L2: do {
      F.line = 270;
      var i_11815668 = 0;
      F.line = 39;
      var colontmp__14475232 = 0;
      F.line = 270;
      colontmp__14475232 = (n_11815350 != null ? (n_11815350.length-1) : -1);
      F.line = 56;
      var res_14475233 = 0;
      L3: do {
        F.line = 57;
          L4: while (true) {
          if (!(res_14475233 <= colontmp__14475232)) break L4;
            F.line = 270;
            i_11815668 = res_14475233;
            F.line = 271;
            var eh_11815992 = n_11815350[chckIndx(i_11815668, 0, (n_11815350 != null ? n_11815350.length : 0)+0-1)-0].Field0;
            if (is_filled_10152018(eh_11815992)) {
            F.line = 273;
            var j_11816016 = (eh_11815992 & (t_11815342.data != null ? (t_11815342.data.length-1) : -1));
            L5: do {
              F.line = 274;
                L6: while (true) {
                if (!is_filled_10152018(t_11815342.data[chckIndx(j_11816016, 0, (t_11815342.data != null ? t_11815342.data.length : 0)+0-1)-0].Field0)) break L6;
                  F.line = 275;
                  j_11816016 = next_try_10155014(j_11816016, (t_11815342.data != null ? (t_11815342.data.length-1) : -1));
                }
            } while(false);
            F.line = 277;
            raw_insert_11817058(t_11815342, t_11815342, "data", n_11815350[chckIndx(i_11815668, 0, (n_11815350 != null ? n_11815350.length : 0)+0-1)-0].Field1, n_11815350[chckIndx(i_11815668, 0, (n_11815350 != null ? n_11815350.length : 0)+0-1)-0].Field2, eh_11815992, j_11816016);
            }
            
            F.line = 59;
            res_14475233 = addInt(res_14475233, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function raw_get_known_hc_11818068(t_11818072, key_11818073, hc_11818074) {
  var result_11818075 = 0;

  var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((t_11818072.data != null ? t_11818072.data.length : 0) == 0)) {
    F.line = 47;
    result_11818075 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_11820548 = (hc_11818074 & (t_11818072.data != null ? (t_11818072.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_10152018(t_11818072.data[chckIndx(h_11820548, 0, (t_11818072.data != null ? t_11818072.data.length : 0)+0-1)-0].Field0)) break L2;
          if (((t_11818072.data[chckIndx(h_11820548, 0, (t_11818072.data != null ? t_11818072.data.length : 0)+0-1)-0].Field0 == hc_11818074) && (t_11818072.data[chckIndx(h_11820548, 0, (t_11818072.data != null ? t_11818072.data.length : 0)+0-1)-0].Field1 == key_11818073))) {
          F.line = 55;
          result_11818075 = h_11820548;
          break BeforeRet;
          }
          
          F.line = 56;
          h_11820548 = next_try_10155014(h_11820548, (t_11818072.data != null ? (t_11818072.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_11818075 = subInt(-1, h_11820548);
  } while (false);
  framePtr = F.prev;

  return result_11818075;

}
function mget_or_put_11740231(t_11740237, key_11740238, val_11740239) {
  var result_11740241 = null;
  var result_11740241_Idx = 0;

  var F={procname:"mgetOrPut.mgetOrPut",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (((t_11740237.data != null ? t_11740237.data.length : 0) == 0)) {
    if (!(is_power_of_two_8720029(64))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(defaultInitialSize)` "));
    }
    
    F.line = 167;
    t_11740237.counter = 0;
    F.line = 168;
    t_11740237.data = new Array(64); for (var i=0;i<64;++i) {t_11740237.data[i]={Field0: 0, Field1: null, Field2: null};}    }
    
    F.line = 64;
    var hc_11765601 = [0];
    F.line = 65;
    var index_11765610 = raw_get_11710930(t_11740237, key_11740238, hc_11765601, 0);
    if ((index_11765610 < 0)) {
    if (((t_11740237.data != null ? t_11740237.data.length : 0) == 0)) {
    if (!(is_power_of_two_8720029(64))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(defaultInitialSize)` "));
    }
    
    F.line = 167;
    t_11740237.counter = 0;
    F.line = 168;
    t_11740237.data = new Array(64); for (var i=0;i<64;++i) {t_11740237.data[i]={Field0: 0, Field1: null, Field2: null};}    }
    
    if (must_rehash_11790601(t_11740237)) {
    F.line = 49;
    enlarge_11815336(t_11740237);
    F.line = 50;
    index_11765610 = raw_get_known_hc_11818068(t_11740237, key_11740238, hc_11765601[0]);
    }
    
    F.line = 51;
    index_11765610 = subInt(-1, index_11765610);
    F.line = 52;
    raw_insert_11817058(t_11740237, t_11740237, "data", key_11740238, val_11740239, hc_11765601[0], index_11765610);
    F.line = 68;
    t_11740237.counter = addInt(t_11740237.counter, 1);
    }
    
    F.line = 70;
    result_11740241 = t_11740237.data[chckIndx(index_11765610, 0, (t_11740237.data != null ? t_11740237.data.length : 0)+0-1)-0]; result_11740241_Idx = "Field2";
  framePtr = F.prev;

  return [result_11740241, result_11740241_Idx];

}
function get_11822533(self_11822537) {
  var result_11822538 = null;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 171;
    if (is_none_11010703(self_11822537)) {
    F.line = 185;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI920204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    result_11822538 = self_11822537.val;
  framePtr = F.prev;

  return result_11822538;

}
function add_11740074(element_11740076, behavior_11740077) {
    var Tmp1;

  var F={procname:"behaviors.add",prev:framePtr,filename:"behaviors.nim",line:0};
  framePtr = F;
    F.line = 28;
    var Tmp2 = nimCopy(null, behavior_11740077, NTI11681068);
    if ((Tmp1 = mget_or_put_11740231(behaviors_list_11710629[0], element_11740076, []), Tmp1)[0][Tmp1[1]] != null) { Tmp1[0][Tmp1[1]].push(Tmp2); } else { Tmp1[0][Tmp1[1]] = [Tmp2]; };
    if (is_some_11010525(behavior_11740077.added)) {
    F.line = 30;
    get_11822533(behavior_11740077.added)(element_11740076);
    }
    
  framePtr = F.prev;

  
}
function none_11025799() {
  var result_11025816 = ({val: null});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  framePtr = F.prev;

  return result_11025816;

}
function none_11025793() {
  var result_11025797 = ({val: null});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 140;
    nimCopy(result_11025797, none_11025799(), NTI11025805);
  framePtr = F.prev;

  return result_11025797;

}
function new_element_13445297(comp_props_13445299, elem_props_13445300, children_13445302) {
  var result_13445303 = null;

  var F={procname:"dsl.newElement",prev:framePtr,filename:"dsl.nim",line:0};
  framePtr = F;
    F.line = 326;
    result_13445303 = new_element_11025693(elem_props_13445300, children_13445302, none_11025720(), none_11025793(), none_11035005(), none_11035005());
  framePtr = F.prev;

  return result_13445303;

}
function render_14438014() {
  var result_14438016 = null;

  var F={procname:"midio_slider.render",prev:framePtr,filename:"midio_slider.nim",line:0};
  framePtr = F;
    F.line = 5;
    L1: do {
      F.line = 6;
      var elem_parts_14445004 = {Field0: {width: ({val: 0.0, has: false}), height: ({val: 0.0, has: false}), maxWidth: ({val: 0.0, has: false}), minWidth: ({val: 0.0, has: false}), maxHeight: ({val: 0.0, has: false}), minHeight: ({val: 0.0, has: false}), x: ({val: 0.0, has: false}), y: ({val: 0.0, has: false}), xOffset: ({val: 0.0, has: false}), yOffset: ({val: 0.0, has: false}), margin: ({val: {Field0: 0.0, Field1: 0.0, Field2: 0.0, Field3: 0.0}, has: false}), horizontalAlignment: ({val: 0, has: false}), verticalAlignment: ({val: 0, has: false}), visibility: ({val: 0, has: false}), clipToBounds: ({val: false, has: false}), transform: ({val: ({scale: null, translation: null, rotation: 0.0}), has: false})}, Field1: {}};
      F.line = 229;
      L2: do {
        F.line = 6;
        var elem_parts_14455010 = {Field0: {width: ({val: 0.0, has: false}), height: ({val: 0.0, has: false}), maxWidth: ({val: 0.0, has: false}), minWidth: ({val: 0.0, has: false}), maxHeight: ({val: 0.0, has: false}), minHeight: ({val: 0.0, has: false}), x: ({val: 0.0, has: false}), y: ({val: 0.0, has: false}), xOffset: ({val: 0.0, has: false}), yOffset: ({val: 0.0, has: false}), margin: ({val: {Field0: 0.0, Field1: 0.0, Field2: 0.0, Field3: 0.0}, has: false}), horizontalAlignment: ({val: 0, has: false}), verticalAlignment: ({val: 0, has: false}), visibility: ({val: 0, has: false}), clipToBounds: ({val: false, has: false}), transform: ({val: ({scale: null, translation: null, rotation: 0.0}), has: false})}, Field1: {color: to_option_10567177(makeNimstrLit("blue")), radius: ({val: {Field0: 0.0, Field1: 0.0, Field2: 0.0, Field3: 0.0}, has: false}), stroke: ({val: null, has: false}), strokeWidth: ({val: 0.0, has: false})}};
        F.line = 229;
        var children_14445009 = [];
        F.line = 230;
        var behaviors_14445010 = [];
        F.line = 6;
        var res_14460033 = create_rectangle_11486539(elem_parts_14455010.Field1, elem_parts_14455010.Field0, children_14445009);
        L3: do {
          F.line = 502;
          var behavior_14465014 = ({update: ({val: null}), added: ({val: null})});
          F.line = 184;
          var i_14475201 = 0;
          F.line = 185;
          var l_14475202 = (behaviors_14445010 != null ? behaviors_14445010.length : 0);
          L4: do {
            F.line = 186;
              L5: while (true) {
              if (!(i_14475201 < l_14475202)) break L5;
                F.line = 6;
                nimCopy(behavior_14465014, behaviors_14445010[chckIndx(i_14475201, 0, (behaviors_14445010 != null ? behaviors_14445010.length : 0)+0-1)-0], NTI11681068);
                F.line = 6;
                add_11740074(res_14460033, behavior_14465014);
                F.line = 188;
                i_14475201 = addInt(i_14475201, 1);
                if (!(((behaviors_14445010 != null ? behaviors_14445010.length : 0) == l_14475202))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      } while(false);
      var children_14438020 = [res_14460033];
      F.line = 230;
      var behaviors_14438021 = [];
      F.line = 6;
      var res_14470037 = new_element_13445297(elem_parts_14445004.Field1, elem_parts_14445004.Field0, children_14438020);
      L6: do {
        F.line = 502;
        var behavior_14475014 = ({update: ({val: null}), added: ({val: null})});
        F.line = 184;
        var i_14475205 = 0;
        F.line = 185;
        var l_14475206 = (behaviors_14438021 != null ? behaviors_14438021.length : 0);
        L7: do {
          F.line = 186;
            L8: while (true) {
            if (!(i_14475205 < l_14475206)) break L8;
              F.line = 6;
              nimCopy(behavior_14475014, behaviors_14438021[chckIndx(i_14475205, 0, (behaviors_14438021 != null ? behaviors_14438021.length : 0)+0-1)-0], NTI11681068);
              F.line = 6;
              add_11740074(res_14470037, behavior_14475014);
              F.line = 188;
              i_14475205 = addInt(i_14475205, 1);
              if (!(((behaviors_14438021 != null ? behaviors_14438021.length : 0) == l_14475206))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
    } while(false);
    result_14438016 = res_14470037;
  framePtr = F.prev;

  return result_14438016;

}
start_app_14431051(render_14438014, makeNimstrLit("rootCanvas"), makeNimstrLit("nativeContainer"));
