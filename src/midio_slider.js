/* Generated by the Nim Compiler v1.2.6 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI11030805 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12115872 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12098755 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12115629 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12145935 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12145951 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12145864 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12145879 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11695010 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11040001 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11040017 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10260043 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11030696 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI6251 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11690001 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11690010 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11686068 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12225458 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12211079 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12225429 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14350606 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12098866 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14350429 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11685086 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11640401 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11675063 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10275009 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10260045 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10260041 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10260039 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10260027 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI10260063 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10260029 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10260180 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10260084 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10260035 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10260037 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI10260176 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10260081 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10260033 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10260143 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10257086 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10260069 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10260031 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10260125 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10260118 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10260047 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11655074 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10470244 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10715458 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10586053 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10715429 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11030732 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10716093 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10716090 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10092044 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI10716096 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12000872 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11840013 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12000629 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI4275232 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI4530011 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6235 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6221 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6243 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6245 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9950204 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6249 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6233 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6237 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10280001 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10280009 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10275001 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10270016 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10260482 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10275143 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10270001 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10265001 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10260485 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10260480 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10275125 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9954253 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9954252 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10275084 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10275060 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10275035 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9953088 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9953087 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10260025 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10260163 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10000037 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10260196 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI10260330 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10260194 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI10260311 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10260192 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI10260292 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9952046 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10260273 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI163 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI104 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI9986076 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10260210 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10260198 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10275026 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10256202 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI10275024 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10260484 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11020358 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6253 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI143 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI160043 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6008 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6286 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI6281 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI6217 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6219 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6241 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI112 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI6241 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6241.node = NNI6241;
var NNI6219 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6219.node = NNI6219;
NTI6281.base = NTI6217;
NTI6286.base = NTI6217;
var NNI6217 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI6281, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI112, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI112, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI6286, name: "up", sons: null}]};
NTI6217.node = NNI6217;
var NNI6008 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6008.node = NNI6008;
NTI6217.base = NTI6008;
NTI6219.base = NTI6217;
NTI6241.base = NTI6219;
var NNI160043 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI114, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI143, name: "Field1", sons: null}]};
NTI160043.node = NNI160043;
var NNI6253 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6253.node = NNI6253;
NTI6253.base = NTI6219;
NTI10275026.base = NTI10260484;
var NNI9986076 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "val", len: 0, typ: NTI104, name: "val", sons: null}, 
{kind: 1, offset: "has", len: 0, typ: NTI163, name: "has", sons: null}]};
NTI9986076.node = NNI9986076;
var NNI9952046 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI104, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI104, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI104, name: "Field3", sons: null}]};
NTI9952046.node = NNI9952046;
var NNI10260273 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "val", len: 0, typ: NTI9952046, name: "val", sons: null}, 
{kind: 1, offset: "has", len: 0, typ: NTI163, name: "has", sons: null}]};
NTI10260273.node = NNI10260273;
var NNI10260192 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI10260192, name: "Stretch", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10260192, name: "Center", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10260192, name: "Left", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI10260192, name: "Right", len: 0, sons: null}}};
NTI10260192.node = NNI10260192;
var NNI10260292 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "val", len: 0, typ: NTI10260192, name: "val", sons: null}, 
{kind: 1, offset: "has", len: 0, typ: NTI163, name: "has", sons: null}]};
NTI10260292.node = NNI10260292;
var NNI10260194 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI10260194, name: "Stretch", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10260194, name: "Center", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10260194, name: "Top", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI10260194, name: "Bottom", len: 0, sons: null}}};
NTI10260194.node = NNI10260194;
var NNI10260311 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "val", len: 0, typ: NTI10260194, name: "val", sons: null}, 
{kind: 1, offset: "has", len: 0, typ: NTI163, name: "has", sons: null}]};
NTI10260311.node = NNI10260311;
var NNI10260196 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI10260196, name: "Visible", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10260196, name: "Collapsed", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10260196, name: "Hidden", len: 0, sons: null}}};
NTI10260196.node = NNI10260196;
var NNI10260330 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "val", len: 0, typ: NTI10260196, name: "val", sons: null}, 
{kind: 1, offset: "has", len: 0, typ: NTI163, name: "has", sons: null}]};
NTI10260330.node = NNI10260330;
var NNI10000037 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "val", len: 0, typ: NTI163, name: "val", sons: null}, 
{kind: 1, offset: "has", len: 0, typ: NTI163, name: "has", sons: null}]};
NTI10000037.node = NNI10000037;
var NNI9953088 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "x", len: 0, typ: NTI104, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI104, name: "y", sons: null}]};
NTI9953088.node = NNI9953088;
NTI9953087.base = NTI9953088;
var NNI10260025 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "scale", len: 0, typ: NTI9953087, name: "scale", sons: null}, 
{kind: 1, offset: "translation", len: 0, typ: NTI9953087, name: "translation", sons: null}, 
{kind: 1, offset: "rotation", len: 0, typ: NTI104, name: "rotation", sons: null}]};
NTI10260025.node = NNI10260025;
var NNI10260163 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "val", len: 0, typ: NTI10260025, name: "val", sons: null}, 
{kind: 1, offset: "has", len: 0, typ: NTI163, name: "has", sons: null}]};
NTI10260163.node = NNI10260163;
var NNI10260210 = {kind: 2, len: 16, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "width", len: 0, typ: NTI9986076, name: "width", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI9986076, name: "height", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI9986076, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI9986076, name: "minWidth", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI9986076, name: "maxHeight", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI9986076, name: "minHeight", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI9986076, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI9986076, name: "y", sons: null}, 
{kind: 1, offset: "xOffset", len: 0, typ: NTI9986076, name: "xOffset", sons: null}, 
{kind: 1, offset: "yOffset", len: 0, typ: NTI9986076, name: "yOffset", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI10260273, name: "margin", sons: null}, 
{kind: 1, offset: "horizontalAlignment", len: 0, typ: NTI10260292, name: "horizontalAlignment", sons: null}, 
{kind: 1, offset: "verticalAlignment", len: 0, typ: NTI10260311, name: "verticalAlignment", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI10260330, name: "visibility", sons: null}, 
{kind: 1, offset: "clipToBounds", len: 0, typ: NTI10000037, name: "clipToBounds", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI10260163, name: "transform", sons: null}]};
NTI10260210.node = NNI10260210;
NTI10260198.base = NTI10260210;
var NNI10275035 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "val", len: 0, typ: NTI10260484, name: "val", sons: null}, 
{kind: 1, offset: "has", len: 0, typ: NTI163, name: "has", sons: null}]};
NTI10275035.node = NNI10275035;
var NNI10275060 = {kind: 1, offset: "val", len: 0, typ: NTI9953087, name: "val", sons: null};
NTI10275060.node = NNI10275060;
var NNI9954253 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "pos", len: 0, typ: NTI9953087, name: "pos", sons: null}, 
{kind: 1, offset: "size", len: 0, typ: NTI9953087, name: "size", sons: null}]};
NTI9954253.node = NNI9954253;
NTI9954252.base = NTI9954253;
var NNI10275084 = {kind: 1, offset: "val", len: 0, typ: NTI9954252, name: "val", sons: null};
NTI10275084.node = NNI10275084;
var NNI10260485 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI112, name: "name", sons: null}, 
{kind: 1, offset: "measure", len: 0, typ: NTI10265001, name: "measure", sons: null}, 
{kind: 1, offset: "arrange", len: 0, typ: NTI10270001, name: "arrange", sons: null}]};
NTI10260485.node = NNI10260485;
NTI10260480.base = NTI10260485;
var NNI10275125 = {kind: 1, offset: "val", len: 0, typ: NTI10260480, name: "val", sons: null};
NTI10275125.node = NNI10275125;
var NNI10270016 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI112, name: "name", sons: null}, 
{kind: 1, offset: "render", len: 0, typ: NTI10275001, name: "render", sons: null}]};
NTI10270016.node = NNI10270016;
NTI10260482.base = NTI10270016;
var NNI10275143 = {kind: 1, offset: "val", len: 0, typ: NTI10260482, name: "val", sons: null};
NTI10275143.node = NNI10275143;
var NNI10280009 = {kind: 1, offset: "val", len: 0, typ: NTI10280001, name: "val", sons: null};
NTI10280009.node = NNI10280009;
var NNI10275024 = {kind: 2, len: 16, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "id", len: 0, typ: NTI10256202, name: "id", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI10275026, name: "children", sons: null}, 
{kind: 1, offset: "props", len: 0, typ: NTI10260198, name: "props", sons: null}, 
{kind: 1, offset: "parent", len: 0, typ: NTI10275035, name: "parent", sons: null}, 
{kind: 1, offset: "desiredSize", len: 0, typ: NTI10275060, name: "desiredSize", sons: null}, 
{kind: 1, offset: "bounds", len: 0, typ: NTI10275084, name: "bounds", sons: null}, 
{kind: 1, offset: "previousArrange", len: 0, typ: NTI10275084, name: "previousArrange", sons: null}, 
{kind: 1, offset: "previousMeasure", len: 0, typ: NTI10275060, name: "previousMeasure", sons: null}, 
{kind: 1, offset: "isArrangeValid", len: 0, typ: NTI163, name: "isArrangeValid", sons: null}, 
{kind: 1, offset: "isMeasureValid", len: 0, typ: NTI163, name: "isMeasureValid", sons: null}, 
{kind: 1, offset: "measuring", len: 0, typ: NTI163, name: "measuring", sons: null}, 
{kind: 1, offset: "layout", len: 0, typ: NTI10275125, name: "layout", sons: null}, 
{kind: 1, offset: "drawable", len: 0, typ: NTI10275143, name: "drawable", sons: null}, 
{kind: 1, offset: "onRooted", len: 0, typ: NTI10280009, name: "onRooted", sons: null}, 
{kind: 1, offset: "onUnrooted", len: 0, typ: NTI10280009, name: "onUnrooted", sons: null}, 
{kind: 1, offset: "pointerInsideLastUpdate", len: 0, typ: NTI163, name: "pointerInsideLastUpdate", sons: null}]};
NTI10275024.node = NNI10275024;
NTI10260484.base = NTI10275024;
var NNI11020358 = {kind: 1, offset: "val", len: 0, typ: NTI10260484, name: "val", sons: null};
NTI11020358.node = NNI11020358;
var NNI6237 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6237.node = NNI6237;
var NNI6233 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6233.node = NNI6233;
NTI6233.base = NTI6219;
NTI6237.base = NTI6233;
var NNI6249 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6249.node = NNI6249;
NTI6249.base = NTI6219;
var NNI9950204 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9950204.node = NNI9950204;
NTI9950204.base = NTI6219;
var NNI6245 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6245.node = NNI6245;
var NNI6243 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6243.node = NNI6243;
var NNI6221 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6221.node = NNI6221;
NTI6221.base = NTI6217;
NTI6243.base = NTI6221;
NTI6245.base = NTI6243;
var NNI6235 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6235.node = NNI6235;
NTI6235.base = NTI6233;
var NNI4530011 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI4275232, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI143, name: "b", sons: null}]};
NTI4530011.node = NNI4530011;
NTI12000629.base = NTI11840013;
NTI12000872.base = NTI11840013;
var NNI10716096 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI10092044, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI10260484, name: "Field1", sons: null}]};
NTI10716096.node = NNI10716096;
NTI10716093.base = NTI10716096;
var NNI10716090 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI10716093, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI143, name: "counter", sons: null}]};
NTI10716090.node = NNI10716090;
var NNI11030732 = {kind: 1, offset: "val", len: 0, typ: NTI10260480, name: "val", sons: null};
NTI11030732.node = NNI11030732;
NTI10715429.base = NTI10586053;
NTI10715458.base = NTI10586053;
var NNI10470244 = {kind: 1, offset: "val", len: 0, typ: NTI9954252, name: "val", sons: null};
NTI10470244.node = NNI10470244;
var NNI10257086 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "val", len: 0, typ: NTI112, name: "val", sons: null}, 
{kind: 1, offset: "has", len: 0, typ: NTI163, name: "has", sons: null}]};
NTI10257086.node = NNI10257086;
var NNI10260069 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "stroke", len: 0, typ: NTI10257086, name: "stroke", sons: null}, 
{kind: 1, offset: "fill", len: 0, typ: NTI10257086, name: "fill", sons: null}]};
NTI10260069.node = NNI10260069;
NTI10260031.base = NTI10260069;
var NNI10260125 = {kind: 1, offset: "val", len: 0, typ: NTI10260031, name: "val", sons: null};
NTI10260125.node = NNI10260125;
var NNI10260081 = {kind: 1, offset: "width", len: 0, typ: NTI104, name: "width", sons: null};
NTI10260081.node = NNI10260081;
NTI10260033.base = NTI10260081;
var NNI10260143 = {kind: 1, offset: "val", len: 0, typ: NTI10260033, name: "val", sons: null};
NTI10260143.node = NNI10260143;
NTI10260176.base = NTI10260047;
var NNI10260037 = {kind: 2, offset: 0, typ: null, name: null, len: 6, sons: {"0": {kind: 1, offset: 0, typ: NTI10260037, name: "Container", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10260037, name: "Text", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10260037, name: "Path", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI10260037, name: "Circle", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI10260037, name: "Ellipse", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI10260037, name: "Rectangle", len: 0, sons: null}}};
NTI10260037.node = NNI10260037;
var NNI10260084 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "text", len: 0, typ: NTI112, name: "text", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI104, name: "fontSize", sons: null}, 
{kind: 1, offset: "textBaseline", len: 0, typ: NTI112, name: "textBaseline", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI112, name: "font", sons: null}, 
{kind: 1, offset: "pos", len: 0, typ: NTI9953087, name: "pos", sons: null}, 
{kind: 1, offset: "alignment", len: 0, typ: NTI112, name: "alignment", sons: null}]};
NTI10260084.node = NNI10260084;
NTI10260035.base = NTI10260084;
var NNI10260027 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI10260027, name: "MoveTo", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10260027, name: "LineTo", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10260027, name: "QuadraticCurveTo", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI10260027, name: "Close", len: 0, sons: null}}};
NTI10260027.node = NNI10260027;
var NNI10260063 = {kind: 3, offset: "kind", len: 4, typ: NTI10260027, name: "kind", sons: [[setConstr(0, 1), {kind: 1, offset: "to", len: 0, typ: NTI9953087, name: "to", sons: null}], 
[setConstr(2), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "controlPoint", len: 0, typ: NTI9953087, name: "controlPoint", sons: null}, 
{kind: 1, offset: "point", len: 0, typ: NTI9953087, name: "point", sons: null}]}], 
[setConstr(3), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]};
NTI10260063.node = NNI10260063;
NTI10260029.base = NTI10260063;
NTI10260180.base = NTI10260029;
var NNI10260039 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "center", len: 0, typ: NTI9953087, name: "center", sons: null}, 
{kind: 1, offset: "radius", len: 0, typ: NTI104, name: "radius", sons: null}]};
NTI10260039.node = NNI10260039;
var NNI10260041 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "center", len: 0, typ: NTI9953087, name: "center", sons: null}, 
{kind: 1, offset: "radius", len: 0, typ: NTI9953087, name: "radius", sons: null}, 
{kind: 1, offset: "rotation", len: 0, typ: NTI104, name: "rotation", sons: null}, 
{kind: 1, offset: "startAngle", len: 0, typ: NTI104, name: "startAngle", sons: null}, 
{kind: 1, offset: "endAngle", len: 0, typ: NTI104, name: "endAngle", sons: null}]};
NTI10260041.node = NNI10260041;
var NNI10260045 = {kind: 1, offset: "bounds", len: 0, typ: NTI9954252, name: "bounds", sons: null};
NTI10260045.node = NNI10260045;
var NNI10260118 = {kind: 2, len: 7, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "colorInfo", len: 0, typ: NTI10260125, name: "colorInfo", sons: null}, 
{kind: 1, offset: "strokeInfo", len: 0, typ: NTI10260143, name: "strokeInfo", sons: null}, 
{kind: 1, offset: "clipToBounds", len: 0, typ: NTI163, name: "clipToBounds", sons: null}, 
{kind: 1, offset: "bounds", len: 0, typ: NTI9954252, name: "bounds", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI10260163, name: "transform", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI10260176, name: "children", sons: null}, 
{kind: 3, offset: "kind", len: 6, typ: NTI10260037, name: "kind", sons: [[setConstr(0), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}], 
[setConstr(1), {kind: 1, offset: "textInfo", len: 0, typ: NTI10260035, name: "textInfo", sons: null}], 
[setConstr(2), {kind: 1, offset: "segments", len: 0, typ: NTI10260180, name: "segments", sons: null}], 
[setConstr(3), {kind: 1, offset: "circleInfo", len: 0, typ: NTI10260039, name: "circleInfo", sons: null}], 
[setConstr(4), {kind: 1, offset: "ellipseInfo", len: 0, typ: NTI10260041, name: "ellipseInfo", sons: null}], 
[setConstr(5), {kind: 1, offset: "rectangleInfo", len: 0, typ: NTI10260045, name: "rectangleInfo", sons: null}]]}]};
NTI10260118.node = NNI10260118;
NTI10260047.base = NTI10260118;
var NNI11655074 = {kind: 1, offset: "val", len: 0, typ: NTI10260047, name: "val", sons: null};
NTI11655074.node = NNI11655074;
var NNI10275009 = {kind: 1, offset: "val", len: 0, typ: NTI10260047, name: "val", sons: null};
NTI10275009.node = NNI10275009;
NTI11675063.base = NTI10275009;
NTI11640401.base = NTI10260047;
NTI11685086.base = NTI10260047;
NTI14350429.base = NTI12098866;
NTI14350606.base = NTI12098866;
NTI12225429.base = NTI12211079;
NTI12225458.base = NTI12211079;
var NNI11690010 = {kind: 1, offset: "val", len: 0, typ: NTI11690001, name: "val", sons: null};
NTI11690010.node = NNI11690010;
var NNI11686068 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "update", len: 0, typ: NTI11690010, name: "update", sons: null}, 
{kind: 1, offset: "added", len: 0, typ: NTI10280009, name: "added", sons: null}]};
NTI11686068.node = NNI11686068;
var NNI6251 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6251.node = NNI6251;
NTI6251.base = NTI6219;
NTI11030696.base = NTI10260484;
var NNI10260043 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI104, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI104, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI104, name: "Field3", sons: null}]};
NTI10260043.node = NNI10260043;
var NNI11040017 = {kind: 1, offset: "val", len: 0, typ: NTI11040001, name: "val", sons: null};
NTI11040017.node = NNI11040017;
NTI11695010.base = NTI11686068;
var NNI12145879 = {kind: 1, offset: "val", len: 0, typ: NTI12145864, name: "val", sons: null};
NTI12145879.node = NNI12145879;
var NNI12145951 = {kind: 1, offset: "val", len: 0, typ: NTI12145935, name: "val", sons: null};
NTI12145951.node = NNI12145951;
NTI12115629.base = NTI12098755;
NTI12115872.base = NTI12098755;
var NNI11030805 = {kind: 1, offset: "val", len: 0, typ: NTI10260482, name: "val", sons: null};
NTI11030805.node = NNI11030805;
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_240023, src_240024, ti_240025) {
  var result_245219 = null;

    switch (ti_240025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(is_fat_pointer_235401(ti_240025))) {
      result_245219 = src_240024;
      }
      else {
        result_245219 = [src_240024[0], src_240024[1]];
      }
      
      break;
    case 19:
            if (dest_240023 === null || dest_240023 === undefined) {
        dest_240023 = {};
      }
      else {
        for (var key in dest_240023) { delete dest_240023[key]; }
      }
      for (var key in src_240024) { dest_240023[key] = src_240024[key]; }
      result_245219 = dest_240023;
    
      break;
    case 18:
    case 17:
      if (!((ti_240025.base == null))) {
      result_245219 = nimCopy(dest_240023, src_240024, ti_240025.base);
      }
      else {
      if ((ti_240025.kind == 17)) {
      result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {m_type: ti_240025} : dest_240023;
      }
      else {
        result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {} : dest_240023;
      }
      }
      nimCopyAux(result_245219, src_240024, ti_240025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_240024 === null) {
        result_245219 = null;
      }
      else {
        if (dest_240023 === null || dest_240023 === undefined) {
          dest_240023 = new Array(src_240024.length);
        }
        else {
          dest_240023.length = src_240024.length;
        }
        result_245219 = dest_240023;
        for (var i = 0; i < src_240024.length; ++i) {
          result_245219[i] = nimCopy(result_245219[i], src_240024[i], ti_240025.base);
        }
      }
    
      break;
    case 28:
            if (src_240024 !== null) {
        result_245219 = src_240024.slice(0);
      }
    
      break;
    default: 
      result_245219 = src_240024;
      break;
    }

  return result_245219;

}
function makeNimstrLit(c_225062) {
      var ln = c_225062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_225062.charCodeAt(i);
  }
  return result;
  

  
}
function arrayConstr(len_250067, value_250068, typ_250069) {
        var result = new Array(len_250067);
    for (var i = 0; i < len_250067; ++i) result[i] = nimCopy(null, value_250068, typ_250069);
    return result;
  

  
}
function cstrToNimstr(c_225079) {
      var ln = c_225079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_225079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_225079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function toJSStr(s_225096) {
                    var Tmp5;
            var Tmp7;

  var result_225097 = null;

    var res_225170 = new_seq_225128((s_225096 != null ? s_225096.length : 0));
    var i_225172 = 0;
    var j_225174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_225172 < (s_225096 != null ? s_225096.length : 0))) break L2;
          var c_225175 = s_225096[i_225172];
          if ((c_225175 < 128)) {
          res_225170[j_225174] = String.fromCharCode(c_225175);
          i_225172 += 1;
          }
          else {
            var helper_225198 = new_seq_225128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_225199 = c_225175.toString(16);
                  if (((code_225199 != null ? code_225199.length : 0) == 1)) {
                  if (helper_225198 != null) { helper_225198.push("%0"); } else { helper_225198 = ["%0"]; };
                  }
                  else {
                  if (helper_225198 != null) { helper_225198.push("%"); } else { helper_225198 = ["%"]; };
                  }
                  
                  if (helper_225198 != null) { helper_225198.push(code_225199); } else { helper_225198 = [code_225199]; };
                  i_225172 += 1;
                    if (((s_225096 != null ? s_225096.length : 0) <= i_225172)) Tmp5 = true; else {                      Tmp5 = (s_225096[i_225172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_225175 = s_225096[i_225172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_225170[j_225174] = decodeURIComponent(helper_225198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_225170[j_225174] = helper_225198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_225174 += 1;
        }
    } while(false);
    if (res_225170 === null) res_225170 = [];
               if (res_225170.length < j_225174) { for (var i=res_225170.length;i<j_225174;++i) res_225170.push(null); }
               else { res_225170.length = j_225174; };
    result_225097 = res_225170.join("");

  return result_225097;

}
function raiseException(e_190218, ename_190219) {
    e_190218.name = ename_190219;
    if ((excHandler == 0)) {
    unhandledException(e_190218);
    }
    
    e_190218.trace = nimCopy(null, raw_write_stack_trace_180059(), NTI112);
    throw e_190218;

  
}
function chckRange(i_255016, a_255017, b_255018) {
      var Tmp1;

  var result_255019 = 0;

  BeforeRet: do {
      if (!(a_255017 <= i_255016)) Tmp1 = false; else {        Tmp1 = (i_255016 <= b_255018);      }    if (Tmp1) {
    result_255019 = i_255016;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_255019;

}
function subInt(a_230421, b_230422) {
        var result = a_230421 - b_230422;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function chckIndx(i_250086, a_250087, b_250088) {
      var Tmp1;

  var result_250089 = 0;

  BeforeRet: do {
      if (!(a_250087 <= i_250086)) Tmp1 = false; else {        Tmp1 = (i_250086 <= b_250088);      }    if (Tmp1) {
    result_250089 = i_250086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_250086, a_250087, b_250088);
    }
    
  } while (false);

  return result_250089;

}
function addInt(a_230403, b_230404) {
        var result = a_230403 + b_230404;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function mnewString(len_230044) {
        return new Array(len_230044);
  

  
}
var ConstSet2 = setConstr(60, 62, 94);
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(45, 43, 32);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);
function divInt(a_230457, b_230458) {
        if (b_230458 == 0) raiseDivByZero();
    if (b_230458 == -1 && a_230457 == 2147483647) raiseOverflow();
    return Math.trunc(a_230457 / b_230458);
  

  
}
function mulInt(a_230439, b_230440) {
        var result = a_230439 * b_230440;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet8 = setConstr([65, 90], [97, 122]);
function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}
function genericReset(x_250044, ti_250045) {
  var result_250046 = null;

    result_250046 = null;
    switch (ti_250045.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (is_fat_pointer_235401(ti_250045)) {
              result_250046 = [null, 0];
      
      }
      
      break;
    case 19:
            result_250046 = {};
    
      break;
    case 18:
    case 17:
      if ((ti_250045.kind == 17)) {
      result_250046 = {m_type: ti_250045};
      }
      else {
        result_250046 = {};
      }
      
      break;
    case 24:
    case 27:
            result_250046 = [];
    
      break;
    case 4:
    case 16:
            result_250046 = new Array(x_250044.length);
      for (var i = 0; i < x_250044.length; ++i) {
        result_250046[i] = genericReset(x_250044[i], ti_250045.base);
      }
    
      break;
    default: 
      break;
    }

  return result_250046;

}
function modInt(a_230475, b_230476) {
        if (b_230476 == 0) raiseDivByZero();
    if (b_230476 == -1 && a_230475 == 2147483647) raiseOverflow();
    return Math.trunc(a_230475 % b_230476);
  

  
}
function eqStrings(a_230222, b_230223) {
        if (a_230222 == b_230223) return true;
    if (a_230222 === null && b_230223.length == 0) return true;
    if (b_230223 === null && a_230222.length == 0) return true;
    if ((!a_230222) || (!b_230223)) return false;
    var alen = a_230222.length;
    if (alen != b_230223.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_230222[i] != b_230223[i]) return false;
    return true;
  

  
}
var ConstSet9 = setConstr(2);
function raiseFieldError(f_220047) {
    raiseException({message: nimCopy(null, f_220047, NTI112), parent: null, m_type: NTI6251, name: null, trace: null, up: null}, "FieldError");

  
}
var ConstSet10 = setConstr(0, 1);
var ConstSet11 = setConstr(0, 1);
var ConstSet12 = setConstr(0, 1);
var ConstSet13 = setConstr(0, 1);
var ConstSet14 = setConstr(2);
var ConstSet15 = setConstr(2);
var ConstSet16 = setConstr(2);
var ConstSet17 = setConstr(2);
var ConstSet18 = setConstr(1);
var ConstSet19 = setConstr(3);
var ConstSet20 = setConstr(4);
var ConstSet21 = setConstr(5);
var ConstSet22 = setConstr(46, 44);
function nimCharToStr(x_156052) {
  var result_156053 = null;

    result_156053 = nimCopy(null, mnewString(1), NTI112);
    result_156053[0] = x_156052;

  return result_156053;

}
var ConstSet23 = setConstr([65, 90]);
var ConstSet24 = setConstr([97, 122]);
var nim_program_result = 0;
var global_raise_hook_142018 = [null];
var local_raise_hook_142023 = [null];
var out_of_mem_hook_142026 = [null];
var unhandled_exception_hook_142031 = [null];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var object_id_10095031 = [0];
var counter_10256402 = [1];
function is_power_of_two_8805029(x_8805031) {
    var Tmp1;

  var result_8805032 = false;

  BeforeRet: do {
    if (!(0 < x_8805031)) Tmp1 = false; else {      Tmp1 = ((x_8805031 & (x_8805031 - 1)) == 0);    }    result_8805032 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_8805032;

}
function is_fat_pointer_235401(ti_235403) {
  var result_235404 = false;

  BeforeRet: do {
    result_235404 = !((ConstSet1[ti_235403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_235404;

}
function nimCopyAux(dest_240028, src_240029, n_240031) {
    switch (n_240031.kind) {
    case 0:
      break;
    case 1:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_240031.sons.length; i++) {
      nimCopyAux(dest_240028, src_240029, n_240031.sons[i]);
    }
    
      break;
    case 3:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
      for (var i = 0; i < n_240031.sons.length; ++i) {
        nimCopyAux(dest_240028, src_240029, n_240031.sons[i][1]);
      }
    
      break;
    }

  
}
function add_142042(x_142045, x_142045_Idx, y_142046) {
          if (x_142045[x_142045_Idx] === null) { x_142045[x_142045_Idx] = []; }
      var off = x_142045[x_142045_Idx].length;
      x_142045[x_142045_Idx].length += y_142046.length;
      for (var i = 0; i < y_142046.length; ++i) {
        x_142045[x_142045_Idx][off+i] = y_142046.charCodeAt(i);
      }
    

  
}
function aux_write_stack_trace_160038(f_160040) {
          var Tmp3;

  var result_160041 = [null];

    var it_160049 = f_160040;
    var i_160051 = 0;
    var total_160053 = 0;
    var temp_frames_160060 = arrayConstr(64, {Field0: null, Field1: 0}, NTI160043);
    L1: do {
        L2: while (true) {
          if (!!((it_160049 == null))) Tmp3 = false; else {            Tmp3 = (i_160051 <= 63);          }        if (!Tmp3) break L2;
          temp_frames_160060[i_160051].Field0 = it_160049.procname;
          temp_frames_160060[i_160051].Field1 = it_160049.line;
          i_160051 += 1;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    L4: do {
        L5: while (true) {
        if (!!((it_160049 == null))) break L5;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    result_160041[0] = nimCopy(null, [], NTI112);
    if (!((total_160053 == i_160051))) {
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("(")); } else { result_160041[0] = makeNimstrLit("("); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr(((total_160053 - i_160051))+"")); } else { result_160041[0] = cstrToNimstr(((total_160053 - i_160051))+"").slice(); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_160041[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
    }
    
    L6: do {
      var j_175236 = 0;
      var colontmp__10305663 = 0;
      colontmp__10305663 = (i_160051 - 1);
      var res_10305668 = colontmp__10305663;
      L7: do {
          L8: while (true) {
          if (!(0 <= res_10305668)) break L8;
            j_175236 = res_10305668;
            add_142042(result_160041, 0, temp_frames_160060[j_175236].Field0);
            if ((0 < temp_frames_160060[j_175236].Field1)) {
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(", line: ")); } else { result_160041[0] = makeNimstrLit(", line: "); };
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr((temp_frames_160060[j_175236].Field1)+"")); } else { result_160041[0] = cstrToNimstr((temp_frames_160060[j_175236].Field1)+"").slice(); };
            }
            
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("\x0A")); } else { result_160041[0] = makeNimstrLit("\x0A"); };
            res_10305668 -= 1;
          }
      } while(false);
    } while(false);

  return result_160041[0];

}
function raw_write_stack_trace_180059() {
  var result_180061 = null;

    if (!((framePtr == null))) {
    result_180061 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_160038(framePtr) || []), NTI112);
    }
    else {
      result_180061 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI112);
    }
    

  return result_180061;

}
function new_seq_225128(len_225131) {
  var result_225133 = null;

  var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 643;
    result_225133 = new Array(len_225131); for (var i=0;i<len_225131;++i) {result_225133[i]=null;}  framePtr = F.prev;

  return result_225133;

}
function unhandledException(e_185059) {
    var buf_185060 = [[]];
    if (!(((e_185059.message != null ? e_185059.message.length : 0) == 0))) {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception: "); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(e_185059.message); } else { buf_185060[0] = e_185059.message.slice(); };
    }
    else {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception"); };
    }
    
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit(" [")); } else { buf_185060[0] = makeNimstrLit(" ["); };
    add_142042(buf_185060, 0, e_185059.name);
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("]\x0A")); } else { buf_185060[0] = makeNimstrLit("]\x0A"); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(raw_write_stack_trace_180059()); } else { buf_185060[0] = raw_write_stack_trace_180059().slice(); };
    var cbuf_190201 = toJSStr(buf_185060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_190201);
  }
  else {
    throw cbuf_190201;
  }
  

  
}
function sys_fatal_102618(message_102622) {
  var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
  framePtr = F;
    F.line = 49;
    raiseException({message: nimCopy(null, message_102622, NTI112), m_type: NTI6241, parent: null, name: null, trace: null, up: null}, "AssertionError");
  framePtr = F.prev;

  
}
function raise_assert_102614(msg_102616) {
  var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 22;
    sys_fatal_102618(msg_102616);
  framePtr = F.prev;

  
}
function failed_assert_impl_102680(msg_102682) {
  var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 29;
    raise_assert_102614(msg_102682);
  framePtr = F.prev;

  
}
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI6253, name: null, trace: null, up: null}, "RangeError");

  
}
function init_table_10285038(initial_size_10285042) {
  var result_10285058 = ({data: null, counter: 0});

  var F={procname:"initTable.initTable",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (!(is_power_of_two_8805029(initial_size_10285042))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(initialSize)` "));
    }
    
    F.line = 167;
    result_10285058.counter = 0;
    F.line = 168;
    result_10285058.data = new Array(chckRange(initial_size_10285042, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_10285042, 0, 2147483647);++i) {result_10285058.data[i]={Field0: 0, Field1: null, Field2: null};}  framePtr = F.prev;

  return result_10285058;

}
var world_positions_10305629 = [init_table_10285038(64)];
function init_table_10425278(initial_size_10425282) {
  var result_10425298 = ({data: null, counter: 0});

  var F={procname:"initTable.initTable",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (!(is_power_of_two_8805029(initial_size_10425282))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(initialSize)` "));
    }
    
    F.line = 167;
    result_10425298.counter = 0;
    F.line = 168;
    result_10425298.data = new Array(chckRange(initial_size_10425282, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_10425282, 0, 2147483647);++i) {result_10425298.data[i]={Field0: 0, Field1: null, Field2: null};}  framePtr = F.prev;

  return result_10425298;

}
var clip_bounds_10445629 = [init_table_10425278(64)];
function init_table_10586076(initial_size_10586080) {
  var result_10586096 = ({data: null, counter: 0});

  var F={procname:"initTable.initTable",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (!(is_power_of_two_8805029(initial_size_10586080))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(initialSize)` "));
    }
    
    F.line = 167;
    result_10586096.counter = 0;
    F.line = 168;
    result_10586096.data = new Array(chckRange(initial_size_10586080, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_10586080, 0, 2147483647);++i) {result_10586096.data[i]={Field0: 0, Field1: null, Field2: null};}  framePtr = F.prev;

  return result_10586096;

}
var bounds_changed_handlers_10605629 = [init_table_10586076(64)];
function init_table_10716103(initial_size_10716107) {
  var result_10716123 = ({data: null, counter: 0});

  var F={procname:"initTable.initTable",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (!(is_power_of_two_8805029(initial_size_10716107))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(initialSize)` "));
    }
    
    F.line = 167;
    result_10716123.counter = 0;
    F.line = 168;
    result_10716123.data = new Array(chckRange(initial_size_10716107, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_10716107, 0, 2147483647);++i) {result_10716123.data[i]={Field0: 0, Field1: null, Field2: ({data: null, counter: 0})};}  framePtr = F.prev;

  return result_10716123;

}
var tags_10735629 = [init_table_10716103(64)];
function init_10735726(s_10735731, initial_size_10735732) {
  var F={procname:"init.init",prev:framePtr,filename:"sets.nim",line:0};
  framePtr = F;
    if (!(is_power_of_two_8805029(initial_size_10735732))) {
    F.line = 19;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/setimpl.nim(19, 10) `isPowerOfTwo(initialSize)` "));
    }
    
    F.line = 23;
    s_10735731.counter = 0;
    F.line = 118;
    s_10735731.data = new Array(chckRange(initial_size_10735732, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_10735732, 0, 2147483647);++i) {s_10735731.data[i]={Field0: 0, Field1: null};}  framePtr = F.prev;

  
}
function init_hash_set_10735706(initial_size_10735709) {
  var result_10735711 = [({data: null, counter: 0})];

  var F={procname:"initHashSet.initHashSet",prev:framePtr,filename:"sets.nim",line:0};
  framePtr = F;
    F.line = 137;
    init_10735726(result_10735711[0], initial_size_10735709);
  framePtr = F.prev;

  return result_10735711[0];

}
function init_layout_manager_10912084() {
  var result_10912086 = null;

  var F={procname:"element.initLayoutManager",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 27;
    result_10912086 = {toMeasure: init_hash_set_10735706(64), toArrange: init_hash_set_10735706(64)};
  framePtr = F.prev;

  return result_10912086;

}
var instance_10912142 = init_layout_manager_10912084();
function emitter_10605706() {
  var result_10605710 = null;

  var F={procname:"emitter.emitter",prev:framePtr,filename:"events.nim",line:0};
  framePtr = F;
    F.line = 12;
    result_10605710 = {listeners: [], toAdd: [], toRemove: []};
  framePtr = F.prev;

  return result_10605710;

}
var emitterHEX60gensym10935642_10940006 = [emitter_10605706()];
function init_table_11256098(initial_size_11256102) {
  var result_11256118 = ({data: null, counter: 0});

  var F={procname:"initTable.initTable",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (!(is_power_of_two_8805029(initial_size_11256102))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(initialSize)` "));
    }
    
    F.line = 167;
    result_11256118.counter = 0;
    F.line = 168;
    result_11256118.data = new Array(chckRange(initial_size_11256102, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_11256102, 0, 2147483647);++i) {result_11256118.data[i]={Field0: 0, Field1: 0, Field2: 0};}  framePtr = F.prev;

  return result_11256118;

}
var intrinsic_dock_props_11275629 = [init_table_11256098(64)];
var measure_text_11440012 = [null];
function init_table_11521170(initial_size_11521174) {
  var result_11521176 = ({data: null, counter: 0});

  var F={procname:"initTable.initTable",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (!(is_power_of_two_8805029(initial_size_11521174))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(initialSize)` "));
    }
    
    F.line = 167;
    result_11521176.counter = 0;
    F.line = 168;
    result_11521176.data = new Array(chckRange(initial_size_11521174, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_11521174, 0, 2147483647);++i) {result_11521176.data[i]={Field0: 0, Field1: null, Field2: null};}  framePtr = F.prev;

  return result_11521176;

}
var debug_drawings_11540629 = [init_table_11521170(64)];
function init_table_11695012(initial_size_11695016) {
  var result_11695032 = ({data: null, counter: 0});

  var F={procname:"initTable.initTable",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (!(is_power_of_two_8805029(initial_size_11695016))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(initialSize)` "));
    }
    
    F.line = 167;
    result_11695032.counter = 0;
    F.line = 168;
    result_11695032.data = new Array(chckRange(initial_size_11695016, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_11695016, 0, 2147483647);++i) {result_11695032.data[i]={Field0: 0, Field1: null, Field2: null};}  framePtr = F.prev;

  return result_11695032;

}
var behaviors_list_11715629 = [init_table_11695012(64)];
function init_table_11840029(initial_size_11840033) {
  var result_11840049 = ({data: null, counter: 0});

  var F={procname:"initTable.initTable",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (!(is_power_of_two_8805029(initial_size_11840033))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(initialSize)` "));
    }
    
    F.line = 167;
    result_11840049.counter = 0;
    F.line = 168;
    result_11840049.data = new Array(chckRange(initial_size_11840033, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_11840033, 0, 2147483647);++i) {result_11840049.data[i]={Field0: 0, Field1: null, Field2: null};}  framePtr = F.prev;

  return result_11840049;

}
function emitter_12098745() {
  var result_12098770 = null;

  var F={procname:"emitter.emitter",prev:framePtr,filename:"events.nim",line:0};
  framePtr = F;
    F.line = 12;
    result_12098770 = {listeners: [], toAdd: [], toRemove: []};
  framePtr = F.prev;

  return result_12098770;

}
function emitter_12098856() {
  var result_12098881 = null;

  var F={procname:"emitter.emitter",prev:framePtr,filename:"events.nim",line:0};
  framePtr = F;
    F.line = 12;
    result_12098881 = {listeners: [], toAdd: [], toRemove: []};
  framePtr = F.prev;

  return result_12098881;

}
function none_11020352() {
  var result_11020369 = ({val: null});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  framePtr = F.prev;

  return result_11020369;

}
function none_11020346() {
  var result_11020350 = ({val: null, has: false});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 140;
    nimCopy(result_11020350, none_11020352(), NTI11020358);
  framePtr = F.prev;

  return result_11020350;

}
var event_tableHEX60gensym11835002_11860829 = [init_table_11840029(64)];
var event_tableHEX60gensym12025002_12030013 = [init_table_11840029(64)];
var event_tableHEX60gensym12040002_12045013 = [init_table_11840029(64)];
var event_tableHEX60gensym12055002_12060013 = [init_table_11840029(64)];
var event_tableHEX60gensym12070002_12075013 = [init_table_11840029(64)];
var event_tableHEX60gensym12085002_12090013 = [init_table_11840029(64)];
var pointer_captured_emitter_12098848 = [emitter_12098745()];
var pointer_capture_released_emitter_12098854 = [emitter_12098745()];
var key_down_emitter_12098959 = [emitter_12098856()];
var pointer_captured_to_12098967 = [none_11020346()];
function emitter_12211069() {
  var result_12211094 = null;

  var F={procname:"emitter.emitter",prev:framePtr,filename:"events.nim",line:0};
  framePtr = F;
    F.line = 12;
    result_12211094 = {listeners: [], toAdd: [], toRemove: []};
  framePtr = F.prev;

  return result_12211094;

}
var update_manager_listeners_12211172 = [emitter_12211069()];
var native_container_12321079 = document.getElementById("nativeContainer");
var hard_coded_scale_12321080 = 2.0000000000000000e+00;
function vec2_9953092(x_9953095, y_9953096) {
  var result_9953098 = null;

  var F={procname:"vec2.vec2",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 15;
    result_9953098 = {x: x_9953095, y: y_9953096};
  framePtr = F.prev;

  return result_9953098;

}
var pointer_pos_changed_this_frame_14325055 = [false];
var last_pointer_pos_14325062 = [vec2_9953092(0.0, 0.0)];
var pointer_pressed_last_frame_14325063 = [false];
var pointer_pressed_this_frame_14325064 = [false];
var window_size_14325069 = [null];
function is_some_11164534(self_11164538) {
  var result_11164539 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_11164539 = self_11164538.has;
  framePtr = F.prev;

  return result_11164539;

}
function HEX3DHEX3D_12127704(a_12127707, b_12127708) {
  var result_12127709 = false;

  var F={procname:"==.==",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 337;
    result_12127709 = (((is_some_11164534(a_12127707) && is_some_11164534(b_12127708)) && (a_12127707.val == b_12127708.val)) || (!(is_some_11164534(a_12127707)) && !(is_some_11164534(b_12127708))));
  framePtr = F.prev;

  return result_12127709;

}
function some_12128035(val_12128038) {
  var result_12128040 = ({val: 0, has: false});

  var F={procname:"some.some",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 121;
    result_12128040.has = true;
    F.line = 122;
    result_12128040.val = val_12128038;
  framePtr = F.prev;

  return result_12128040;

}
function to_option_12128028(x_12128031) {
  var result_12128033 = ({val: 0, has: false});

  var F={procname:"toOption.toOption",prev:framePtr,filename:"utils.nim",line:0};
  framePtr = F;
    F.line = 5;
    nimCopy(result_12128033, some_12128035(x_12128031), NTI10260330);
  framePtr = F.prev;

  return result_12128033;

}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI6237, name: null, trace: null, up: null}, "OverflowError");

  
}
function raiseIndexError(i_210047, a_210048, b_210049) {
    var Tmp1;

    if ((b_210049 < a_210048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_210047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_210048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_210049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI112), parent: null, m_type: NTI6249, name: null, trace: null, up: null}, "IndexError");

  
}
function with_elem_12125688(self_12125690, elem_12125691) {
  var result_12125692 = null;

  var F={procname:"element_events.withElem",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
    F.line = 75;
    result_12125692 = {sender: elem_12125691, pos: self_12125690.pos, handled: self_12125690.handled};
  framePtr = F.prev;

  return result_12125692;

}
function is_some_10912193(self_10912197) {
  var result_10912198 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_10912198 = !((self_10912197.val == null));
  framePtr = F.prev;

  return result_10912198;

}
function is_none_10912515(self_10912519) {
  var result_10912520 = false;

  var F={procname:"isNone.isNone",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 158;
    result_10912520 = (self_10912519.val == null);
  framePtr = F.prev;

  return result_10912520;

}
function get_10995156(self_10995161) {
  var result_10995163 = null;
  var result_10995163_Idx = 0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (is_none_10912515(self_10995161)) {
    F.line = 215;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI9950204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    F.line = 216;
    result_10995163 = self_10995161; result_10995163_Idx = "val";
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return [result_10995163, result_10995163_Idx];

}
function pointer_captured_by_someone_else_12120459(self_12120461) {
    var Tmp1;
      var Tmp2;

  var result_12120462 = false;

  var F={procname:"element_events.pointerCapturedBySomeoneElse",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
    F.line = 59;
    if (!is_some_10912193(pointer_captured_to_12098967[0])) Tmp1 = false; else {      Tmp1 = !(((Tmp2 = get_10995156(pointer_captured_to_12098967[0]), Tmp2)[0][Tmp2[1]] == self_12120461));    }    result_12120462 = Tmp1;
  framePtr = F.prev;

  return result_12120462;

}
function hash_10095440(x_10095443) {
  var result_10095444 = 0;

  var F={procname:"hash.hash",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
    F.line = 116;
    result_10095444 = x_10095443;
  framePtr = F.prev;

  return result_10095444;

}
function hash_10285010(element_10285012) {
  var result_10285013 = 0;

  var F={procname:"types.hash",prev:framePtr,filename:"types.nim",line:0};
  framePtr = F;
    F.line = 176;
    result_10285013 = hash_10095440(element_10285012.id);
  framePtr = F.prev;

  return result_10285013;

}
function is_filled_10157018(hcode_10157020) {
  var result_10157021 = false;

  var F={procname:"tables.isFilled",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    F.line = 27;
    result_10157021 = !((hcode_10157020 == 0));
  framePtr = F.prev;

  return result_10157021;

}
function next_try_10160014(h_10160016, max_hash_10160017) {
  var result_10160018 = 0;

  var F={procname:"tables.nextTry",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    F.line = 30;
    result_10160018 = (addInt(h_10160016, 1) & max_hash_10160017);
  framePtr = F.prev;

  return result_10160018;

}
function raw_get_10305802(t_10305806, key_10305807, hc_10305808, hc_10305808_Idx) {
            var Tmp3;

  var result_10305809 = 0;

  var F={procname:"rawGet.rawGet",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 63;
    hc_10305808[hc_10305808_Idx] = hash_10285010(key_10305807);
    if ((hc_10305808[hc_10305808_Idx] == 0)) {
    F.line = 65;
    hc_10305808[hc_10305808_Idx] = 314159265;
    }
    
    if (((t_10305806.data != null ? t_10305806.data.length : 0) == 0)) {
    F.line = 47;
    result_10305809 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_10315138 = (hc_10305808[hc_10305808_Idx] & (t_10305806.data != null ? (t_10305806.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_10157018(t_10305806.data[chckIndx(h_10315138, 0, (t_10305806.data != null ? t_10305806.data.length : 0)+0-1)-0].Field0)) break L2;
            if (!(t_10305806.data[chckIndx(h_10315138, 0, (t_10305806.data != null ? t_10305806.data.length : 0)+0-1)-0].Field0 == hc_10305808[hc_10305808_Idx])) Tmp3 = false; else {              Tmp3 = (t_10305806.data[chckIndx(h_10315138, 0, (t_10305806.data != null ? t_10305806.data.length : 0)+0-1)-0].Field1 == key_10305807);            }          if (Tmp3) {
          F.line = 55;
          result_10305809 = h_10315138;
          break BeforeRet;
          }
          
          F.line = 56;
          h_10315138 = next_try_10160014(h_10315138, (t_10305806.data != null ? (t_10305806.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_10305809 = subInt(-1, h_10315138);
  } while (false);
  framePtr = F.prev;

  return result_10305809;

}
function has_key_10305793(t_10305798, key_10305799) {
  var result_10305800 = false;

  var F={procname:"hasKey.hasKey",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 395;
    var hc_10305801 = [0];
    F.line = 396;
    result_10305800 = (0 <= raw_get_10305802(t_10305798, key_10305799, hc_10305801, 0));
  framePtr = F.prev;

  return result_10305800;

}
function HEX5BHEX5D_10315862(t_10315868, key_10315869) {
  var result_10315871 = null;
  var result_10315871_Idx = 0;

  var F={procname:"[].[]",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 257;
    var hcHEX60gensym10160424_10315872 = [0];
    F.line = 258;
    var indexHEX60gensym10160425_10315881 = raw_get_10305802(t_10315868, key_10315869, hcHEX60gensym10160424_10315872, 0);
    if ((0 <= indexHEX60gensym10160425_10315881)) {
    F.line = 259;
    result_10315871 = t_10315868.data[chckIndx(indexHEX60gensym10160425_10315881, 0, (t_10315868.data != null ? t_10315868.data.length : 0)+0-1)-0]; result_10315871_Idx = "Field2";
    }
    else {
      F.line = 264;
      raiseException({message: makeNimstrLit("key not found"), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    
  framePtr = F.prev;

  return [result_10315871, result_10315871_Idx];

}
function actual_world_position_10305676(self_10305678) {
    var Tmp1;

  var result_10305683 = null;

  var F={procname:"types.actualWorldPosition",prev:framePtr,filename:"types.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (has_key_10305793(world_positions_10305629[0], self_10305678)) {
    F.line = 184;
    result_10305683 = (Tmp1 = HEX5BHEX5D_10315862(world_positions_10305629[0], self_10305678), Tmp1)[0][Tmp1[1]];
    break BeforeRet;
    }
    
  } while (false);
  framePtr = F.prev;

  return result_10305683;

}
function is_some_10915042(self_10915046) {
  var result_10915047 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_10915047 = !((self_10915046.val == null));
  framePtr = F.prev;

  return result_10915047;

}
function get_11195187(self_11195191, otherwise_11195192) {
    var Tmp1;

  var result_11195193 = null;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 189;
    if (is_some_10915042(self_11195191)) {
    Tmp1 = self_11195191.val;
    }
    else {
    Tmp1 = otherwise_11195192;
    }
    
    result_11195193 = Tmp1;
  framePtr = F.prev;

  return result_11195193;

}
function is_some_10330097(self_10330101) {
  var result_10330102 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_10330102 = !((self_10330101.val == null));
  framePtr = F.prev;

  return result_10330102;

}
function some_10970088(val_10970091) {
  var result_10970093 = ({val: null});

  var F={procname:"some.some",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    if (!(!((val_10970091 == null)))) {
    F.line = 118;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/options.nim(118, 11) `not val.isNil` "));
    }
    
    F.line = 119;
    result_10970093.val = val_10970091;
  framePtr = F.prev;

  return result_10970093;

}
function none_10980428() {
  var result_10980445 = ({val: null});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  framePtr = F.prev;

  return result_10980445;

}
function map_11195074(self_11195079, callback_11195082) {
    var Tmp1;

  var result_11195084 = ({val: null});

  var F={procname:"map.map",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 243;
    if (is_some_10330097(self_11195079)) {
    Tmp1 = some_10970088(callback_11195082(self_11195079.val));
    }
    else {
    Tmp1 = none_10980428();
    }
    
    nimCopy(result_11195084, Tmp1, NTI10275060);
  framePtr = F.prev;

  return result_11195084;

}
function zero_9953079() {
  var result_9953091 = null;

  var F={procname:"vec.zero",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 24;
    result_9953091 = vec2_9953092(0.0, 0.0);
  framePtr = F.prev;

  return result_9953091;

}
function is_point_inside_11190125(self_11190127, point_11190132) {
    function HEX3Aanonymous_11195001(x_11195025) {
      var result_11195029 = null;

      var F={procname:"isPointInside.:anonymous",prev:framePtr,filename:"element.nim",line:0};
      framePtr = F;
        F.line = 442;
        result_11195029 = x_11195025.size;
      framePtr = F.prev;

      return result_11195029;

    }
    var Tmp1;
    var Tmp2;
    var Tmp3;

  var result_11190133 = false;

  var F={procname:"element.isPointInside",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 441;
    F.line = 441;
    var pos_11190134 = actual_world_position_10305676(self_11190127);
    F.line = 442;
    var size_11195227 = get_11195187(map_11195074(self_11190127.bounds, HEX3Aanonymous_11195001), zero_9953079());
    if (!(pos_11190134.x < point_11190132.x)) Tmp3 = false; else {      Tmp3 = (point_11190132.x < (pos_11190134.x + size_11195227.x));    }    if (!Tmp3) Tmp2 = false; else {      Tmp2 = (pos_11190134.y < point_11190132.y);    }    if (!Tmp2) Tmp1 = false; else {      Tmp1 = (point_11190132.y < (pos_11190134.y + size_11195227.y));    }    result_11190133 = Tmp1;
  framePtr = F.prev;

  return result_11190133;

}
function pointer_captured_12098999(self_12099001) {
    var Tmp1;
      var Tmp2;

  var result_12099002 = false;

  var F={procname:"element_events.pointerCaptured",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
    F.line = 48;
    if (!is_some_10912193(pointer_captured_to_12098967[0])) Tmp1 = false; else {      Tmp1 = ((Tmp2 = get_10995156(pointer_captured_to_12098967[0]), Tmp2)[0][Tmp2[1]] == self_12099001);    }    result_12099002 = Tmp1;
  framePtr = F.prev;

  return result_12099002;

}
function raw_get_11890802(t_11890806, key_11890807, hc_11890808, hc_11890808_Idx) {
            var Tmp3;

  var result_11890809 = 0;

  var F={procname:"rawGet.rawGet",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 63;
    hc_11890808[hc_11890808_Idx] = hash_10285010(key_11890807);
    if ((hc_11890808[hc_11890808_Idx] == 0)) {
    F.line = 65;
    hc_11890808[hc_11890808_Idx] = 314159265;
    }
    
    if (((t_11890806.data != null ? t_11890806.data.length : 0) == 0)) {
    F.line = 47;
    result_11890809 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_11901585 = (hc_11890808[hc_11890808_Idx] & (t_11890806.data != null ? (t_11890806.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_10157018(t_11890806.data[chckIndx(h_11901585, 0, (t_11890806.data != null ? t_11890806.data.length : 0)+0-1)-0].Field0)) break L2;
            if (!(t_11890806.data[chckIndx(h_11901585, 0, (t_11890806.data != null ? t_11890806.data.length : 0)+0-1)-0].Field0 == hc_11890808[hc_11890808_Idx])) Tmp3 = false; else {              Tmp3 = (t_11890806.data[chckIndx(h_11901585, 0, (t_11890806.data != null ? t_11890806.data.length : 0)+0-1)-0].Field1 == key_11890807);            }          if (Tmp3) {
          F.line = 55;
          result_11890809 = h_11901585;
          break BeforeRet;
          }
          
          F.line = 56;
          h_11901585 = next_try_10160014(h_11901585, (t_11890806.data != null ? (t_11890806.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_11890809 = subInt(-1, h_11901585);
  } while (false);
  framePtr = F.prev;

  return result_11890809;

}
function has_key_11978094(t_11978099, key_11978100) {
  var result_11978101 = false;

  var F={procname:"hasKey.hasKey",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 395;
    var hc_11978102 = [0];
    F.line = 396;
    result_11978101 = (0 <= raw_get_11890802(t_11978099, key_11978100, hc_11978102, 0));
  framePtr = F.prev;

  return result_11978101;

}
function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI6235, name: null, trace: null, up: null}, "DivByZeroError");

  
}
function parse_saturated_natural_1120017(s_1120019, b_1120021, b_1120021_Idx, start_1120022) {
      var Tmp1;
          var Tmp4;

  var result_1120024 = 0;

  var F={procname:"parseutils.parseSaturatedNatural",prev:framePtr,filename:"parseutils.nim",line:0};
  framePtr = F;
    F.line = 476;
    var i_1120025 = start_1120022;
    if (((i_1120025 < (s_1120019 != null ? s_1120019.length : 0)) && (s_1120019[chckIndx(i_1120025, 0, (s_1120019 != null ? s_1120019.length : 0)+0-1)-0] == 43))) {
    F.line = 477;
    i_1120025 = addInt(i_1120025, 1);
    }
    
      if (!(i_1120025 < (s_1120019 != null ? s_1120019.length : 0))) Tmp1 = false; else {        Tmp1 = (ConstSet6[s_1120019[chckIndx(i_1120025, 0, (s_1120019 != null ? s_1120019.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    F.line = 479;
    b_1120021[b_1120021_Idx] = 0;
    L2: do {
      F.line = 480;
        L3: while (true) {
          if (!(i_1120025 < (s_1120019 != null ? s_1120019.length : 0))) Tmp4 = false; else {            Tmp4 = (ConstSet7[s_1120019[chckIndx(i_1120025, 0, (s_1120019 != null ? s_1120019.length : 0)+0-1)-0]] != undefined);          }        if (!Tmp4) break L3;
          F.line = 481;
          var c_1130016 = subInt(s_1120019[chckIndx(i_1120025, 0, (s_1120019 != null ? s_1120019.length : 0)+0-1)-0], 48);
          if ((b_1120021[b_1120021_Idx] <= divInt(subInt(2147483647, c_1130016), 10))) {
          F.line = 483;
          b_1120021[b_1120021_Idx] = addInt(mulInt(b_1120021[b_1120021_Idx], 10), c_1130016);
          }
          else {
            F.line = 485;
            b_1120021[b_1120021_Idx] = 2147483647;
          }
          
          F.line = 486;
          i_1120025 = addInt(i_1120025, 1);
          L5: do {
            F.line = 487;
              L6: while (true) {
              if (!((i_1120025 < (s_1120019 != null ? s_1120019.length : 0)) && (s_1120019[chckIndx(i_1120025, 0, (s_1120019 != null ? s_1120019.length : 0)+0-1)-0] == 95))) break L6;
                F.line = 487;
                i_1120025 = addInt(i_1120025, 1);
              }
          } while(false);
        }
    } while(false);
    F.line = 488;
    result_1120024 = subInt(i_1120025, start_1120022);
    }
    
  framePtr = F.prev;

  return result_1120024;

}
function HEX5BHEX5D_4530068(s_4530072, x_4530074) {
  var result_4530075 = null;

  var F={procname:"[].[]",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2436;
    var a_4530201 = x_4530074.a;
    F.line = 2437;
    var l_4530401 = addInt(subInt(subInt((s_4530072 != null ? s_4530072.length : 0), x_4530074.b), a_4530201), 1);
    F.line = 2438;
    result_4530075 = nimCopy(null, mnewString(chckRange(l_4530401, 0, 2147483647)), NTI112);
    L1: do {
      F.line = 2439;
      var i_4530409 = 0;
      F.line = 106;
      var i_14325823 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_14325823 < l_4530401)) break L3;
            F.line = 2439;
            i_4530409 = i_14325823;
            F.line = 2439;
            result_4530075[chckIndx(i_4530409, 0, (result_4530075 != null ? result_4530075.length : 0)+0-1)-0] = s_4530072[chckIndx(addInt(i_4530409, a_4530201), 0, (s_4530072 != null ? s_4530072.length : 0)+0-1)-0];
            F.line = 109;
            i_14325823 = addInt(i_14325823, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_4530075;

}
function HEX2EHEX2E_4530001(a_4530006, b_4530008) {
  var result_4530014 = ({a: 0, b: 0});

  var F={procname:".....",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 469;
    nimCopy(result_4530014, {a: a_4530006, b: b_4530008}, NTI4530011);
  framePtr = F.prev;

  return result_4530014;

}
function parse_standard_format_specifier_9840322(s_9840324, start_9840325, ignore_unknown_suffix_9840327) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_9840328 = ({fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0});

  var F={procname:"strformat.parseStandardFormatSpecifier",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    F.line = 379;
    result_9840328.fill = 32;
    F.line = 380;
    result_9840328.align = 0;
    F.line = 381;
    result_9840328.sign = 45;
    F.line = 382;
    var i_9840331 = start_9840325;
    if (((addInt(i_9840331, 1) < (s_9840324 != null ? s_9840324.length : 0)) && (ConstSet2[s_9840324[chckIndx(addInt(i_9840331, 1), 0, (s_9840324 != null ? s_9840324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 384;
    result_9840328.fill = s_9840324[chckIndx(i_9840331, 0, (s_9840324 != null ? s_9840324.length : 0)+0-1)-0];
    F.line = 385;
    result_9840328.align = s_9840324[chckIndx(addInt(i_9840331, 1), 0, (s_9840324 != null ? s_9840324.length : 0)+0-1)-0];
    F.line = 386;
    i_9840331 = addInt(i_9840331, 2);
    }
    else {
    if (((i_9840331 < (s_9840324 != null ? s_9840324.length : 0)) && (ConstSet3[s_9840324[chckIndx(i_9840331, 0, (s_9840324 != null ? s_9840324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 388;
    result_9840328.align = s_9840324[chckIndx(i_9840331, 0, (s_9840324 != null ? s_9840324.length : 0)+0-1)-0];
    F.line = 389;
    i_9840331 = addInt(i_9840331, 1);
    }
    }
    if (((i_9840331 < (s_9840324 != null ? s_9840324.length : 0)) && (ConstSet4[s_9840324[chckIndx(i_9840331, 0, (s_9840324 != null ? s_9840324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 392;
    result_9840328.sign = s_9840324[chckIndx(i_9840331, 0, (s_9840324 != null ? s_9840324.length : 0)+0-1)-0];
    F.line = 393;
    i_9840331 = addInt(i_9840331, 1);
    }
    
    if (((i_9840331 < (s_9840324 != null ? s_9840324.length : 0)) && (s_9840324[chckIndx(i_9840331, 0, (s_9840324 != null ? s_9840324.length : 0)+0-1)-0] == 35))) {
    F.line = 396;
    result_9840328.alternateForm = true;
    F.line = 397;
    i_9840331 = addInt(i_9840331, 1);
    }
    
      if (!((addInt(i_9840331, 1) < (s_9840324 != null ? s_9840324.length : 0)) && (s_9840324[chckIndx(i_9840331, 0, (s_9840324 != null ? s_9840324.length : 0)+0-1)-0] == 48))) Tmp1 = false; else {        Tmp1 = (ConstSet5[s_9840324[chckIndx(addInt(i_9840331, 1), 0, (s_9840324 != null ? s_9840324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    F.line = 400;
    result_9840328.padWithZero = true;
    F.line = 401;
    i_9840331 = addInt(i_9840331, 1);
    }
    
    F.line = 403;
    var parsed_length_9860015 = parse_saturated_natural_1120017(s_9840324, result_9840328, "minimumWidth", i_9840331);
    F.line = 404;
    i_9840331 = addInt(i_9840331, parsed_length_9860015);
    if (((i_9840331 < (s_9840324 != null ? s_9840324.length : 0)) && (s_9840324[chckIndx(i_9840331, 0, (s_9840324 != null ? s_9840324.length : 0)+0-1)-0] == 46))) {
    F.line = 406;
    i_9840331 = addInt(i_9840331, 1);
    F.line = 407;
    var parsed_length_b_9860029 = parse_saturated_natural_1120017(s_9840324, result_9840328, "precision", i_9840331);
    F.line = 408;
    i_9840331 = addInt(i_9840331, parsed_length_b_9860029);
    }
    else {
      F.line = 410;
      result_9840328.precision = -1;
    }
    
      if (!(i_9840331 < (s_9840324 != null ? s_9840324.length : 0))) Tmp2 = false; else {        Tmp2 = (ConstSet8[s_9840324[chckIndx(i_9840331, 0, (s_9840324 != null ? s_9840324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp2) {
    F.line = 413;
    result_9840328.typ = s_9840324[chckIndx(i_9840331, 0, (s_9840324 != null ? s_9840324.length : 0)+0-1)-0];
    F.line = 414;
    i_9840331 = addInt(i_9840331, 1);
    }
    
    F.line = 415;
    result_9840328.endPosition = i_9840331;
      if (!!((i_9840331 == (s_9840324 != null ? s_9840324.length : 0)))) Tmp3 = false; else {        Tmp3 = !(ignore_unknown_suffix_9840327);      }    if (Tmp3) {
    F.line = 417;
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_4530068(s_9840324, HEX2EHEX2E_4530001(i_9840331, 1)) || []), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
    }
    
  framePtr = F.prev;

  return result_9840328;

}
function nucruneLen(s_1201829) {
  var result_1201830 = 0;

  var F={procname:"unicode.runeLen",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
    F.line = 41;
    var i_1201832 = 0;
    L1: do {
      F.line = 42;
        L2: while (true) {
        if (!(i_1201832 < (s_1201829 != null ? s_1201829.length : 0))) break L2;
          if ((s_1201829[chckIndx(i_1201832, 0, (s_1201829 != null ? s_1201829.length : 0)+0-1)-0] <= 127)) {
          F.line = 43;
          i_1201832 = addInt(i_1201832, 1);
          }
          else {
          if ((((s_1201829[chckIndx(i_1201832, 0, (s_1201829 != null ? s_1201829.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          F.line = 44;
          i_1201832 = addInt(i_1201832, 2);
          }
          else {
          if ((((s_1201829[chckIndx(i_1201832, 0, (s_1201829 != null ? s_1201829.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
          F.line = 45;
          i_1201832 = addInt(i_1201832, 3);
          }
          else {
          if ((((s_1201829[chckIndx(i_1201832, 0, (s_1201829 != null ? s_1201829.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
          F.line = 46;
          i_1201832 = addInt(i_1201832, 4);
          }
          else {
          if ((((s_1201829[chckIndx(i_1201832, 0, (s_1201829 != null ? s_1201829.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
          F.line = 47;
          i_1201832 = addInt(i_1201832, 5);
          }
          else {
          if ((((s_1201829[chckIndx(i_1201832, 0, (s_1201829 != null ? s_1201829.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
          F.line = 48;
          i_1201832 = addInt(i_1201832, 6);
          }
          else {
            F.line = 49;
          i_1201832 = addInt(i_1201832, 1);
          }
          }}}}}
          F.line = 50;
          result_1201830 = addInt(result_1201830, 1);
        }
    } while(false);
  framePtr = F.prev;

  return result_1201830;

}
function rune_len_at_1201932(s_1201934, i_1201935) {
  var result_1201936 = 0;

  var F={procname:"unicode.runeLenAt",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
    if ((s_1201934[chckIndx(i_1201935, 0, (s_1201934 != null ? s_1201934.length : 0)+0-1)-0] <= 127)) {
    F.line = 62;
    result_1201936 = 1;
    }
    else {
    if ((((s_1201934[chckIndx(i_1201935, 0, (s_1201934 != null ? s_1201934.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
    F.line = 63;
    result_1201936 = 2;
    }
    else {
    if ((((s_1201934[chckIndx(i_1201935, 0, (s_1201934 != null ? s_1201934.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
    F.line = 64;
    result_1201936 = 3;
    }
    else {
    if ((((s_1201934[chckIndx(i_1201935, 0, (s_1201934 != null ? s_1201934.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
    F.line = 65;
    result_1201936 = 4;
    }
    else {
    if ((((s_1201934[chckIndx(i_1201935, 0, (s_1201934 != null ? s_1201934.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
    F.line = 66;
    result_1201936 = 5;
    }
    else {
    if ((((s_1201934[chckIndx(i_1201935, 0, (s_1201934 != null ? s_1201934.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
    F.line = 67;
    result_1201936 = 6;
    }
    else {
      F.line = 68;
      result_1201936 = 1;
    }
    }}}}}
  framePtr = F.prev;

  return result_1201936;

}
function rune_offset_1825244(s_1825246, pos_1825247, start_1825248) {
  var result_1825249 = 0;

  var F={procname:"unicode.runeOffset",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 319;
    var i_1825251 = 0;
    F.line = 320;
    var o_1825252 = start_1825248;
    L1: do {
      F.line = 321;
        L2: while (true) {
        if (!(i_1825251 < pos_1825247)) break L2;
          F.line = 322;
          o_1825252 = addInt(o_1825252, chckRange(rune_len_at_1201932(s_1825246, o_1825252), 0, 2147483647));
          if (((s_1825246 != null ? s_1825246.length : 0) <= o_1825252)) {
          F.line = 324;
          result_1825249 = -1;
          break BeforeRet;
          }
          
          F.line = 325;
          i_1825251 = addInt(i_1825251, 1);
        }
    } while(false);
    F.line = 326;
    result_1825249 = o_1825252;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1825249;

}
function validate_utf8_1445229(s_1445231) {
            var Tmp3;
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;

  var result_1445232 = 0;

  var F={procname:"unicode.validateUtf8",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 172;
    var i_1445234 = 0;
    F.line = 173;
    var l_1445235 = (s_1445231 != null ? s_1445231.length : 0);
    L1: do {
      F.line = 174;
        L2: while (true) {
        if (!(i_1445234 < l_1445235)) break L2;
          if ((s_1445231[chckIndx(i_1445234, 0, (s_1445231 != null ? s_1445231.length : 0)+0-1)-0] <= 127)) {
          F.line = 176;
          i_1445234 = addInt(i_1445234, 1);
          }
          else {
          if ((((s_1445231[chckIndx(i_1445234, 0, (s_1445231 != null ? s_1445231.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          if ((s_1445231[chckIndx(i_1445234, 0, (s_1445231 != null ? s_1445231.length : 0)+0-1)-0] < 194)) {
          F.line = 178;
          result_1445232 = i_1445234;
          break BeforeRet;
          }
          
            if (!(addInt(i_1445234, 1) < l_1445235)) Tmp3 = false; else {              Tmp3 = (((s_1445231[chckIndx(addInt(i_1445234, 1), 0, (s_1445231 != null ? s_1445231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp3) {
          F.line = 179;
          i_1445234 = addInt(i_1445234, 2);
          }
          else {
            F.line = 180;
            result_1445232 = i_1445234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_1445231[chckIndx(i_1445234, 0, (s_1445231 != null ? s_1445231.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
            if (!(addInt(i_1445234, 2) < l_1445235)) Tmp5 = false; else {              Tmp5 = (((s_1445231[chckIndx(addInt(i_1445234, 1), 0, (s_1445231 != null ? s_1445231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp5) Tmp4 = false; else {              Tmp4 = (((s_1445231[chckIndx(addInt(i_1445234, 2), 0, (s_1445231 != null ? s_1445231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp4) {
          F.line = 183;
          i_1445234 = addInt(i_1445234, 3);
          }
          else {
            F.line = 184;
            result_1445232 = i_1445234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_1445231[chckIndx(i_1445234, 0, (s_1445231 != null ? s_1445231.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
            if (!(addInt(i_1445234, 3) < l_1445235)) Tmp8 = false; else {              Tmp8 = (((s_1445231[chckIndx(addInt(i_1445234, 1), 0, (s_1445231 != null ? s_1445231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp8) Tmp7 = false; else {              Tmp7 = (((s_1445231[chckIndx(addInt(i_1445234, 2), 0, (s_1445231 != null ? s_1445231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp7) Tmp6 = false; else {              Tmp6 = (((s_1445231[chckIndx(addInt(i_1445234, 3), 0, (s_1445231 != null ? s_1445231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp6) {
          F.line = 189;
          i_1445234 = addInt(i_1445234, 4);
          }
          else {
            F.line = 190;
            result_1445232 = i_1445234;
            break BeforeRet;
          }
          
          }
          else {
            F.line = 192;
            result_1445232 = i_1445234;
            break BeforeRet;
          }
          }}}
        }
    } while(false);
    F.line = 193;
    result_1445232 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1445232;

}
function nsuRepeatChar(c_9385048, count_9385049) {
  var result_9385050 = null;

  var F={procname:"strutils.repeat",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 1282;
    result_9385050 = nimCopy(null, mnewString(count_9385049), NTI112);
    L1: do {
      F.line = 1283;
      var i_9385059 = 0;
      F.line = 66;
      var colontmp__14325854 = 0;
      F.line = 1283;
      colontmp__14325854 = subInt(count_9385049, 1);
      F.line = 77;
      var res_14325855 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_14325855 <= colontmp__14325854)) break L3;
            F.line = 1283;
            i_9385059 = res_14325855;
            F.line = 1283;
            result_9385050[chckIndx(i_9385059, 0, (result_9385050 != null ? result_9385050.length : 0)+0-1)-0] = c_9385048;
            F.line = 80;
            res_14325855 = addInt(res_14325855, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_9385050;

}
function align_string_9840222(s_9840224, minimum_width_9840225, align_9840226, fill_9840227) {
      var Tmp1;

  var result_9840228 = null;

  var F={procname:"strformat.alignString",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    if ((minimum_width_9840225 == 0)) {
    F.line = 282;
    result_9840228 = nimCopy(null, s_9840224, NTI112);
    }
    else {
      F.line = 284;
      if ((validate_utf8_1445229(s_9840224) == -1)) {
      Tmp1 = nucruneLen(s_9840224);
      }
      else {
      Tmp1 = (s_9840224 != null ? s_9840224.length : 0);
      }
      
      var s_rune_len_9840229 = Tmp1;
      F.line = 285;
      var to_fill_9840230 = subInt(minimum_width_9840225, s_rune_len_9840229);
      if ((to_fill_9840230 <= 0)) {
      F.line = 287;
      result_9840228 = nimCopy(null, s_9840224, NTI112);
      }
      else {
      if (((align_9840226 == 60) || (align_9840226 == 0))) {
      F.line = 289;
      result_9840228 = nimCopy(null, (s_9840224 || []).concat(nsuRepeatChar(fill_9840227, chckRange(to_fill_9840230, 0, 2147483647)) || []), NTI112);
      }
      else {
      if ((align_9840226 == 94)) {
      F.line = 291;
      var half_9840231 = divInt(to_fill_9840230, 2);
      F.line = 292;
      result_9840228 = nimCopy(null, (nsuRepeatChar(fill_9840227, chckRange(half_9840231, 0, 2147483647)) || []).concat(s_9840224 || [],nsuRepeatChar(fill_9840227, chckRange(subInt(to_fill_9840230, half_9840231), 0, 2147483647)) || []), NTI112);
      }
      else {
        F.line = 294;
        result_9840228 = nimCopy(null, (nsuRepeatChar(fill_9840227, chckRange(to_fill_9840230, 0, 2147483647)) || []).concat(s_9840224 || []), NTI112);
      }
      }}
    }
    
  framePtr = F.prev;

  return result_9840228;

}
function format_value_9885080(result_9885083, result_9885083_Idx, value_9885084, specifier_9885085) {
  var F={procname:"strformat.formatValue",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    F.line = 502;
    var spec_9885086 = parse_standard_format_specifier_9840322(specifier_9885085, 0, false);
    F.line = 503;
    var value_9885087 = nimCopy(null, value_9885084, NTI112);
    F.line = 504;
    switch (spec_9885086.typ) {
    case 115:
    case 0:
      break;
    default: 
      F.line = 507;
      raiseException({message: (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_9885086.typ]), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
      break;
    }
    if (!((spec_9885086.precision == -1))) {
    if ((spec_9885086.precision < nucruneLen(value_9885087))) {
    F.line = 512;
    (value_9885087 == null ? value_9885087 = mnewString(chckRange(rune_offset_1825244(value_9885087, chckRange(spec_9885086.precision, 0, 2147483647), 0), 0, 2147483647)) : value_9885087.length = chckRange(rune_offset_1825244(value_9885087, chckRange(spec_9885086.precision, 0, 2147483647), 0), 0, 2147483647));
    }
    
    }
    
    F.line = 513;
    if (result_9885083[result_9885083_Idx] != null) { result_9885083[result_9885083_Idx] = (result_9885083[result_9885083_Idx]).concat(align_string_9840222(value_9885087, spec_9885086.minimumWidth, spec_9885086.align, spec_9885086.fill)); } else { result_9885083[result_9885083_Idx] = align_string_9840222(value_9885087, spec_9885086.minimumWidth, spec_9885086.align, spec_9885086.fill).slice(); };
  framePtr = F.prev;

  
}
function is_some_10330338(self_10330342) {
  var result_10330343 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_10330343 = self_10330342.has;
  framePtr = F.prev;

  return result_10330343;

}
function add_float_325219(result_325222, result_325222_Idx, x_325223) {
  var F={procname:"system.addFloat",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2350;
    if (result_325222[result_325222_Idx] != null) { result_325222[result_325222_Idx] = (result_325222[result_325222_Idx]).concat(cstrToNimstr((x_325223)+"")); } else { result_325222[result_325222_Idx] = cstrToNimstr((x_325223)+"").slice(); };
  framePtr = F.prev;

  
}
function add_quoted_11140441(s_11140444, s_11140444_Idx, x_11140445) {
  var F={procname:"addQuoted.addQuoted",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2803;
    add_float_325219(s_11140444, s_11140444_Idx, x_11140445);
  framePtr = F.prev;

  
}
function HEX24_11140415(self_11140419) {
  var result_11140420 = [null];

  var F={procname:"$.$",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    if (is_some_10330338(self_11140419)) {
    F.line = 360;
    result_11140420[0] = nimCopy(null, makeNimstrLit("Some("), NTI112);
    F.line = 361;
    add_quoted_11140441(result_11140420, 0, self_11140419.val);
    F.line = 362;
    if (result_11140420[0] != null) { result_11140420[0] = (result_11140420[0]).concat(makeNimstrLit(")")); } else { result_11140420[0] = makeNimstrLit(")"); };
    }
    else {
      F.line = 364;
      result_11140420[0] = nimCopy(null, makeNimstrLit("None[float]"), NTI112);
    }
    
  framePtr = F.prev;

  return result_11140420[0];

}
function HEX24_11136890(p_11136892) {
  var result_11136893 = null;

  var F={procname:"element.$",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 270;
    F.line = 270;
    var fmt_res_11136898 = [mnewString(0)];
    F.line = 270;
    if (fmt_res_11136898[0] != null) { fmt_res_11136898[0] = (fmt_res_11136898[0]).concat(makeNimstrLit("props: ")); } else { fmt_res_11136898[0] = makeNimstrLit("props: "); };
    F.line = 270;
    format_value_9885080(fmt_res_11136898, 0, HEX24_11140415(p_11136892.x), []);
    F.line = 270;
    if (fmt_res_11136898[0] != null) { fmt_res_11136898[0] = (fmt_res_11136898[0]).concat(makeNimstrLit(" ")); } else { fmt_res_11136898[0] = makeNimstrLit(" "); };
    F.line = 270;
    format_value_9885080(fmt_res_11136898, 0, HEX24_11140415(p_11136892.y), []);
    F.line = 270;
    if (fmt_res_11136898[0] != null) { fmt_res_11136898[0] = (fmt_res_11136898[0]).concat(makeNimstrLit(" ")); } else { fmt_res_11136898[0] = makeNimstrLit(" "); };
    F.line = 270;
    format_value_9885080(fmt_res_11136898, 0, HEX24_11140415(p_11136892.width), []);
    F.line = 270;
    if (fmt_res_11136898[0] != null) { fmt_res_11136898[0] = (fmt_res_11136898[0]).concat(makeNimstrLit(" ")); } else { fmt_res_11136898[0] = makeNimstrLit(" "); };
    F.line = 270;
    format_value_9885080(fmt_res_11136898, 0, HEX24_11140415(p_11136892.height), []);
    result_11136893 = nimCopy(null, fmt_res_11136898[0], NTI112);
  framePtr = F.prev;

  return result_11136893;

}
function HEX24_11142220(p_11142222) {
  var result_11142223 = null;

  var F={procname:"element.$",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 273;
    result_11142223 = nimCopy(null, (makeNimstrLit("Elem: ") || []).concat(HEX24_11136890(p_11142222.props) || []), NTI112);
  framePtr = F.prev;

  return result_11142223;

}
function HEX5BHEX5D_11979120(t_11979126, key_11979127) {
  var result_11979129 = null;
  var result_11979129_Idx = 0;

  var F={procname:"[].[]",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 257;
    var hcHEX60gensym10160424_11979130 = [0];
    F.line = 258;
    var indexHEX60gensym10160425_11979139 = raw_get_11890802(t_11979126, key_11979127, hcHEX60gensym10160424_11979130, 0);
    if ((0 <= indexHEX60gensym10160425_11979139)) {
    F.line = 259;
    result_11979129 = t_11979126.data[chckIndx(indexHEX60gensym10160425_11979139, 0, (t_11979126.data != null ? t_11979126.data.length : 0)+0-1)-0]; result_11979129_Idx = "Field2";
    }
    else {
      F.line = 262;
      raiseException({message: (makeNimstrLit("key not found: ") || []).concat(HEX24_11142220(key_11979127) || []), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    
  framePtr = F.prev;

  return [result_11979129, result_11979129_Idx];

}
function delete_11997632(x_11997637, x_11997637_Idx, i_11997638) {
  var F={procname:"delete.delete",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1254;
    x_11997637[x_11997637_Idx].splice(i_11997638, 1);
  framePtr = F.prev;

  
}
function find_11995415(a_11995419, item_11995420) {
  var result_11995421 = 0;

  var F={procname:"find.find",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    L1: do {
      F.line = 1751;
      var i_11995434 = null;
      F.line = 184;
      var i_14325883 = 0;
      F.line = 185;
      var l_14325884 = (a_11995419 != null ? a_11995419.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14325883 < l_14325884)) break L3;
            F.line = 1751;
            i_11995434 = a_11995419[chckIndx(i_14325883, 0, (a_11995419 != null ? a_11995419.length : 0)+0-1)-0];
            if ((i_11995434 == item_11995420)) {
            F.line = 1752;
            break BeforeRet;
            }
            
            F.line = 1753;
            result_11995421 = addInt(result_11995421, 1);
            F.line = 188;
            i_14325883 = addInt(i_14325883, 1);
            if (!(((a_11995419 != null ? a_11995419.length : 0) == l_14325884))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 1754;
    result_11995421 = -1;
  } while (false);
  framePtr = F.prev;

  return result_11995421;

}
function emit_11985043(self_11985048, self_11985048_Idx, data_11985049) {
  var F={procname:"emit.emit",prev:framePtr,filename:"events.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 24;
      var to_remove_11995414 = null;
      F.line = 184;
      var i_14325862 = 0;
      F.line = 185;
      var l_14325863 = (self_11985048[self_11985048_Idx].toRemove != null ? self_11985048[self_11985048_Idx].toRemove.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14325862 < l_14325863)) break L3;
            F.line = 24;
            to_remove_11995414 = self_11985048[self_11985048_Idx].toRemove[chckIndx(i_14325862, 0, (self_11985048[self_11985048_Idx].toRemove != null ? self_11985048[self_11985048_Idx].toRemove.length : 0)+0-1)-0];
            F.line = 25;
            delete_11997632(self_11985048[self_11985048_Idx], "listeners", chckRange(find_11995415(self_11985048[self_11985048_Idx].listeners, to_remove_11995414), 0, 2147483647));
            F.line = 188;
            i_14325862 = addInt(i_14325862, 1);
            if (!(((self_11985048[self_11985048_Idx].toRemove != null ? self_11985048[self_11985048_Idx].toRemove.length : 0) == l_14325863))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 26;
    self_11985048[self_11985048_Idx].toRemove = nimCopy(null, [], NTI12000629);
    L4: do {
      F.line = 28;
      var to_add_12000642 = null;
      F.line = 184;
      var i_14325866 = 0;
      F.line = 185;
      var l_14325867 = (self_11985048[self_11985048_Idx].toAdd != null ? self_11985048[self_11985048_Idx].toAdd.length : 0);
      L5: do {
        F.line = 186;
          L6: while (true) {
          if (!(i_14325866 < l_14325867)) break L6;
            F.line = 28;
            to_add_12000642 = self_11985048[self_11985048_Idx].toAdd[chckIndx(i_14325866, 0, (self_11985048[self_11985048_Idx].toAdd != null ? self_11985048[self_11985048_Idx].toAdd.length : 0)+0-1)-0];
            F.line = 29;
            if (self_11985048[self_11985048_Idx].listeners != null) { self_11985048[self_11985048_Idx].listeners.push(to_add_12000642); } else { self_11985048[self_11985048_Idx].listeners = [to_add_12000642]; };
            F.line = 188;
            i_14325866 = addInt(i_14325866, 1);
            if (!(((self_11985048[self_11985048_Idx].toAdd != null ? self_11985048[self_11985048_Idx].toAdd.length : 0) == l_14325867))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 30;
    self_11985048[self_11985048_Idx].toAdd = nimCopy(null, [], NTI12000872);
    L7: do {
      F.line = 32;
      var listener_12000885 = null;
      F.line = 184;
      var i_14325870 = 0;
      F.line = 185;
      var l_14325871 = (self_11985048[self_11985048_Idx].listeners != null ? self_11985048[self_11985048_Idx].listeners.length : 0);
      L8: do {
        F.line = 186;
          L9: while (true) {
          if (!(i_14325870 < l_14325871)) break L9;
            F.line = 32;
            listener_12000885 = self_11985048[self_11985048_Idx].listeners[chckIndx(i_14325870, 0, (self_11985048[self_11985048_Idx].listeners != null ? self_11985048[self_11985048_Idx].listeners.length : 0)+0-1)-0];
            F.line = 33;
            listener_12000885(data_11985049);
            F.line = 188;
            i_14325870 = addInt(i_14325870, 1);
            if (!(((self_11985048[self_11985048_Idx].listeners != null ? self_11985048[self_11985048_Idx].listeners.length : 0) == l_14325871))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function emitpointer_moved_12051212(selfHEX60gensym12040006_12051214, argsHEX60gensym12040007_12051215) {
    var Tmp1;

  var F={procname:"element_events.emitpointerMoved",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
    if (has_key_11978094(event_tableHEX60gensym12040002_12045013[0], selfHEX60gensym12040006_12051214)) {
    F.line = 17;
    var eHEX60gensym12040008_12052661 = [(Tmp1 = HEX5BHEX5D_11979120(event_tableHEX60gensym12040002_12045013[0], selfHEX60gensym12040006_12051214), Tmp1)[0][Tmp1[1]]];
    F.line = 18;
    emit_11985043(eHEX60gensym12040008_12052661, 0, argsHEX60gensym12040007_12051215);
    }
    
  framePtr = F.prev;

  
}
function emitpointer_entered_11977633(selfHEX60gensym11835006_11977635, argsHEX60gensym11835007_11977636) {
    var Tmp1;

  var F={procname:"element_events.emitpointerEntered",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
    if (has_key_11978094(event_tableHEX60gensym11835002_11860829[0], selfHEX60gensym11835006_11977635)) {
    F.line = 17;
    var eHEX60gensym11835008_11985016 = [(Tmp1 = HEX5BHEX5D_11979120(event_tableHEX60gensym11835002_11860829[0], selfHEX60gensym11835006_11977635), Tmp1)[0][Tmp1[1]]];
    F.line = 18;
    emit_11985043(eHEX60gensym11835008_11985016, 0, argsHEX60gensym11835007_11977636);
    }
    
  framePtr = F.prev;

  
}
function emitpointer_exited_12036212(selfHEX60gensym12025006_12036214, argsHEX60gensym12025007_12036215) {
    var Tmp1;

  var F={procname:"element_events.emitpointerExited",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
    if (has_key_11978094(event_tableHEX60gensym12025002_12030013[0], selfHEX60gensym12025006_12036214)) {
    F.line = 17;
    var eHEX60gensym12025008_12037661 = [(Tmp1 = HEX5BHEX5D_11979120(event_tableHEX60gensym12025002_12030013[0], selfHEX60gensym12025006_12036214), Tmp1)[0][Tmp1[1]]];
    F.line = 18;
    emit_11985043(eHEX60gensym12025008_12037661, 0, argsHEX60gensym12025007_12036215);
    }
    
  framePtr = F.prev;

  
}
function dispatch_pointer_move_12131113(self_12131115, arg_12131116) {
      var Tmp1;
      var Tmp5;
      var Tmp6;
      var Tmp7;

  var F={procname:"element_events.dispatchPointerMove",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
  BeforeRet: do {
      if (arg_12131116.handled) Tmp1 = true; else {        Tmp1 = HEX3DHEX3D_12127704(self_12131115.props.visibility, to_option_12128028(1));      }    if (Tmp1) {
    F.line = 103;
    break BeforeRet;
    }
    
    L2: do {
      F.line = 104;
      var child_12133114 = null;
      F.line = 36;
      var i_14325789 = subInt((self_12131115.children != null ? self_12131115.children.length : 0), 1);
      L3: do {
        F.line = 37;
          L4: while (true) {
          if (!(-1 < i_14325789)) break L4;
            F.line = 104;
            child_12133114 = self_12131115.children[chckIndx(i_14325789, 0, (self_12131115.children != null ? self_12131115.children.length : 0)+0-1)-0];
            F.line = 105;
            dispatch_pointer_move_12131113(child_12133114, arg_12131116);
            if (arg_12131116.handled) {
            F.line = 107;
            break BeforeRet;
            }
            
            F.line = 39;
            i_14325789 = subInt(i_14325789, 1);
          }
      } while(false);
    } while(false);
    F.line = 109;
    var new_arg_12133115 = with_elem_12125688(arg_12131116, self_12131115);
      if (!!(pointer_captured_by_someone_else_12120459(self_12131115))) Tmp6 = false; else {        Tmp6 = is_point_inside_11190125(self_12131115, arg_12131116.pos);      }      if (Tmp6) Tmp5 = true; else {        Tmp5 = pointer_captured_12098999(self_12131115);      }    if (Tmp5) {
    if (self_12131115.pointerInsideLastUpdate) {
    F.line = 112;
    emitpointer_moved_12051212(self_12131115, new_arg_12133115);
    }
    else {
      F.line = 114;
      self_12131115.pointerInsideLastUpdate = true;
      F.line = 115;
      emitpointer_entered_11977633(self_12131115, new_arg_12133115);
    }
    
    }
    else {
      if (!self_12131115.pointerInsideLastUpdate) Tmp7 = false; else {        Tmp7 = !(pointer_captured_12098999(self_12131115));      }    if (Tmp7) {
    F.line = 117;
    self_12131115.pointerInsideLastUpdate = false;
    F.line = 118;
    emitpointer_exited_12036212(self_12131115, new_arg_12133115);
    }
    }
  } while (false);
  framePtr = F.prev;

  
}
function pointer_args_12125626(element_12125628, pos_12125633) {
  var result_12125634 = null;

  var F={procname:"element_events.pointerArgs",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
    F.line = 69;
    result_12125634 = {sender: element_12125628, pos: pos_12125633, handled: false};
  framePtr = F.prev;

  return result_12125634;

}
function scale_mouse_pos_14325084(ctx_14325086, pos_14325091) {
  var result_14325096 = null;

  var F={procname:"main.scaleMousePos",prev:framePtr,filename:"main.nim",line:0};
  framePtr = F;
    F.line = 34;
    result_14325096 = vec2_9953092((pos_14325091.x / ctx_14325086.scale.x), (pos_14325091.y / ctx_14325086.scale.y));
  framePtr = F.prev;

  return result_14325096;

}
function emitpointer_pressed_12081212(selfHEX60gensym12070006_12081214, argsHEX60gensym12070007_12081215) {
    var Tmp1;

  var F={procname:"element_events.emitpointerPressed",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
    if (has_key_11978094(event_tableHEX60gensym12070002_12075013[0], selfHEX60gensym12070006_12081214)) {
    F.line = 17;
    var eHEX60gensym12070008_12082661 = [(Tmp1 = HEX5BHEX5D_11979120(event_tableHEX60gensym12070002_12075013[0], selfHEX60gensym12070006_12081214), Tmp1)[0][Tmp1[1]]];
    F.line = 18;
    emit_11985043(eHEX60gensym12070008_12082661, 0, argsHEX60gensym12070007_12081215);
    }
    
  framePtr = F.prev;

  
}
function dispatch_pointer_down_12125706(self_12125708, arg_12125709) {
      var Tmp1;
      var Tmp5;
      var Tmp6;

  var F={procname:"element_events.dispatchPointerDown",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
  BeforeRet: do {
      if (arg_12125709.handled) Tmp1 = true; else {        Tmp1 = HEX3DHEX3D_12127704(self_12125708.props.visibility, to_option_12128028(1));      }    if (Tmp1) {
    F.line = 79;
    break BeforeRet;
    }
    
    L2: do {
      F.line = 80;
      var child_12128676 = null;
      F.line = 36;
      var i_14325888 = subInt((self_12125708.children != null ? self_12125708.children.length : 0), 1);
      L3: do {
        F.line = 37;
          L4: while (true) {
          if (!(-1 < i_14325888)) break L4;
            F.line = 80;
            child_12128676 = self_12125708.children[chckIndx(i_14325888, 0, (self_12125708.children != null ? self_12125708.children.length : 0)+0-1)-0];
            F.line = 81;
            dispatch_pointer_down_12125706(child_12128676, arg_12125709);
            if (arg_12125709.handled) {
            F.line = 83;
            break BeforeRet;
            }
            
            F.line = 39;
            i_14325888 = subInt(i_14325888, 1);
          }
      } while(false);
    } while(false);
    if (arg_12125709.handled) {
    F.line = 86;
    rawEcho(makeNimstrLit("ARG WAS HANDLED"));
    }
    
      if (!!(arg_12125709.handled)) Tmp6 = false; else {        Tmp6 = !(pointer_captured_by_someone_else_12120459(self_12125708));      }      if (!Tmp6) Tmp5 = false; else {        Tmp5 = is_point_inside_11190125(self_12125708, arg_12125709.pos);      }    if (Tmp5) {
    F.line = 88;
    emitpointer_pressed_12081212(self_12125708, with_elem_12125688(arg_12125709, self_12125708));
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function emitpointer_released_12096212(selfHEX60gensym12085006_12096214, argsHEX60gensym12085007_12096215) {
    var Tmp1;

  var F={procname:"element_events.emitpointerReleased",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
    if (has_key_11978094(event_tableHEX60gensym12085002_12090013[0], selfHEX60gensym12085006_12096214)) {
    F.line = 17;
    var eHEX60gensym12085008_12097661 = [(Tmp1 = HEX5BHEX5D_11979120(event_tableHEX60gensym12085002_12090013[0], selfHEX60gensym12085006_12096214), Tmp1)[0][Tmp1[1]]];
    F.line = 18;
    emit_11985043(eHEX60gensym12085008_12097661, 0, argsHEX60gensym12085007_12096215);
    }
    
  framePtr = F.prev;

  
}
function dispatch_pointer_up_12129065(self_12129067, arg_12129068) {
      var Tmp1;
      var Tmp5;
        var Tmp6;

  var F={procname:"element_events.dispatchPointerUp",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
  BeforeRet: do {
      if (arg_12129068.handled) Tmp1 = true; else {        Tmp1 = HEX3DHEX3D_12127704(self_12129067.props.visibility, to_option_12128028(1));      }    if (Tmp1) {
    F.line = 92;
    break BeforeRet;
    }
    
    L2: do {
      F.line = 94;
      var child_12131066 = null;
      F.line = 36;
      var i_14325891 = subInt((self_12129067.children != null ? self_12129067.children.length : 0), 1);
      L3: do {
        F.line = 37;
          L4: while (true) {
          if (!(-1 < i_14325891)) break L4;
            F.line = 94;
            child_12131066 = self_12129067.children[chckIndx(i_14325891, 0, (self_12129067.children != null ? self_12129067.children.length : 0)+0-1)-0];
            F.line = 95;
            dispatch_pointer_up_12129065(child_12131066, arg_12129068);
            if (arg_12129068.handled) {
            F.line = 97;
            break BeforeRet;
            }
            
            F.line = 39;
            i_14325891 = subInt(i_14325891, 1);
          }
      } while(false);
    } while(false);
      if (!!(pointer_captured_by_someone_else_12120459(self_12129067))) Tmp5 = false; else {        if (is_point_inside_11190125(self_12129067, arg_12129068.pos)) Tmp6 = true; else {          Tmp6 = pointer_captured_12098999(self_12129067);        }        Tmp5 = Tmp6;      }    if (Tmp5) {
    F.line = 99;
    emitpointer_released_12096212(self_12129067, with_elem_12125688(arg_12129068, self_12129067));
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function rect_10480068(pos_10480072, size_10480074) {
  var result_10480076 = null;

  var F={procname:"rect.rect",prev:framePtr,filename:"rect.nim",line:0};
  framePtr = F;
    F.line = 15;
    result_10480076 = {pos: pos_10480072, size: size_10480074};
  framePtr = F.prev;

  return result_10480076;

}
function divide_14325630(self_14325634, other_14325636) {
  var result_14325638 = null;

  var F={procname:"divide.divide",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 73;
    result_14325638 = vec2_9953092((self_14325634.x / other_14325636.x), (self_14325634.y / other_14325636.y));
  framePtr = F.prev;

  return result_14325638;

}
function len_10925346(s_10925350) {
  var result_10925351 = 0;

  var F={procname:"len.len",prev:framePtr,filename:"sets.nim",line:0};
  framePtr = F;
    F.line = 378;
    result_10925351 = s_10925350.counter;
  framePtr = F.prev;

  return result_10925351;

}
function is_filled_10566418(hcode_10566420) {
  var result_10566421 = false;

  var F={procname:"sets.isFilled",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    F.line = 27;
    result_10566421 = !((hcode_10566420 == 0));
  framePtr = F.prev;

  return result_10566421;

}
function next_try_10570014(h_10570016, max_hash_10570017) {
  var result_10570018 = 0;

  var F={procname:"sets.nextTry",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    F.line = 30;
    result_10570018 = (addInt(h_10570016, 1) & max_hash_10570017);
  framePtr = F.prev;

  return result_10570018;

}
function raw_get_10855426(t_10855430, key_10855431, hc_10855432, hc_10855432_Idx) {
            var Tmp3;

  var result_10855433 = 0;

  var F={procname:"rawGet.rawGet",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 63;
    hc_10855432[hc_10855432_Idx] = hash_10285010(key_10855431);
    if ((hc_10855432[hc_10855432_Idx] == 0)) {
    F.line = 65;
    hc_10855432[hc_10855432_Idx] = 314159265;
    }
    
    if (((t_10855430.data != null ? t_10855430.data.length : 0) == 0)) {
    F.line = 47;
    result_10855433 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_10865169 = (hc_10855432[hc_10855432_Idx] & (t_10855430.data != null ? (t_10855430.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_10566418(t_10855430.data[chckIndx(h_10865169, 0, (t_10855430.data != null ? t_10855430.data.length : 0)+0-1)-0].Field0)) break L2;
            if (!(t_10855430.data[chckIndx(h_10865169, 0, (t_10855430.data != null ? t_10855430.data.length : 0)+0-1)-0].Field0 == hc_10855432[hc_10855432_Idx])) Tmp3 = false; else {              Tmp3 = (t_10855430.data[chckIndx(h_10865169, 0, (t_10855430.data != null ? t_10855430.data.length : 0)+0-1)-0].Field1 == key_10855431);            }          if (Tmp3) {
          F.line = 55;
          result_10855433 = h_10865169;
          break BeforeRet;
          }
          
          F.line = 56;
          h_10865169 = next_try_10570014(h_10865169, (t_10855430.data != null ? (t_10855430.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_10855433 = subInt(-1, h_10865169);
  } while (false);
  framePtr = F.prev;

  return result_10855433;

}
function is_empty_10566401(hcode_10566403) {
  var result_10566404 = false;

  var F={procname:"sets.isEmpty",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    F.line = 24;
    result_10566404 = (hcode_10566403 == 0);
  framePtr = F.prev;

  return result_10566404;

}
function excl_impl_10926605(s_10926610, key_10926611) {
                  var Tmp5;
                  var Tmp6;
                  var Tmp7;
                    var Tmp8;
                    var Tmp9;
          var Tmp10;

  var result_10926612 = false;

  var F={procname:"exclImpl.exclImpl",prev:framePtr,filename:"setimpl.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 77;
    var hc_10926613 = [0];
    F.line = 78;
    var i_10926622 = raw_get_10855426(s_10926610, key_10926611, hc_10926613, 0);
    F.line = 79;
    var msk_10926636 = (s_10926610.data != null ? (s_10926610.data.length-1) : -1);
    F.line = 80;
    result_10926612 = true;
    if ((0 <= i_10926622)) {
    F.line = 83;
    result_10926612 = false;
    F.line = 84;
    s_10926610.counter = subInt(s_10926610.counter, 1);
    L1: do {
      F.line = 85;
        L2: while (true) {
        if (!true) break L2;
          F.line = 86;
          var j_10926698 = i_10926622;
          F.line = 87;
          var r_10926699 = j_10926698;
          F.line = 88;
          s_10926610.data[chckIndx(i_10926622, 0, (s_10926610.data != null ? s_10926610.data.length : 0)+0-1)-0].Field0 = 0;
          F.line = 89;
          s_10926610.data[chckIndx(i_10926622, 0, (s_10926610.data != null ? s_10926610.data.length : 0)+0-1)-0].Field1 = null;
          L3: do {
            F.line = 90;
              L4: while (true) {
              if (!true) break L4;
                F.line = 91;
                i_10926622 = (addInt(i_10926622, 1) & msk_10926636);
                if (is_empty_10566401(s_10926610.data[chckIndx(i_10926622, 0, (s_10926610.data != null ? s_10926610.data.length : 0)+0-1)-0].Field0)) {
                F.line = 93;
                break BeforeRet;
                }
                
                F.line = 94;
                r_10926699 = (s_10926610.data[chckIndx(i_10926622, 0, (s_10926610.data != null ? s_10926610.data.length : 0)+0-1)-0].Field0 & msk_10926636);
                  if (!(r_10926699 <= i_10926622)) Tmp7 = false; else {                    Tmp7 = (j_10926698 < r_10926699);                  }                  if (Tmp7) Tmp6 = true; else {                    if (!(j_10926698 < r_10926699)) Tmp8 = false; else {                      Tmp8 = (i_10926622 < j_10926698);                    }                    Tmp6 = Tmp8;                  }                  if (Tmp6) Tmp5 = true; else {                    if (!(i_10926622 < j_10926698)) Tmp9 = false; else {                      Tmp9 = (r_10926699 <= i_10926622);                    }                    Tmp5 = Tmp9;                  }                if (!(Tmp5)) {
                F.line = 74;
                break L3;
                }
                
              }
          } while(false);
          F.line = 95;
          Tmp10 = s_10926610.data[chckIndx(i_10926622, 0, (s_10926610.data != null ? s_10926610.data.length : 0)+0-1)-0];
          s_10926610.data[chckIndx(i_10926622, 0, (s_10926610.data != null ? s_10926610.data.length : 0)+0-1)-0] = genericReset(s_10926610.data[chckIndx(i_10926622, 0, (s_10926610.data != null ? s_10926610.data.length : 0)+0-1)-0], NTI10716096);
          nimCopy(s_10926610.data[chckIndx(j_10926698, 0, (s_10926610.data != null ? s_10926610.data.length : 0)+0-1)-0], Tmp10, NTI10716096);
        }
    } while(false);
    }
    
  } while (false);
  framePtr = F.prev;

  return result_10926612;

}
function excl_10926549(s_10926554, key_10926555) {
  var F={procname:"excl.excl",prev:framePtr,filename:"sets.nim",line:0};
  framePtr = F;
    F.line = 287;
    excl_impl_10926605(s_10926554, key_10926555);
  framePtr = F.prev;

  
}
function pop_10925645(s_10925650) {
  var result_10925651 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"sets.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    L1: do {
      F.line = 341;
      var h_10925689 = 0;
      F.line = 66;
      var colontmp__14325896 = 0;
      F.line = 341;
      colontmp__14325896 = (s_10925650.data != null ? (s_10925650.data.length-1) : -1);
      F.line = 77;
      var res_14325897 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_14325897 <= colontmp__14325896)) break L3;
            F.line = 341;
            h_10925689 = res_14325897;
            if (is_filled_10566418(s_10925650.data[chckIndx(h_10925689, 0, (s_10925650.data != null ? s_10925650.data.length : 0)+0-1)-0].Field0)) {
            F.line = 343;
            result_10925651 = s_10925650.data[chckIndx(h_10925689, 0, (s_10925650.data != null ? s_10925650.data.length : 0)+0-1)-0].Field1;
            F.line = 344;
            excl_10926549(s_10925650, result_10925651);
            F.line = 345;
            break BeforeRet;
            }
            
            F.line = 80;
            res_14325897 = addInt(res_14325897, 1);
          }
      } while(false);
    } while(false);
    F.line = 346;
    raiseException({message: makeNimstrLit("set is empty"), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
  } while (false);
  framePtr = F.prev;

  return result_10925651;

}
function is_some_10476361(self_10476365) {
  var result_10476366 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_10476366 = self_10476365.has;
  framePtr = F.prev;

  return result_10476366;

}
function get_10476339(self_10476343, otherwise_10476344) {
    var Tmp1;

  var result_10476345 = false;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 189;
    if (is_some_10476361(self_10476343)) {
    Tmp1 = self_10476343.val;
    }
    else {
    Tmp1 = otherwise_10476344;
    }
    
    result_10476345 = Tmp1;
  framePtr = F.prev;

  return result_10476345;

}
function some_11005092(val_11005095) {
  var result_11005097 = ({val: false, has: false});

  var F={procname:"some.some",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 121;
    result_11005097.has = true;
    F.line = 122;
    result_11005097.val = val_11005095;
  framePtr = F.prev;

  return result_11005097;

}
function none_11005215() {
  var result_11005233 = ({val: false, has: false});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  framePtr = F.prev;

  return result_11005233;

}
function map_11005060(self_11005065, callback_11005068) {
    var Tmp1;

  var result_11005070 = ({val: false, has: false});

  var F={procname:"map.map",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 243;
    if (is_some_10912193(self_11005065)) {
    Tmp1 = some_11005092(callback_11005068(self_11005065.val));
    }
    else {
    Tmp1 = none_11005215();
    }
    
    nimCopy(result_11005070, Tmp1, NTI10000037);
  framePtr = F.prev;

  return result_11005070;

}
function some_11005282(val_11005285) {
  var result_11005287 = ({val: null, has: false});

  var F={procname:"some.some",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    if (!(!((val_11005285 == null)))) {
    F.line = 118;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/options.nim(118, 11) `not val.isNil` "));
    }
    
    F.line = 119;
    result_11005287.val = val_11005285;
  framePtr = F.prev;

  return result_11005287;

}
function to_option_11005275(x_11005278) {
  var result_11005280 = ({val: null, has: false});

  var F={procname:"toOption.toOption",prev:framePtr,filename:"utils.nim",line:0};
  framePtr = F;
    F.line = 5;
    nimCopy(result_11005280, some_11005282(x_11005278), NTI10275035);
  framePtr = F.prev;

  return result_11005280;

}
function contains_10910995(s_10910999, key_10911000) {
  var result_10911001 = false;

  var F={procname:"contains.contains",prev:framePtr,filename:"sets.nim",line:0};
  framePtr = F;
    F.line = 171;
    var hc_10911002 = [0];
    F.line = 172;
    var index_10911028 = raw_get_10855426(s_10910999, key_10911000, hc_10911002, 0);
    F.line = 173;
    result_10911001 = (0 <= index_10911028);
  framePtr = F.prev;

  return result_10911001;

}
function imul_10095517(a_10095519, b_10095520) {
  var result_10095521 = 0;

  var F={procname:"hashes.imul",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
    F.line = 133;
    var mask_10095522 = 65535;
    F.line = 135;
    var a_hi_10095531 = (((a_10095519 >>> 0) >>> 16) & mask_10095522);
    F.line = 136;
    var a_lo_10095532 = (a_10095519 & mask_10095522);
    F.line = 137;
    var b_hi_10095541 = (((b_10095520 >>> 0) >>> 16) & mask_10095522);
    F.line = 138;
    var b_lo_10095542 = (b_10095520 & mask_10095522);
    F.line = 139;
    result_10095521 = ((((a_lo_10095532 * b_lo_10095542) >>> 0) + (((((a_hi_10095531 * b_lo_10095542) >>> 0) + ((a_lo_10095532 * b_hi_10095541) >>> 0)) >>> 0) << 16)) >>> 0);
  framePtr = F.prev;

  return result_10095521;

}
function rotl32_10095601(x_10095603, r_10095604) {
  var result_10095605 = 0;

  var F={procname:"hashes.rotl32",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_10095605 = ((x_10095603 << r_10095604) | ((x_10095603 >>> 0) >>> subInt(32, r_10095604)));
  framePtr = F.prev;

  return result_10095605;

}
function murmur_hash_10095629(x_10095632) {
  var result_10095633 = 0;

  var F={procname:"hashes.murmurHash",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 155;
    var size_10095643 = (x_10095632 != null ? x_10095632.length : 0);
    F.line = 156;
    var step_size_10095645 = 4;
    F.line = 157;
    var n_10095646 = divInt(size_10095643, step_size_10095645);
    F.line = 159;
    var h1_10095647 = 0;
    F.line = 160;
    var i_10095649 = 0;
    L1: do {
      F.line = 163;
        L2: while (true) {
        if (!(i_10095649 < mulInt(n_10095646, step_size_10095645))) break L2;
          F.line = 164;
          var k1_10095650 = 0;
          F.line = 166;
          var j_10095651 = step_size_10095645;
          L3: do {
            F.line = 167;
              L4: while (true) {
              if (!(0 < j_10095651)) break L4;
                F.line = 168;
                j_10095651 = subInt(j_10095651, 1);
                F.line = 169;
                k1_10095650 = ((k1_10095650 << 8) | x_10095632[chckIndx(addInt(i_10095649, j_10095651), 0, (x_10095632 != null ? x_10095632.length : 0)+0-1)-0]);
              }
          } while(false);
          F.line = 172;
          i_10095649 = addInt(i_10095649, step_size_10095645);
          F.line = 174;
          k1_10095650 = imul_10095517(k1_10095650, 3432918353);
          F.line = 175;
          k1_10095650 = rotl32_10095601(k1_10095650, 15);
          F.line = 176;
          k1_10095650 = imul_10095517(k1_10095650, 461845907);
          F.line = 178;
          h1_10095647 = (h1_10095647 ^ k1_10095650);
          F.line = 179;
          h1_10095647 = rotl32_10095601(h1_10095647, 13);
          F.line = 180;
          h1_10095647 = ((((h1_10095647 * 5) >>> 0) + 3864292196) >>> 0);
        }
    } while(false);
    F.line = 183;
    var k1_10100207 = 0;
    F.line = 184;
    var rem_10100208 = modInt(size_10095643, step_size_10095645);
    L5: do {
      F.line = 185;
        L6: while (true) {
        if (!(0 < rem_10100208)) break L6;
          F.line = 186;
          rem_10100208 = subInt(rem_10100208, 1);
          F.line = 187;
          k1_10100207 = ((k1_10100207 << 8) | x_10095632[chckIndx(addInt(i_10095649, rem_10100208), 0, (x_10095632 != null ? x_10095632.length : 0)+0-1)-0]);
        }
    } while(false);
    F.line = 188;
    k1_10100207 = imul_10095517(k1_10100207, 3432918353);
    F.line = 189;
    k1_10100207 = rotl32_10095601(k1_10100207, 15);
    F.line = 190;
    k1_10100207 = imul_10095517(k1_10100207, 461845907);
    F.line = 191;
    h1_10095647 = (h1_10095647 ^ k1_10100207);
    F.line = 194;
    h1_10095647 = (h1_10095647 ^ size_10095643);
    F.line = 195;
    h1_10095647 = (h1_10095647 ^ ((h1_10095647 >>> 0) >>> 16));
    F.line = 196;
    h1_10095647 = imul_10095517(h1_10095647, 2246822507);
    F.line = 197;
    h1_10095647 = (h1_10095647 ^ ((h1_10095647 >>> 0) >>> 13));
    F.line = 198;
    h1_10095647 = imul_10095517(h1_10095647, 3266489909);
    F.line = 199;
    h1_10095647 = (h1_10095647 ^ ((h1_10095647 >>> 0) >>> 16));
    F.line = 200;
    result_10095633 = (h1_10095647|0);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_10095633;

}
function hash_10135214(x_10135216) {
  var result_10135217 = 0;

  var F={procname:"hashes.hash",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
    F.line = 229;
    result_10135217 = murmur_hash_10095629((x_10135216.slice(0, (x_10135216 != null ? (x_10135216.length-1) : -1)+1)));
  framePtr = F.prev;

  return result_10135217;

}
function raw_get_10775602(t_10775606, key_10775607, hc_10775608, hc_10775608_Idx) {
            var Tmp3;

  var result_10775609 = 0;

  var F={procname:"rawGet.rawGet",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 63;
    hc_10775608[hc_10775608_Idx] = hash_10135214(key_10775607);
    if ((hc_10775608[hc_10775608_Idx] == 0)) {
    F.line = 65;
    hc_10775608[hc_10775608_Idx] = 314159265;
    }
    
    if (((t_10775606.data != null ? t_10775606.data.length : 0) == 0)) {
    F.line = 47;
    result_10775609 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_10785169 = (hc_10775608[hc_10775608_Idx] & (t_10775606.data != null ? (t_10775606.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_10157018(t_10775606.data[chckIndx(h_10785169, 0, (t_10775606.data != null ? t_10775606.data.length : 0)+0-1)-0].Field0)) break L2;
            if (!(t_10775606.data[chckIndx(h_10785169, 0, (t_10775606.data != null ? t_10775606.data.length : 0)+0-1)-0].Field0 == hc_10775608[hc_10775608_Idx])) Tmp3 = false; else {              Tmp3 = eqStrings(t_10775606.data[chckIndx(h_10785169, 0, (t_10775606.data != null ? t_10775606.data.length : 0)+0-1)-0].Field1, key_10775607);            }          if (Tmp3) {
          F.line = 55;
          result_10775609 = h_10785169;
          break BeforeRet;
          }
          
          F.line = 56;
          h_10785169 = next_try_10160014(h_10785169, (t_10775606.data != null ? (t_10775606.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_10775609 = subInt(-1, h_10785169);
  } while (false);
  framePtr = F.prev;

  return result_10775609;

}
function must_rehash_10810601(t_10810604) {
  var result_10810605 = false;

  var F={procname:"mustRehash.mustRehash",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    if (!((t_10810604.counter < (t_10810604.data != null ? t_10810604.data.length : 0)))) {
    F.line = 33;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/hashcommon.nim(33, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 34;
    result_10810605 = ((mulInt((t_10810604.data != null ? t_10810604.data.length : 0), 2) < mulInt(t_10810604.counter, 3)) || (subInt((t_10810604.data != null ? t_10810604.data.length : 0), t_10810604.counter) < 4));
  framePtr = F.prev;

  return result_10810605;

}
function raw_insert_10836136(t_10836142, data_10836145, data_10836145_Idx, key_10836146, val_10836147, hc_10836148, h_10836149) {
  var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"tableimpl.nim",line:0};
  framePtr = F;
    F.line = 22;
    data_10836145[data_10836145_Idx][chckIndx(h_10836149, 0, (data_10836145[data_10836145_Idx] != null ? data_10836145[data_10836145_Idx].length : 0)+0-1)-0].Field1 = nimCopy(null, key_10836146, NTI112);
    F.line = 23;
    nimCopy(data_10836145[data_10836145_Idx][chckIndx(h_10836149, 0, (data_10836145[data_10836145_Idx] != null ? data_10836145[data_10836145_Idx].length : 0)+0-1)-0].Field2, val_10836147, NTI10716090);
    F.line = 24;
    data_10836145[data_10836145_Idx][chckIndx(h_10836149, 0, (data_10836145[data_10836145_Idx] != null ? data_10836145[data_10836145_Idx].length : 0)+0-1)-0].Field0 = hc_10836148;
  framePtr = F.prev;

  
}
function enlarge_10835192(t_10835198) {
  var F={procname:"enlarge.enlarge",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 267;
    var n_10835206 = null;
    F.line = 268;
    n_10835206 = new Array(chckRange(mulInt((t_10835198.data != null ? t_10835198.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_10835198.data != null ? t_10835198.data.length : 0), 2), 0, 2147483647);++i) {n_10835206[i]={Field0: 0, Field1: null, Field2: ({data: null, counter: 0})};}    F.line = 269;
    var Tmp1 = t_10835198.data; t_10835198.data = n_10835206; n_10835206 = Tmp1;    L2: do {
      F.line = 270;
      var i_10835396 = 0;
      F.line = 39;
      var colontmp__14325915 = 0;
      F.line = 270;
      colontmp__14325915 = (n_10835206 != null ? (n_10835206.length-1) : -1);
      F.line = 56;
      var res_14325920 = 0;
      L3: do {
        F.line = 57;
          L4: while (true) {
          if (!(res_14325920 <= colontmp__14325915)) break L4;
            F.line = 270;
            i_10835396 = res_14325920;
            F.line = 271;
            var eh_10835559 = n_10835206[chckIndx(i_10835396, 0, (n_10835206 != null ? n_10835206.length : 0)+0-1)-0].Field0;
            if (is_filled_10157018(eh_10835559)) {
            F.line = 273;
            var j_10835566 = (eh_10835559 & (t_10835198.data != null ? (t_10835198.data.length-1) : -1));
            L5: do {
              F.line = 274;
                L6: while (true) {
                if (!is_filled_10157018(t_10835198.data[chckIndx(j_10835566, 0, (t_10835198.data != null ? t_10835198.data.length : 0)+0-1)-0].Field0)) break L6;
                  F.line = 275;
                  j_10835566 = next_try_10160014(j_10835566, (t_10835198.data != null ? (t_10835198.data.length-1) : -1));
                }
            } while(false);
            F.line = 277;
            raw_insert_10836136(t_10835198, t_10835198, "data", n_10835206[chckIndx(i_10835396, 0, (n_10835206 != null ? n_10835206.length : 0)+0-1)-0].Field1, n_10835206[chckIndx(i_10835396, 0, (n_10835206 != null ? n_10835206.length : 0)+0-1)-0].Field2, eh_10835559, j_10835566);
            }
            
            F.line = 59;
            res_14325920 = addInt(res_14325920, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function raw_get_known_hc_10836678(t_10836682, key_10836683, hc_10836684) {
  var result_10836685 = 0;

  var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((t_10836682.data != null ? t_10836682.data.length : 0) == 0)) {
    F.line = 47;
    result_10836685 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_10840169 = (hc_10836684 & (t_10836682.data != null ? (t_10836682.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_10157018(t_10836682.data[chckIndx(h_10840169, 0, (t_10836682.data != null ? t_10836682.data.length : 0)+0-1)-0].Field0)) break L2;
          if (((t_10836682.data[chckIndx(h_10840169, 0, (t_10836682.data != null ? t_10836682.data.length : 0)+0-1)-0].Field0 == hc_10836684) && eqStrings(t_10836682.data[chckIndx(h_10840169, 0, (t_10836682.data != null ? t_10836682.data.length : 0)+0-1)-0].Field1, key_10836683))) {
          F.line = 55;
          result_10836685 = h_10840169;
          break BeforeRet;
          }
          
          F.line = 56;
          h_10840169 = next_try_10160014(h_10840169, (t_10836682.data != null ? (t_10836682.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_10836685 = subInt(-1, h_10840169);
  } while (false);
  framePtr = F.prev;

  return result_10836685;

}
function mget_or_put_10750488(t_10750494, key_10750495, val_10750496) {
  var result_10750498 = null;

  var F={procname:"mgetOrPut.mgetOrPut",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (((t_10750494.data != null ? t_10750494.data.length : 0) == 0)) {
    if (!(is_power_of_two_8805029(64))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(defaultInitialSize)` "));
    }
    
    F.line = 167;
    t_10750494.counter = 0;
    F.line = 168;
    t_10750494.data = new Array(64); for (var i=0;i<64;++i) {t_10750494.data[i]={Field0: 0, Field1: null, Field2: ({data: null, counter: 0})};}    }
    
    F.line = 64;
    var hc_10775601 = [0];
    F.line = 65;
    var index_10785693 = raw_get_10775602(t_10750494, key_10750495, hc_10775601, 0);
    if ((index_10785693 < 0)) {
    if (((t_10750494.data != null ? t_10750494.data.length : 0) == 0)) {
    if (!(is_power_of_two_8805029(64))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(defaultInitialSize)` "));
    }
    
    F.line = 167;
    t_10750494.counter = 0;
    F.line = 168;
    t_10750494.data = new Array(64); for (var i=0;i<64;++i) {t_10750494.data[i]={Field0: 0, Field1: null, Field2: ({data: null, counter: 0})};}    }
    
    if (must_rehash_10810601(t_10750494)) {
    F.line = 49;
    enlarge_10835192(t_10750494);
    F.line = 50;
    index_10785693 = raw_get_known_hc_10836678(t_10750494, key_10750495, hc_10775601[0]);
    }
    
    F.line = 51;
    index_10785693 = subInt(-1, index_10785693);
    F.line = 52;
    raw_insert_10836136(t_10750494, t_10750494, "data", key_10750495, val_10750496, hc_10775601[0], index_10785693);
    F.line = 68;
    t_10750494.counter = addInt(t_10750494.counter, 1);
    }
    
    F.line = 70;
    result_10750498 = t_10750494.data[chckIndx(index_10785693, 0, (t_10750494.data != null ? t_10750494.data.length : 0)+0-1)-0].Field2;
  framePtr = F.prev;

  return result_10750498;

}
function tag_set_10735658(tag_10735660) {
  var result_10735666 = null;

  var F={procname:"tag.tagSet",prev:framePtr,filename:"tag.nim",line:0};
  framePtr = F;
    F.line = 11;
    result_10735666 = mget_or_put_10750488(tags_10735629[0], tag_10735660, init_hash_set_10735706(64));
  framePtr = F.prev;

  return result_10735666;

}
function has_tag_10910843(element_10910845, tag_10910846) {
  var result_10910847 = false;

  var F={procname:"tag.hasTag",prev:framePtr,filename:"tag.nim",line:0};
  framePtr = F;
    F.line = 17;
    result_10910847 = contains_10910995(tag_set_10735658(tag_10910846), element_10910845);
  framePtr = F.prev;

  return result_10910847;

}
function is_root_10912030(self_10912032) {
  var result_10995073 = false;

  var F={procname:"element.isRoot",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 141;
    result_10995073 = has_tag_10910843(self_10912032, makeNimstrLit("root"));
  framePtr = F.prev;

  return result_10995073;

}
function get_root_10995087(self_10995089) {
          var Tmp3;

  var result_10995090 = null;

  var F={procname:"element.getRoot",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (is_root_10912030(self_10995089)) {
    F.line = 145;
    result_10995090 = self_10995089;
    break BeforeRet;
    }
    
    F.line = 146;
    result_10995090 = self_10995089;
    L1: do {
      F.line = 147;
        L2: while (true) {
        if (!is_some_10912193(result_10995090.parent)) break L2;
          F.line = 148;
          result_10995090 = (Tmp3 = get_10995156(result_10995090.parent), Tmp3)[0][Tmp3[1]];
        }
    } while(false);
  } while (false);
  framePtr = F.prev;

  return result_10995090;

}
function is_rooted_10912027(self_10912029) {
    function HEX3Aanonymous_11005001(x_11005025) {
      var result_11005029 = false;

      var F={procname:"isRooted.:anonymous",prev:framePtr,filename:"element.nim",line:0};
      framePtr = F;
        F.line = 151;
        result_11005029 = has_tag_10910843(x_11005025, makeNimstrLit("root"));
      framePtr = F.prev;

      return result_11005029;

    }

  var result_11000045 = false;

  var F={procname:"element.isRooted",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 151;
    result_11000045 = get_10476339(map_11005060(to_option_11005275(get_root_10995087(self_10912029)), HEX3Aanonymous_11005001), false);
  framePtr = F.prev;

  return result_11000045;

}
function get_10912494(self_10912498) {
  var result_10912499 = null;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 171;
    if (is_none_10912515(self_10912498)) {
    F.line = 185;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI9950204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    result_10912499 = self_10912498.val;
  framePtr = F.prev;

  return result_10912499;

}
function is_none_10915304(self_10915308) {
  var result_10915309 = false;

  var F={procname:"isNone.isNone",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 158;
    result_10915309 = (self_10915308.val == null);
  framePtr = F.prev;

  return result_10915309;

}
function HEX3DHEX3D_11163388(self_11163392, other_11163394) {
    var Tmp1;

  var result_11163395 = false;

  var F={procname:"==.==",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 122;
    if (!(self_11163392.x == other_11163394.x)) Tmp1 = false; else {      Tmp1 = (self_11163392.y == other_11163394.y);    }    result_11163395 = Tmp1;
  framePtr = F.prev;

  return result_11163395;

}
function get_10915281(self_10915286) {
  var result_10915288 = null;
  var result_10915288_Idx = 0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (is_none_10915304(self_10915286)) {
    F.line = 215;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI9950204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    F.line = 216;
    result_10915288 = self_10915286; result_10915288_Idx = "val";
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return [result_10915288, result_10915288_Idx];

}
function get_11164512(self_11164516, otherwise_11164517) {
    var Tmp1;

  var result_11164518 = 0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 189;
    if (is_some_11164534(self_11164516)) {
    Tmp1 = self_11164516.val;
    }
    else {
    Tmp1 = otherwise_11164517;
    }
    
    result_11164518 = Tmp1;
  framePtr = F.prev;

  return result_11164518;

}
function is_some_11142572(self_11142576) {
  var result_11142577 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_11142577 = self_11142576.has;
  framePtr = F.prev;

  return result_11142577;

}
function get_11142550(self_11142554, otherwise_11142555) {
    var Tmp1;

  var result_11142556 = {Field0: 0.0, Field1: 0.0, Field2: 0.0, Field3: 0.0};

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 189;
    if (is_some_11142572(self_11142554)) {
    Tmp1 = self_11142554.val;
    }
    else {
    Tmp1 = otherwise_11142555;
    }
    
    nimCopy(result_11142556, Tmp1, NTI9952046);
  framePtr = F.prev;

  return result_11142556;

}
function thickness_11142530(a_11142533) {
  var result_11142535 = {Field0: 0.0, Field1: 0.0, Field2: 0.0, Field3: 0.0};

  var F={procname:"thickness.thickness",prev:framePtr,filename:"thickness.nim",line:0};
  framePtr = F;
    F.line = 13;
    var colontmp__14325929 = a_11142533;
    F.line = 13;
    var colontmp__14325930 = a_11142533;
    F.line = 13;
    var colontmp__14325931 = a_11142533;
    F.line = 13;
    var colontmp__14325932 = a_11142533;
    F.line = 13;
    nimCopy(result_11142535, {Field0: colontmp__14325929, Field1: colontmp__14325930, Field2: colontmp__14325931, Field3: colontmp__14325932}, NTI9952046);
  framePtr = F.prev;

  return result_11142535;

}
function margin_11142477(p_11142479) {
  var result_11142484 = {Field0: 0.0, Field1: 0.0, Field2: 0.0, Field3: 0.0};

  var F={procname:"element.margin",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 276;
    nimCopy(result_11142484, get_11142550(p_11142479.props.margin, thickness_11142530(0.0)), NTI9952046);
  framePtr = F.prev;

  return result_11142484;

}
function get_10330316(self_10330320, otherwise_10330321) {
    var Tmp1;

  var result_10330322 = 0.0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 189;
    if (is_some_10330338(self_10330320)) {
    Tmp1 = self_10330320.val;
    }
    else {
    Tmp1 = otherwise_10330321;
    }
    
    result_10330322 = Tmp1;
  framePtr = F.prev;

  return result_10330322;

}
function min_80014(x_80016, y_80017) {
    var Tmp1;
      var Tmp2;

  var result_80018 = 0.0;

      if ((x_80016 <= y_80017)) Tmp2 = true; else {        Tmp2 = !((y_80017 == y_80017));      }    if (Tmp2) {
    Tmp1 = x_80016;
    }
    else {
    Tmp1 = y_80017;
    }
    
    result_80018 = Tmp1;

  return result_80018;

}
function is_none_10965844(self_10965848) {
  var result_10965849 = false;

  var F={procname:"isNone.isNone",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 158;
    result_10965849 = !(self_10965848.has);
  framePtr = F.prev;

  return result_10965849;

}
function get_10965821(self_10965826) {
  var result_10965828 = null;
  var result_10965828_Idx = 0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (is_none_10965844(self_10965826)) {
    F.line = 215;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI9950204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    F.line = 216;
    result_10965828 = self_10965826; result_10965828_Idx = "val";
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return [result_10965828, result_10965828_Idx];

}
function max_90014(x_90016, y_90017) {
    var Tmp1;
      var Tmp2;

  var result_90018 = 0.0;

      if ((y_90017 <= x_90016)) Tmp2 = true; else {        Tmp2 = !((y_90017 == y_90017));      }    if (Tmp2) {
    Tmp1 = x_90016;
    }
    else {
    Tmp1 = y_90017;
    }
    
    result_90018 = Tmp1;

  return result_90018;

}
function apply_layout_constraints_11050862(element_11050864, constraints_11050869) {
    var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_11050874 = null;

  var F={procname:"element.applyLayoutConstraints",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 228;
    F.line = 228;
    var element_width_11050926 = get_10330316(element_11050864.props.width, 0.0);
    F.line = 229;
    var element_height_11050978 = get_10330316(element_11050864.props.height, 0.0);
    F.line = 231;
    if ((0.0 < element_width_11050926)) {
    Tmp1 = element_width_11050926;
    }
    else {
    Tmp1 = constraints_11050869.x;
    }
    
    var width_11055059 = Tmp1;
    F.line = 233;
    if ((0.0 < element_height_11050978)) {
    Tmp2 = element_height_11050978;
    }
    else {
    Tmp2 = constraints_11050869.y;
    }
    
    var height_11060059 = Tmp2;
    if (is_some_10330338(element_11050864.props.maxWidth)) {
    F.line = 237;
    width_11055059 = min_80014(width_11055059, (Tmp3 = get_10965821(element_11050864.props.maxWidth), Tmp3)[0][Tmp3[1]]);
    }
    
    if (is_some_10330338(element_11050864.props.minWidth)) {
    F.line = 239;
    width_11055059 = max_90014(width_11055059, (Tmp4 = get_10965821(element_11050864.props.minWidth), Tmp4)[0][Tmp4[1]]);
    }
    
    if (is_some_10330338(element_11050864.props.maxHeight)) {
    F.line = 241;
    height_11060059 = min_80014(height_11060059, get_10330316(element_11050864.props.maxHeight, 0.0));
    }
    
    if (is_some_10330338(element_11050864.props.maxHeight)) {
    F.line = 243;
    height_11060059 = max_90014(height_11060059, get_10330316(element_11050864.props.minHeight, 0.0));
    }
    
    result_11050874 = vec2_9953092(width_11055059, height_11060059);
  framePtr = F.prev;

  return result_11050874;

}
function left_11150383(self_11150387) {
  var result_11150388 = 0.0;

  var F={procname:"left.left",prev:framePtr,filename:"thickness.nim",line:0};
  framePtr = F;
    F.line = 19;
    result_11150388 = self_11150387["Field0"];
  framePtr = F.prev;

  return result_11150388;

}
function right_11151503(self_11151507) {
  var result_11151508 = 0.0;

  var F={procname:"right.right",prev:framePtr,filename:"thickness.nim",line:0};
  framePtr = F;
    F.line = 25;
    result_11151508 = self_11151507["Field2"];
  framePtr = F.prev;

  return result_11151508;

}
function top_11150891(self_11150895) {
  var result_11150896 = 0.0;

  var F={procname:"top.top",prev:framePtr,filename:"thickness.nim",line:0};
  framePtr = F;
    F.line = 22;
    result_11150896 = self_11150895["Field1"];
  framePtr = F.prev;

  return result_11150896;

}
function bottom_11152131(self_11152135) {
  var result_11152136 = 0.0;

  var F={procname:"bottom.bottom",prev:framePtr,filename:"thickness.nim",line:0};
  framePtr = F;
    F.line = 28;
    result_11152136 = self_11152135["Field3"];
  framePtr = F.prev;

  return result_11152136;

}
function deflate_11164917(self_11164921, thickness_11164923) {
  var result_11164925 = null;

  var F={procname:"deflate.deflate",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 116;
    result_11164925 = vec2_9953092(((self_11164921.x - left_11150383(thickness_11164923)) - right_11151503(thickness_11164923)), ((self_11164921.y - top_11150891(thickness_11164923)) - bottom_11152131(thickness_11164923)));
  framePtr = F.prev;

  return result_11164925;

}
function is_some_10985125(self_10985129) {
  var result_10985130 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_10985130 = !((self_10985129.val == null));
  framePtr = F.prev;

  return result_10985130;

}
function none_11030726() {
  var result_11030743 = ({val: null});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  framePtr = F.prev;

  return result_11030743;

}
function filter_11145061(self_11145065, callback_11145068) {
    var Tmp1;

  var result_11145070 = ({val: null});

  var F={procname:"filter.filter",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 312;
    if ((is_some_10985125(self_11145065) && !(callback_11145068(self_11145065.val)))) {
    Tmp1 = none_11030726();
    }
    else {
    Tmp1 = self_11145065;
    }
    
    nimCopy(result_11145070, Tmp1, NTI11030732);
  framePtr = F.prev;

  return result_11145070;

}
function is_none_11145232(self_11145236) {
  var result_11145237 = false;

  var F={procname:"isNone.isNone",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 158;
    result_11145237 = (self_11145236.val == null);
  framePtr = F.prev;

  return result_11145237;

}
function get_11145209(self_11145214) {
  var result_11145216 = null;
  var result_11145216_Idx = 0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (is_none_11145232(self_11145214)) {
    F.line = 215;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI9950204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    F.line = 216;
    result_11145216 = self_11145214; result_11145216_Idx = "val";
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return [result_11145216, result_11145216_Idx];

}
function measure_override_11164441(self_11164443, available_size_11164448) {
      function HEX3Aanonymous_11185001(x_11185008) {
        var result_11185012 = false;

        var F={procname:"measureOverride.:anonymous",prev:framePtr,filename:"element.nim",line:0};
        framePtr = F;
          F.line = 424;
          result_11185012 = !((x_11185008.measure == null));
        framePtr = F.prev;

        return result_11185012;

      }
    var Tmp1;
              var Tmp5;
              var Tmp6;

  var result_11181075 = null;

  var F={procname:"element.measureOverride",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (is_some_10985125(filter_11145061(self_11164443.layout, HEX3Aanonymous_11185001))) {
    F.line = 425;
    result_11181075 = (Tmp1 = get_11145209(self_11164443.layout), Tmp1)[0][Tmp1[1]].measure(self_11164443, available_size_11164448);
    break BeforeRet;
    }
    else {
      F.line = 427;
      var width_11185131 = 0.0;
      F.line = 428;
      var height_11185132 = 0.0;
      L2: do {
        F.line = 430;
        var child_11185148 = null;
        F.line = 184;
        var i_14325936 = 0;
        F.line = 185;
        var l_14325937 = (self_11164443.children != null ? self_11164443.children.length : 0);
        L3: do {
          F.line = 186;
            L4: while (true) {
            if (!(i_14325936 < l_14325937)) break L4;
              F.line = 430;
              child_11185148 = self_11164443.children[chckIndx(i_14325936, 0, (self_11164443.children != null ? self_11164443.children.length : 0)+0-1)-0];
              F.line = 431;
              measure_10912033(child_11185148, available_size_11164448);
              F.line = 432;
              width_11185131 = max_90014(width_11185131, (Tmp5 = get_10915281(child_11185148.desiredSize), Tmp5)[0][Tmp5[1]].x);
              F.line = 433;
              height_11185132 = max_90014(height_11185132, (Tmp6 = get_10915281(child_11185148.desiredSize), Tmp6)[0][Tmp6[1]].y);
              F.line = 188;
              i_14325936 = addInt(i_14325936, 1);
              if (!(((self_11164443.children != null ? self_11164443.children.length : 0) == l_14325937))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      F.line = 435;
      result_11181075 = vec2_9953092(width_11185131, height_11185132);
      break BeforeRet;
    }
    
  } while (false);
  framePtr = F.prev;

  return result_11181075;

}
function non_negative_11165960(self_11165964) {
  var result_11165966 = null;

  var F={procname:"nonNegative.nonNegative",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 125;
    result_11165966 = vec2_9953092(max_90014(self_11165964.x, 0.0), max_90014(self_11165964.y, 0.0));
  framePtr = F.prev;

  return result_11165966;

}
function inflate_11165736(self_11165740, thickness_11165742) {
  var result_11165744 = null;

  var F={procname:"inflate.inflate",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 110;
    result_11165744 = vec2_9953092(((self_11165740.x + left_11150383(thickness_11165742)) + right_11151503(thickness_11165742)), ((self_11165740.y + top_11150891(thickness_11165742)) + bottom_11152131(thickness_11165742)));
  framePtr = F.prev;

  return result_11165744;

}
function measure_core_11164453(self_11164455, available_size_11164460) {
    var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;
    var Tmp5;
    var Tmp6;

  var result_11164465 = null;

  var F={procname:"element.measureCore",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if ((get_11164512(self_11164455.props.visibility, 0) == 1)) {
    F.line = 366;
    result_11164465 = vec2_9953092(0.0, 0.0);
    break BeforeRet;
    }
    
    F.line = 368;
    var margin_11164865 = margin_11142477(self_11164455);
    F.line = 370;
    var constrained_11165169 = apply_layout_constraints_11050862(self_11164455, deflate_11164917(available_size_11164460, margin_11164865));
    F.line = 371;
    var measured_11165170 = measure_override_11164441(self_11164455, constrained_11165169);
    F.line = 373;
    var width_11165171 = measured_11165170.x;
    F.line = 374;
    var height_11165172 = measured_11165170.y;
    if (is_some_10330338(self_11164455.props.width)) {
    F.line = 377;
    width_11165171 = (Tmp1 = get_10965821(self_11164455.props.width), Tmp1)[0][Tmp1[1]];
    }
    
    if (is_some_10330338(self_11164455.props.maxWidth)) {
    F.line = 379;
    width_11165171 = min_80014(width_11165171, (Tmp2 = get_10965821(self_11164455.props.maxWidth), Tmp2)[0][Tmp2[1]]);
    }
    
    if (is_some_10330338(self_11164455.props.minWidth)) {
    F.line = 381;
    width_11165171 = max_90014(width_11165171, (Tmp3 = get_10965821(self_11164455.props.minWidth), Tmp3)[0][Tmp3[1]]);
    }
    
    if (is_some_10330338(self_11164455.props.height)) {
    F.line = 383;
    height_11165172 = (Tmp4 = get_10965821(self_11164455.props.height), Tmp4)[0][Tmp4[1]];
    }
    
    if (is_some_10330338(self_11164455.props.maxHeight)) {
    F.line = 385;
    height_11165172 = min_80014(height_11165172, (Tmp5 = get_10965821(self_11164455.props.maxHeight), Tmp5)[0][Tmp5[1]]);
    }
    
    if (is_some_10330338(self_11164455.props.minHeight)) {
    F.line = 387;
    height_11165172 = max_90014(height_11165172, (Tmp6 = get_10965821(self_11164455.props.minHeight), Tmp6)[0][Tmp6[1]]);
    }
    
    F.line = 389;
    result_11164465 = non_negative_11165960(inflate_11165736(vec2_9953092(width_11165171, height_11165172), margin_11164865));
  } while (false);
  framePtr = F.prev;

  return result_11164465;

}
function HEX3DHEX3D_11180386(a_11180389, b_11180390) {
  var result_11180391 = false;

  var F={procname:"==.==",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 337;
    result_11180391 = (((is_some_10915042(a_11180389) && is_some_10915042(b_11180390)) && HEX3DHEX3D_11163388(a_11180389.val, b_11180390.val)) || (!(is_some_10915042(a_11180389)) && !(is_some_10915042(b_11180390))));
  framePtr = F.prev;

  return result_11180391;

}
function to_option_11180930(x_11180933) {
  var result_11180935 = ({val: null});

  var F={procname:"toOption.toOption",prev:framePtr,filename:"utils.nim",line:0};
  framePtr = F;
    F.line = 5;
    nimCopy(result_11180935, some_10970088(x_11180933), NTI10275060);
  framePtr = F.prev;

  return result_11180935;

}
function must_rehash_10865699(t_10865702) {
  var result_10865703 = false;

  var F={procname:"mustRehash.mustRehash",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    if (!((t_10865702.counter < (t_10865702.data != null ? t_10865702.data.length : 0)))) {
    F.line = 33;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/hashcommon.nim(33, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 34;
    result_10865703 = ((mulInt((t_10865702.data != null ? t_10865702.data.length : 0), 2) < mulInt(t_10865702.counter, 3)) || (subInt((t_10865702.data != null ? t_10865702.data.length : 0), t_10865702.counter) < 4));
  framePtr = F.prev;

  return result_10865703;

}
function raw_get_known_hc_10890894(t_10890898, key_10890899, hc_10890900) {
  var result_10890901 = 0;

  var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((t_10890898.data != null ? t_10890898.data.length : 0) == 0)) {
    F.line = 47;
    result_10890901 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_10895169 = (hc_10890900 & (t_10890898.data != null ? (t_10890898.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_10566418(t_10890898.data[chckIndx(h_10895169, 0, (t_10890898.data != null ? t_10890898.data.length : 0)+0-1)-0].Field0)) break L2;
          if (((t_10890898.data[chckIndx(h_10895169, 0, (t_10890898.data != null ? t_10890898.data.length : 0)+0-1)-0].Field0 == hc_10890900) && (t_10890898.data[chckIndx(h_10895169, 0, (t_10890898.data != null ? t_10890898.data.length : 0)+0-1)-0].Field1 == key_10890899))) {
          F.line = 55;
          result_10890901 = h_10895169;
          break BeforeRet;
          }
          
          F.line = 56;
          h_10895169 = next_try_10570014(h_10895169, (t_10890898.data != null ? (t_10890898.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_10890901 = subInt(-1, h_10895169);
  } while (false);
  framePtr = F.prev;

  return result_10890901;

}
function raw_insert_10896022(s_10896027, data_10896030, data_10896030_Idx, key_10896031, hc_10896032, h_10896033) {
  var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"setimpl.nim",line:0};
  framePtr = F;
    if (((data_10896030[data_10896030_Idx] != null ? data_10896030[data_10896030_Idx].length : 0) == 0)) {
    if (!(is_power_of_two_8805029(64))) {
    F.line = 19;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/setimpl.nim(19, 10) `isPowerOfTwo(defaultInitialSize)` "));
    }
    
    F.line = 23;
    s_10896027.counter = 0;
    F.line = 28;
    s_10896027.data = new Array(64); for (var i=0;i<64;++i) {s_10896027.data[i]={Field0: 0, Field1: null};}    }
    
    F.line = 29;
    data_10896030[data_10896030_Idx][chckIndx(h_10896033, 0, (data_10896030[data_10896030_Idx] != null ? data_10896030[data_10896030_Idx].length : 0)+0-1)-0].Field1 = key_10896031;
    F.line = 30;
    data_10896030[data_10896030_Idx][chckIndx(h_10896033, 0, (data_10896030[data_10896030_Idx] != null ? data_10896030[data_10896030_Idx].length : 0)+0-1)-0].Field0 = hc_10896032;
  framePtr = F.prev;

  
}
function enlarge_10890207(s_10890212) {
  var F={procname:"enlarge.enlarge",prev:framePtr,filename:"setimpl.nim",line:0};
  framePtr = F;
    F.line = 37;
    var n_10890217 = null;
    F.line = 38;
    n_10890217 = new Array(chckRange(mulInt((s_10890212.data != null ? s_10890212.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((s_10890212.data != null ? s_10890212.data.length : 0), 2), 0, 2147483647);++i) {n_10890217[i]={Field0: 0, Field1: null};}    F.line = 39;
    var Tmp1 = s_10890212.data; s_10890212.data = n_10890217; n_10890217 = Tmp1;    L2: do {
      F.line = 40;
      var i_10890407 = 0;
      F.line = 39;
      var colontmp__14325942 = 0;
      F.line = 40;
      colontmp__14325942 = (n_10890217 != null ? (n_10890217.length-1) : -1);
      F.line = 56;
      var res_14325943 = 0;
      L3: do {
        F.line = 57;
          L4: while (true) {
          if (!(res_14325943 <= colontmp__14325942)) break L4;
            F.line = 40;
            i_10890407 = res_14325943;
            if (is_filled_10566418(n_10890217[chckIndx(i_10890407, 0, (n_10890217 != null ? n_10890217.length : 0)+0-1)-0].Field0)) {
            F.line = 42;
            var j_10895682 = subInt(-1, raw_get_known_hc_10890894(s_10890212, n_10890217[chckIndx(i_10890407, 0, (n_10890217 != null ? n_10890217.length : 0)+0-1)-0].Field1, n_10890217[chckIndx(i_10890407, 0, (n_10890217 != null ? n_10890217.length : 0)+0-1)-0].Field0));
            F.line = 43;
            raw_insert_10896022(s_10890212, s_10890212, "data", n_10890217[chckIndx(i_10890407, 0, (n_10890217 != null ? n_10890217.length : 0)+0-1)-0].Field1, n_10890217[chckIndx(i_10890407, 0, (n_10890217 != null ? n_10890217.length : 0)+0-1)-0].Field0, j_10895682);
            }
            
            F.line = 59;
            res_14325943 = addInt(res_14325943, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function incl_10840974(s_10840979, key_10840980) {
  var F={procname:"incl.incl",prev:framePtr,filename:"sets.nim",line:0};
  framePtr = F;
    if (((s_10840979.data != null ? s_10840979.data.length : 0) == 0)) {
    if (!(is_power_of_two_8805029(64))) {
    F.line = 19;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/setimpl.nim(19, 10) `isPowerOfTwo(defaultInitialSize)` "));
    }
    
    F.line = 23;
    s_10840979.counter = 0;
    F.line = 47;
    s_10840979.data = new Array(64); for (var i=0;i<64;++i) {s_10840979.data[i]={Field0: 0, Field1: null};}    }
    
    F.line = 48;
    var hc_10855408 = [0];
    F.line = 49;
    var index_10865698 = raw_get_10855426(s_10840979, key_10840980, hc_10855408, 0);
    if ((index_10865698 < 0)) {
    if (must_rehash_10865699(s_10840979)) {
    F.line = 52;
    enlarge_10890207(s_10840979);
    F.line = 53;
    index_10865698 = raw_get_known_hc_10890894(s_10840979, key_10840980, hc_10855408[0]);
    }
    
    F.line = 54;
    raw_insert_10896022(s_10840979, s_10840979, "data", key_10840980, hc_10855408[0], subInt(-1, index_10865698));
    F.line = 55;
    s_10840979.counter = addInt(s_10840979.counter, 1);
    }
    
  framePtr = F.prev;

  
}
function invalidate_arrange_10965452(self_10965454) {
  var F={procname:"element.invalidateArrange",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 85;
    self_10965454.isArrangeValid = false;
    F.line = 86;
    incl_10840974(instance_10912142.toArrange, self_10965454);
  framePtr = F.prev;

  
}
function invalidate_measure_10965574(self_10965576) {
  var F={procname:"element.invalidateMeasure",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 89;
    self_10965576.isMeasureValid = false;
    F.line = 90;
    incl_10840974(instance_10912142.toMeasure, self_10965576);
    F.line = 91;
    invalidate_arrange_10965452(self_10965576);
  framePtr = F.prev;

  
}
function child_desired_size_changed_11166033(self_11166035) {
  var F={procname:"element.childDesiredSizeChanged",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    if (!(self_11166035.measuring)) {
    F.line = 393;
    invalidate_measure_10965574(self_11166035);
    }
    
  framePtr = F.prev;

  
}
function measure_10912033(self_10912035, available_size_10912040) {
      var Tmp1;
      var Tmp2;
      var Tmp3;
        var Tmp4;
      var Tmp6;
    var Tmp7;

  var F={procname:"element.measure",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (!(is_rooted_10912027(self_10912035))) {
    F.line = 397;
    break BeforeRet;
    }
    
      if ((available_size_10912040.x == NaN)) Tmp1 = true; else {        Tmp1 = (available_size_10912040.y == NaN);      }    if (Tmp1) {
    F.line = 400;
    raiseException({message: makeNimstrLit("Cannot call Measure using a size with NaN values."), parent: null, m_type: NTI6217, name: null, trace: null, up: null}, "Exception");
    }
    
      if (!(self_10912035.isMeasureValid)) Tmp3 = true; else {        Tmp3 = is_none_10915304(self_10912035.previousMeasure);      }      if (Tmp3) Tmp2 = true; else {        Tmp2 = !(HEX3DHEX3D_11163388((Tmp4 = get_10915281(self_10912035.previousMeasure), Tmp4)[0][Tmp4[1]], available_size_10912040));      }    if (Tmp2) {
    F.line = 403;
    var previous_desired_size_11175451 = nimCopy(null, self_10912035.desiredSize, NTI10275060);
    F.line = 404;
    var desired_size_11175452 = zero_9953079();
    F.line = 406;
    self_10912035.isMeasureValid = true;
    F.line = 408;
    try {
    F.line = 409;
    self_10912035.measuring = true;
    F.line = 410;
    desired_size_11175452 = measure_core_11164453(self_10912035, available_size_10912040);
    } finally {
    framePtr = F;
    F.line = 412;
    self_10912035.measuring = false;
    }
    F.line = 417;
    nimCopy(self_10912035.desiredSize, some_10970088(desired_size_11175452), NTI10275060);
    F.line = 418;
    nimCopy(self_10912035.previousMeasure, some_10970088(available_size_10912040), NTI10275060);
      if (!!(HEX3DHEX3D_11180386(to_option_11180930(desired_size_11175452), previous_desired_size_11175451))) Tmp6 = false; else {        Tmp6 = is_some_10912193(self_10912035.parent);      }    if (Tmp6) {
    F.line = 421;
    child_desired_size_changed_11166033((Tmp7 = get_10995156(self_10912035.parent), Tmp7)[0][Tmp7[1]]);
    }
    
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function measure_10912157(self_10912159, elem_10912160, available_size_10912165) {
    var Tmp1;

  var F={procname:"element.measure",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (!(is_rooted_10912027(elem_10912160))) {
    F.line = 33;
    break BeforeRet;
    }
    
    F.line = 35;
    var parent_10912177 = nimCopy(null, elem_10912160.parent, NTI10275035);
    if (is_some_10912193(parent_10912177)) {
    F.line = 37;
    measure_10912157(self_10912159, get_10912494(parent_10912177), available_size_10912165);
    }
    
    if (!(elem_10912160.isMeasureValid)) {
    if (is_root_10912030(elem_10912160)) {
    F.line = 41;
    measure_10912033(elem_10912160, available_size_10912165);
    }
    else {
    if (is_some_10915042(elem_10912160.previousMeasure)) {
    F.line = 43;
    measure_10912033(elem_10912160, (Tmp1 = get_10915281(elem_10912160.previousMeasure), Tmp1)[0][Tmp1[1]]);
    }
    }
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function perform_outstanding_measure_10921924(self_10921926, available_size_10921931) {
  var F={procname:"element.performOutstandingMeasure",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 64;
        L2: while (true) {
        if (!(0 < len_10925346(self_10921926.toMeasure))) break L2;
          F.line = 65;
          var elem_10930016 = pop_10925645(self_10921926.toMeasure);
          F.line = 66;
          measure_10912157(self_10921926, elem_10930016, available_size_10921931);
        }
    } while(false);
  framePtr = F.prev;

  
}
function map_11164297(self_11164302, callback_11164305) {
    var Tmp1;

  var result_11164307 = ({val: false, has: false});

  var F={procname:"map.map",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 243;
    if (is_some_10330097(self_11164302)) {
    Tmp1 = some_11005092(callback_11164305(self_11164302.val));
    }
    else {
    Tmp1 = none_11005215();
    }
    
    nimCopy(result_11164307, Tmp1, NTI10000037);
  framePtr = F.prev;

  return result_11164307;

}
function HEX3DHEX3D_11163009(self_11163013, other_11163015) {
    var Tmp1;

  var result_11163016 = false;

  var F={procname:"==.==",prev:framePtr,filename:"rect.nim",line:0};
  framePtr = F;
    F.line = 124;
    if (!HEX3DHEX3D_11163388(other_11163015.size, self_11163013.size)) Tmp1 = false; else {      Tmp1 = HEX3DHEX3D_11163388(other_11163015.pos, self_11163013.pos);    }    result_11163016 = Tmp1;
  framePtr = F.prev;

  return result_11163016;

}
function x_9954321(self_9954326) {
  var result_9954328 = 0.0;

  var F={procname:"x.x",prev:framePtr,filename:"rect.nim",line:0};
  framePtr = F;
    F.line = 32;
    result_9954328 = self_9954326.pos.x;
  framePtr = F.prev;

  return result_9954328;

}
function y_9954544(self_9954549) {
  var result_9954551 = 0.0;

  var F={procname:"y.y",prev:framePtr,filename:"rect.nim",line:0};
  framePtr = F;
    F.line = 35;
    result_9954551 = self_9954549.pos.y;
  framePtr = F.prev;

  return result_9954551;

}
function width_9954437(self_9954441) {
  var result_9954442 = 0.0;

  var F={procname:"width.width",prev:framePtr,filename:"rect.nim",line:0};
  framePtr = F;
    F.line = 39;
    result_9954442 = self_9954441.size.x;
  framePtr = F.prev;

  return result_9954442;

}
function height_9954660(self_9954664) {
  var result_9954665 = 0.0;

  var F={procname:"height.height",prev:framePtr,filename:"rect.nim",line:0};
  framePtr = F;
    F.line = 42;
    result_9954665 = self_9954664.size.y;
  framePtr = F.prev;

  return result_9954665;

}
function is_some_11152646(self_11152650) {
  var result_11152651 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_11152651 = self_11152650.has;
  framePtr = F.prev;

  return result_11152651;

}
function get_11152624(self_11152628, otherwise_11152629) {
    var Tmp1;

  var result_11152630 = 0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 189;
    if (is_some_11152646(self_11152628)) {
    Tmp1 = self_11152628.val;
    }
    else {
    Tmp1 = otherwise_11152629;
    }
    
    result_11152630 = Tmp1;
  framePtr = F.prev;

  return result_11152630;

}
function is_some_11152911(self_11152915) {
  var result_11152916 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_11152916 = self_11152915.has;
  framePtr = F.prev;

  return result_11152916;

}
function get_11152889(self_11152893, otherwise_11152894) {
    var Tmp1;

  var result_11152895 = 0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 189;
    if (is_some_11152911(self_11152893)) {
    Tmp1 = self_11152893.val;
    }
    else {
    Tmp1 = otherwise_11152894;
    }
    
    result_11152895 = Tmp1;
  framePtr = F.prev;

  return result_11152895;

}
function with_x_11155542(self_11155547, x_11155548) {
  var result_11155550 = null;

  var F={procname:"withX.withX",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 33;
    result_11155550 = vec2_9953092(x_11155548, self_11155547.y);
  framePtr = F.prev;

  return result_11155550;

}
function with_y_11160542(self_11160547, y_11160548) {
  var result_11160550 = null;

  var F={procname:"withY.withY",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 36;
    result_11160550 = vec2_9953092(self_11160547.x, y_11160548);
  framePtr = F.prev;

  return result_11160550;

}
function constrain_11160579(self_11160583, constraint_11160585) {
  var result_11160587 = null;

  var F={procname:"constrain.constrain",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 129;
    result_11160587 = vec2_9953092(min_80014(self_11160583.x, constraint_11160585.x), min_80014(self_11160583.y, constraint_11160585.y));
  framePtr = F.prev;

  return result_11160587;

}
function max_11150136(self_11150140, other_11150142) {
  var result_11150144 = null;

  var F={procname:"max.max",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 93;
    result_11150144 = vec2_9953092(max_90014(other_11150142.x, self_11150140.x), max_90014(other_11150142.y, self_11150140.y));
  framePtr = F.prev;

  return result_11150144;

}
function arrange_override_11142640(self_11142642, final_size_11142647) {
    var Tmp1;
      function HEX3Aanonymous_11145001(x_11145008) {
        var result_11145012 = false;

        var F={procname:"arrangeOverride.:anonymous",prev:framePtr,filename:"element.nim",line:0};
        framePtr = F;
          F.line = 282;
          result_11145012 = !((x_11145008.arrange == null));
        framePtr = F.prev;

        return result_11145012;

      }
    var Tmp2;
              var Tmp6;

  var result_11142652 = null;

  var F={procname:"element.arrangeOverride",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 282;
    if (is_some_10985125(filter_11145061(self_11142642.layout, HEX3Aanonymous_11145001))) {
    Tmp1 = (Tmp2 = get_11145209(self_11142642.layout), Tmp2)[0][Tmp2[1]].arrange(self_11142642, final_size_11142647);
    }
    else {
      F.line = 285;
      var largest_child_11150029 = zero_9953079();
      L3: do {
        F.line = 286;
        var child_11150045 = null;
        F.line = 184;
        var i_14325952 = 0;
        F.line = 185;
        var l_14325953 = (self_11142642.children != null ? self_11142642.children.length : 0);
        L4: do {
          F.line = 186;
            L5: while (true) {
            if (!(i_14325952 < l_14325953)) break L5;
              F.line = 286;
              child_11150045 = self_11142642.children[chckIndx(i_14325952, 0, (self_11142642.children != null ? self_11142642.children.length : 0)+0-1)-0];
              if (is_some_10915042(child_11150045.desiredSize)) {
              F.line = 288;
              largest_child_11150029 = max_11150136(largest_child_11150029, (Tmp6 = get_10915281(child_11150045.desiredSize), Tmp6)[0][Tmp6[1]]);
              }
              
              F.line = 188;
              i_14325952 = addInt(i_14325952, 1);
              if (!(((self_11142642.children != null ? self_11142642.children.length : 0) == l_14325953))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      F.line = 290;
      var arrange_rect_11150242 = rect_10480068(zero_9953079(), max_11150136(final_size_11142647, largest_child_11150029));
      L7: do {
        F.line = 291;
        var child_11150258 = null;
        F.line = 184;
        var i_14325956 = 0;
        F.line = 185;
        var l_14325957 = (self_11142642.children != null ? self_11142642.children.length : 0);
        L8: do {
          F.line = 186;
            L9: while (true) {
            if (!(i_14325956 < l_14325957)) break L9;
              F.line = 291;
              child_11150258 = self_11142642.children[chckIndx(i_14325956, 0, (self_11142642.children != null ? self_11142642.children.length : 0)+0-1)-0];
              F.line = 292;
              arrange_10921371(child_11150258, arrange_rect_11150242);
              F.line = 188;
              i_14325956 = addInt(i_14325956, 1);
              if (!(((self_11142642.children != null ? self_11142642.children.length : 0) == l_14325957))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
    Tmp1 = arrange_rect_11150242.size;
    }
    
    result_11142652 = Tmp1;
  framePtr = F.prev;

  return result_11142652;

}
function HEX2BHEX3D_9705021(x_9705025, x_9705025_Idx, y_9705026) {
  var F={procname:"+=.+=",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2589;
    x_9705025[x_9705025_Idx] = (x_9705025[x_9705025_Idx] + y_9705026);
  framePtr = F.prev;

  
}
function some_10460028(val_10460031) {
  var result_10460033 = ({val: null});

  var F={procname:"some.some",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    if (!(!((val_10460031 == null)))) {
    F.line = 118;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/options.nim(118, 11) `not val.isNil` "));
    }
    
    F.line = 119;
    result_10460033.val = val_10460031;
  framePtr = F.prev;

  return result_10460033;

}
function to_option_11161251(x_11161254) {
  var result_11161256 = ({val: null});

  var F={procname:"toOption.toOption",prev:framePtr,filename:"utils.nim",line:0};
  framePtr = F;
    F.line = 5;
    nimCopy(result_11161256, some_10460028(x_11161254), NTI10275084);
  framePtr = F.prev;

  return result_11161256;

}
function raw_get_10630602(t_10630606, key_10630607, hc_10630608, hc_10630608_Idx) {
            var Tmp3;

  var result_10630609 = 0;

  var F={procname:"rawGet.rawGet",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 63;
    hc_10630608[hc_10630608_Idx] = hash_10285010(key_10630607);
    if ((hc_10630608[hc_10630608_Idx] == 0)) {
    F.line = 65;
    hc_10630608[hc_10630608_Idx] = 314159265;
    }
    
    if (((t_10630606.data != null ? t_10630606.data.length : 0) == 0)) {
    F.line = 47;
    result_10630609 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_10640138 = (hc_10630608[hc_10630608_Idx] & (t_10630606.data != null ? (t_10630606.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_10157018(t_10630606.data[chckIndx(h_10640138, 0, (t_10630606.data != null ? t_10630606.data.length : 0)+0-1)-0].Field0)) break L2;
            if (!(t_10630606.data[chckIndx(h_10640138, 0, (t_10630606.data != null ? t_10630606.data.length : 0)+0-1)-0].Field0 == hc_10630608[hc_10630608_Idx])) Tmp3 = false; else {              Tmp3 = (t_10630606.data[chckIndx(h_10640138, 0, (t_10630606.data != null ? t_10630606.data.length : 0)+0-1)-0].Field1 == key_10630607);            }          if (Tmp3) {
          F.line = 55;
          result_10630609 = h_10640138;
          break BeforeRet;
          }
          
          F.line = 56;
          h_10640138 = next_try_10160014(h_10640138, (t_10630606.data != null ? (t_10630606.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_10630609 = subInt(-1, h_10640138);
  } while (false);
  framePtr = F.prev;

  return result_10630609;

}
function has_key_10696194(t_10696199, key_10696200) {
  var result_10696201 = false;

  var F={procname:"hasKey.hasKey",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 395;
    var hc_10696202 = [0];
    F.line = 396;
    result_10696201 = (0 <= raw_get_10630602(t_10696199, key_10696200, hc_10696202, 0));
  framePtr = F.prev;

  return result_10696201;

}
function contains_10696184(t_10696189, key_10696190) {
  var result_10696191 = false;

  var F={procname:"contains.contains",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 406;
    result_10696191 = has_key_10696194(t_10696189, key_10696190);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_10696191;

}
function delete_10710397(x_10710402, x_10710402_Idx, i_10710403) {
  var F={procname:"delete.delete",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1254;
    x_10710402[x_10710402_Idx].splice(i_10710403, 1);
  framePtr = F.prev;

  
}
function find_10710215(a_10710219, item_10710220) {
  var result_10710221 = 0;

  var F={procname:"find.find",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    L1: do {
      F.line = 1751;
      var i_10710228 = null;
      F.line = 184;
      var i_14325983 = 0;
      F.line = 185;
      var l_14325984 = (a_10710219 != null ? a_10710219.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14325983 < l_14325984)) break L3;
            F.line = 1751;
            i_10710228 = a_10710219[chckIndx(i_14325983, 0, (a_10710219 != null ? a_10710219.length : 0)+0-1)-0];
            if ((i_10710228 == item_10710220)) {
            F.line = 1752;
            break BeforeRet;
            }
            
            F.line = 1753;
            result_10710221 = addInt(result_10710221, 1);
            F.line = 188;
            i_14325983 = addInt(i_14325983, 1);
            if (!(((a_10710219 != null ? a_10710219.length : 0) == l_14325984))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 1754;
    result_10710221 = -1;
  } while (false);
  framePtr = F.prev;

  return result_10710221;

}
function emit_10700095(self_10700100, self_10700100_Idx, data_10700101) {
  var F={procname:"emit.emit",prev:framePtr,filename:"events.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 24;
      var to_remove_10710214 = null;
      F.line = 184;
      var i_14325962 = 0;
      F.line = 185;
      var l_14325963 = (self_10700100[self_10700100_Idx].toRemove != null ? self_10700100[self_10700100_Idx].toRemove.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14325962 < l_14325963)) break L3;
            F.line = 24;
            to_remove_10710214 = self_10700100[self_10700100_Idx].toRemove[chckIndx(i_14325962, 0, (self_10700100[self_10700100_Idx].toRemove != null ? self_10700100[self_10700100_Idx].toRemove.length : 0)+0-1)-0];
            F.line = 25;
            delete_10710397(self_10700100[self_10700100_Idx], "listeners", chckRange(find_10710215(self_10700100[self_10700100_Idx].listeners, to_remove_10710214), 0, 2147483647));
            F.line = 188;
            i_14325962 = addInt(i_14325962, 1);
            if (!(((self_10700100[self_10700100_Idx].toRemove != null ? self_10700100[self_10700100_Idx].toRemove.length : 0) == l_14325963))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 26;
    self_10700100[self_10700100_Idx].toRemove = nimCopy(null, [], NTI10715429);
    L4: do {
      F.line = 28;
      var to_add_10715436 = null;
      F.line = 184;
      var i_14325966 = 0;
      F.line = 185;
      var l_14325967 = (self_10700100[self_10700100_Idx].toAdd != null ? self_10700100[self_10700100_Idx].toAdd.length : 0);
      L5: do {
        F.line = 186;
          L6: while (true) {
          if (!(i_14325966 < l_14325967)) break L6;
            F.line = 28;
            to_add_10715436 = self_10700100[self_10700100_Idx].toAdd[chckIndx(i_14325966, 0, (self_10700100[self_10700100_Idx].toAdd != null ? self_10700100[self_10700100_Idx].toAdd.length : 0)+0-1)-0];
            F.line = 29;
            if (self_10700100[self_10700100_Idx].listeners != null) { self_10700100[self_10700100_Idx].listeners.push(to_add_10715436); } else { self_10700100[self_10700100_Idx].listeners = [to_add_10715436]; };
            F.line = 188;
            i_14325966 = addInt(i_14325966, 1);
            if (!(((self_10700100[self_10700100_Idx].toAdd != null ? self_10700100[self_10700100_Idx].toAdd.length : 0) == l_14325967))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 30;
    self_10700100[self_10700100_Idx].toAdd = nimCopy(null, [], NTI10715458);
    L7: do {
      F.line = 32;
      var listener_10715465 = null;
      F.line = 184;
      var i_14325970 = 0;
      F.line = 185;
      var l_14325971 = (self_10700100[self_10700100_Idx].listeners != null ? self_10700100[self_10700100_Idx].listeners.length : 0);
      L8: do {
        F.line = 186;
          L9: while (true) {
          if (!(i_14325970 < l_14325971)) break L9;
            F.line = 32;
            listener_10715465 = self_10700100[self_10700100_Idx].listeners[chckIndx(i_14325970, 0, (self_10700100[self_10700100_Idx].listeners != null ? self_10700100[self_10700100_Idx].listeners.length : 0)+0-1)-0];
            F.line = 33;
            listener_10715465(data_10700101);
            F.line = 188;
            i_14325970 = addInt(i_14325970, 1);
            if (!(((self_10700100[self_10700100_Idx].listeners != null ? self_10700100[self_10700100_Idx].listeners.length : 0) == l_14325971))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function HEX5BHEX5D_10696401(t_10696407, key_10696408) {
  var result_10696410 = null;
  var result_10696410_Idx = 0;

  var F={procname:"[].[]",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 257;
    var hcHEX60gensym10160424_10696411 = [0];
    F.line = 258;
    var indexHEX60gensym10160425_10696420 = raw_get_10630602(t_10696407, key_10696408, hcHEX60gensym10160424_10696411, 0);
    if ((0 <= indexHEX60gensym10160425_10696420)) {
    F.line = 259;
    result_10696410 = t_10696407.data[chckIndx(indexHEX60gensym10160425_10696420, 0, (t_10696407.data != null ? t_10696407.data.length : 0)+0-1)-0]; result_10696410_Idx = "Field2";
    }
    else {
      F.line = 264;
      raiseException({message: makeNimstrLit("key not found"), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    
  framePtr = F.prev;

  return [result_10696410, result_10696410_Idx];

}
function is_none_10480324(self_10480328) {
  var result_10480329 = false;

  var F={procname:"isNone.isNone",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 158;
    result_10480329 = (self_10480328.val == null);
  framePtr = F.prev;

  return result_10480329;

}
function get_10480301(self_10480306) {
  var result_10480308 = null;
  var result_10480308_Idx = 0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (is_none_10480324(self_10480306)) {
    F.line = 215;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI9950204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    F.line = 216;
    result_10480308 = self_10480306; result_10480308_Idx = "val";
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return [result_10480308, result_10480308_Idx];

}
function emit_on_bounds_changed_10696039(self_10696041) {
    var Tmp1;
    var Tmp2;

  var F={procname:"element_bounds_changed_event.emitOnBoundsChanged",prev:framePtr,filename:"element_bounds_changed_event.nim",line:0};
  framePtr = F;
    if (contains_10696184(bounds_changed_handlers_10605629[0], self_10696041)) {
    F.line = 17;
    emit_10700095((Tmp1 = HEX5BHEX5D_10696401(bounds_changed_handlers_10605629[0], self_10696041), Tmp1)[0], Tmp1[1], (Tmp2 = get_10480301(self_10696041.bounds), Tmp2)[0][Tmp2[1]]);
    }
    
  framePtr = F.prev;

  
}
function arrange_core_11150294(self_11150296, final_rect_11150297) {
    var Tmp1;
    var Tmp2;

  var F={procname:"element.arrangeCore",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 298;
    var margin_11150298 = margin_11142477(self_11150296);
    F.line = 299;
    var origin_x_11150806 = [(x_9954321(final_rect_11150297) + left_11150383(margin_11150298))];
    F.line = 300;
    var origin_y_11151314 = [(y_9954544(final_rect_11150297) + top_11150891(margin_11150298))];
    F.line = 301;
    var available_size_minus_margins_11152577 = vec2_9953092(max_90014(0.0, ((width_9954437(final_rect_11150297) - left_11150383(margin_11150298)) - right_11151503(margin_11150298))), max_90014(0.0, ((height_9954660(final_rect_11150297) - top_11150891(margin_11150298)) - bottom_11152131(margin_11150298))));
    F.line = 305;
    var horizontal_alignment_11152842 = get_11152624(self_11150296.props.horizontalAlignment, 0);
    F.line = 306;
    var vertical_alignment_11153042 = get_11152889(self_11150296.props.verticalAlignment, 0);
    F.line = 307;
    var size_11153043 = available_size_minus_margins_11152577;
    if (!((horizontal_alignment_11152842 == 0))) {
    F.line = 310;
    size_11153043 = with_x_11155542(size_11153043, min_80014(size_11153043.x, (((Tmp1 = get_10915281(self_11150296.desiredSize), Tmp1)[0][Tmp1[1]].x - left_11150383(margin_11150298)) - right_11151503(margin_11150298))));
    }
    
    if (!((vertical_alignment_11153042 == 0))) {
    F.line = 313;
    size_11153043 = with_y_11160542(size_11153043, min_80014(size_11153043.y, (((Tmp2 = get_10915281(self_11150296.desiredSize), Tmp2)[0][Tmp2[1]].y - top_11150891(margin_11150298)) - bottom_11152131(margin_11150298))));
    }
    
    F.line = 315;
    size_11153043 = apply_layout_constraints_11050862(self_11150296, size_11153043);
    F.line = 316;
    size_11153043 = constrain_11160579(arrange_override_11142640(self_11150296, size_11153043), size_11153043);
    F.line = 318;
    switch (horizontal_alignment_11152842) {
    case 1:
    case 0:
      F.line = 320;
      HEX2BHEX3D_9705021(origin_x_11150806, 0, ((available_size_minus_margins_11152577.x - size_11153043.x) / 2.0000000000000000e+00));
      break;
    case 3:
      F.line = 322;
      HEX2BHEX3D_9705021(origin_x_11150806, 0, (available_size_minus_margins_11152577.x - size_11153043.x));
      break;
    default: 
      break;
    }
    F.line = 325;
    switch (vertical_alignment_11153042) {
    case 1:
    case 0:
      F.line = 327;
      HEX2BHEX3D_9705021(origin_y_11151314, 0, ((available_size_minus_margins_11152577.y - size_11153043.y) / 2.0000000000000000e+00));
      break;
    case 3:
      F.line = 329;
      HEX2BHEX3D_9705021(origin_y_11151314, 0, (available_size_minus_margins_11152577.y - size_11153043.y));
      break;
    default: 
      break;
    }
    F.line = 339;
    nimCopy(self_11150296.bounds, to_option_11161251(rect_10480068(vec2_9953092((get_10330316(self_11150296.props.x, origin_x_11150806[0]) + get_10330316(self_11150296.props.xOffset, 0.0)), (get_10330316(self_11150296.props.y, origin_y_11151314[0]) + get_10330316(self_11150296.props.yOffset, 0.0))), vec2_9953092(get_10330316(self_11150296.props.width, size_11153043.x), get_10330316(self_11150296.props.height, size_11153043.y)))), NTI10275084);
    F.line = 343;
    emit_on_bounds_changed_10696039(self_11150296);
  framePtr = F.prev;

  
}
function arrange_10921371(self_10921374, rect_10921375) {
      var Tmp1;
        function HEX3Aanonymous_11162621(x_11162645) {
          var result_11162649 = false;

          var F={procname:"arrange.:anonymous",prev:framePtr,filename:"element.nim",line:0};
          framePtr = F;
            F.line = 353;
            result_11162649 = HEX3DHEX3D_11163009(x_11162645, rect_10921375);
          framePtr = F.prev;

          return result_11162649;

        }

  var F={procname:"arrange.arrange",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (!(is_rooted_10912027(self_10921374))) {
    F.line = 347;
    rawEcho(makeNimstrLit("WARN: Tried to arrange an unrooted element: "), cstrToNimstr((self_10921374.id)+""));
    F.line = 348;
    break BeforeRet;
    }
    
    if (!(self_10921374.isMeasureValid)) {
    F.line = 351;
    measure_10912033(self_10921374, rect_10921375.size);
    }
    
      if (!(self_10921374.isArrangeValid)) Tmp1 = true; else {        Tmp1 = !(get_10476339(map_11164297(self_10921374.previousArrange, HEX3Aanonymous_11162621), false));      }    if (Tmp1) {
    F.line = 354;
    arrange_core_11150294(self_10921374, rect_10921375);
    F.line = 355;
    self_10921374.isArrangeValid = true;
    F.line = 356;
    nimCopy(self_10921374.previousArrange, some_10460028(rect_10921375), NTI10275084);
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function arrange_10920046(self_10920048, elem_10920049, rect_10920050) {
    var Tmp1;

  var F={procname:"element.arrange",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (!(is_rooted_10912027(elem_10920049))) {
    F.line = 47;
    rawEcho(makeNimstrLit("WARN: Tried to arrange an unrooted element: "), cstrToNimstr((elem_10920049.id)+""));
    F.line = 48;
    break BeforeRet;
    }
    
    F.line = 50;
    var parent_10921287 = nimCopy(null, elem_10920049.parent, NTI10275035);
    if (is_some_10912193(parent_10921287)) {
    F.line = 52;
    arrange_10920046(self_10920048, get_10912494(parent_10921287), rect_10920050);
    }
    
    if (!(elem_10920049.isArrangeValid)) {
    if (is_root_10912030(elem_10920049)) {
    F.line = 56;
    arrange_10921371(elem_10920049, rect_10920050);
    }
    else {
    if (is_some_10330097(elem_10920049.previousArrange)) {
    F.line = 58;
    arrange_10921371(elem_10920049, (Tmp1 = get_10480301(elem_10920049.previousArrange), Tmp1)[0][Tmp1[1]]);
    }
    else {
      F.line = 60;
    rawEcho(makeNimstrLit("Tried to arrange element without a desired size"));
    }
    }
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function perform_outstanding_arrange_10930031(self_10930033, rect_10930034) {
  var F={procname:"element.performOutstandingArrange",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 70;
        L2: while (true) {
        if (!(0 < len_10925346(self_10930033.toArrange))) break L2;
          F.line = 71;
          var elem_10935625 = pop_10925645(self_10930033.toArrange);
          F.line = 72;
          arrange_10920046(self_10930033, elem_10935625, rect_10930034);
        }
    } while(false);
  framePtr = F.prev;

  
}
function emitlayout_performed_10945339(argsHEX60gensym10935644_10945341) {
  var F={procname:"element.emitlayoutPerformed",prev:framePtr,filename:"events.nim",line:0};
  framePtr = F;
    F.line = 54;
    emit_10700095(emitterHEX60gensym10935642_10940006, 0, argsHEX60gensym10935644_10945341);
  framePtr = F.prev;

  
}
function perform_outstanding_layouts_and_measures_10965436(rect_10965438) {
  var F={procname:"element.performOutstandingLayoutsAndMeasures",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 80;
    perform_outstanding_measure_10921924(instance_10912142, rect_10965438.size);
    F.line = 81;
    perform_outstanding_arrange_10930031(instance_10912142, rect_10965438);
    F.line = 82;
    emitlayout_performed_10945339(rect_10965438);
  framePtr = F.prev;

  
}
function clear_10320182(t_10320188) {
  var F={procname:"clear.clear",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 149;
      var i_10325139 = 0;
      F.line = 104;
      var colontmp__14325989 = 0;
      F.line = 149;
      colontmp__14325989 = (t_10320188.data != null ? t_10320188.data.length : 0);
      F.line = 106;
      var i_14325990 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_14325990 < colontmp__14325989)) break L3;
            F.line = 149;
            i_10325139 = i_14325990;
            F.line = 151;
            t_10320188.data[chckIndx(i_10325139, 0, (t_10320188.data != null ? t_10320188.data.length : 0)+0-1)-0].Field0 = 0;
            F.line = 152;
            t_10320188.data[chckIndx(i_10325139, 0, (t_10320188.data != null ? t_10320188.data.length : 0)+0-1)-0].Field1 = null;
            F.line = 153;
            t_10320188.data[chckIndx(i_10325139, 0, (t_10320188.data != null ? t_10320188.data.length : 0)+0-1)-0].Field2 = null;
            F.line = 109;
            i_14325990 = addInt(i_14325990, 1);
          }
      } while(false);
    } while(false);
    F.line = 154;
    t_10320188.counter = 0;
  framePtr = F.prev;

  
}
function invalidate_world_positions_cache_10320071() {
  var F={procname:"types.invalidateWorldPositionsCache",prev:framePtr,filename:"types.nim",line:0};
  framePtr = F;
    F.line = 187;
    clear_10320182(world_positions_10305629[0]);
  framePtr = F.prev;

  
}
function add_10335232(self_10335236, other_10335238) {
  var result_10335240 = null;

  var F={procname:"add.add",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 42;
    result_10335240 = vec2_9953092((self_10335236.x + other_10335238.x), (self_10335236.y + other_10335238.y));
  framePtr = F.prev;

  return result_10335240;

}
function some_9986089(val_9986092) {
  var result_9986094 = ({val: 0.0, has: false});

  var F={procname:"some.some",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 121;
    result_9986094.has = true;
    F.line = 122;
    result_9986094.val = val_9986092;
  framePtr = F.prev;

  return result_9986094;

}
function none_10330226() {
  var result_10330244 = ({val: 0.0, has: false});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  framePtr = F.prev;

  return result_10330244;

}
function map_10330071(self_10330076, callback_10330079) {
    var Tmp1;

  var result_10330081 = ({val: 0.0, has: false});

  var F={procname:"map.map",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 243;
    if (is_some_10330097(self_10330076)) {
    Tmp1 = some_9986089(callback_10330079(self_10330076.val));
    }
    else {
    Tmp1 = none_10330226();
    }
    
    nimCopy(result_10330081, Tmp1, NTI9986076);
  framePtr = F.prev;

  return result_10330081;

}
function must_rehash_10385601(t_10385604) {
  var result_10385605 = false;

  var F={procname:"mustRehash.mustRehash",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    if (!((t_10385604.counter < (t_10385604.data != null ? t_10385604.data.length : 0)))) {
    F.line = 33;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/hashcommon.nim(33, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 34;
    result_10385605 = ((mulInt((t_10385604.data != null ? t_10385604.data.length : 0), 2) < mulInt(t_10385604.counter, 3)) || (subInt((t_10385604.data != null ? t_10385604.data.length : 0), t_10385604.counter) < 4));
  framePtr = F.prev;

  return result_10385605;

}
function raw_insert_10411148(t_10411154, data_10411157, data_10411157_Idx, key_10411158, val_10411159, hc_10411160, h_10411161) {
  var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"tableimpl.nim",line:0};
  framePtr = F;
    F.line = 22;
    data_10411157[data_10411157_Idx][chckIndx(h_10411161, 0, (data_10411157[data_10411157_Idx] != null ? data_10411157[data_10411157_Idx].length : 0)+0-1)-0].Field1 = key_10411158;
    F.line = 23;
    data_10411157[data_10411157_Idx][chckIndx(h_10411161, 0, (data_10411157[data_10411157_Idx] != null ? data_10411157[data_10411157_Idx].length : 0)+0-1)-0].Field2 = val_10411159;
    F.line = 24;
    data_10411157[data_10411157_Idx][chckIndx(h_10411161, 0, (data_10411157[data_10411157_Idx] != null ? data_10411157[data_10411157_Idx].length : 0)+0-1)-0].Field0 = hc_10411160;
  framePtr = F.prev;

  
}
function enlarge_10410161(t_10410167) {
  var F={procname:"enlarge.enlarge",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 267;
    var n_10410175 = null;
    F.line = 268;
    n_10410175 = new Array(chckRange(mulInt((t_10410167.data != null ? t_10410167.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_10410167.data != null ? t_10410167.data.length : 0), 2), 0, 2147483647);++i) {n_10410175[i]={Field0: 0, Field1: null, Field2: null};}    F.line = 269;
    var Tmp1 = t_10410167.data; t_10410167.data = n_10410175; n_10410175 = Tmp1;    L2: do {
      F.line = 270;
      var i_10410334 = 0;
      F.line = 39;
      var colontmp__14325999 = 0;
      F.line = 270;
      colontmp__14325999 = (n_10410175 != null ? (n_10410175.length-1) : -1);
      F.line = 56;
      var res_14326000 = 0;
      L3: do {
        F.line = 57;
          L4: while (true) {
          if (!(res_14326000 <= colontmp__14325999)) break L4;
            F.line = 270;
            i_10410334 = res_14326000;
            F.line = 271;
            var eh_10410503 = n_10410175[chckIndx(i_10410334, 0, (n_10410175 != null ? n_10410175.length : 0)+0-1)-0].Field0;
            if (is_filled_10157018(eh_10410503)) {
            F.line = 273;
            var j_10410510 = (eh_10410503 & (t_10410167.data != null ? (t_10410167.data.length-1) : -1));
            L5: do {
              F.line = 274;
                L6: while (true) {
                if (!is_filled_10157018(t_10410167.data[chckIndx(j_10410510, 0, (t_10410167.data != null ? t_10410167.data.length : 0)+0-1)-0].Field0)) break L6;
                  F.line = 275;
                  j_10410510 = next_try_10160014(j_10410510, (t_10410167.data != null ? (t_10410167.data.length-1) : -1));
                }
            } while(false);
            F.line = 277;
            raw_insert_10411148(t_10410167, t_10410167, "data", n_10410175[chckIndx(i_10410334, 0, (n_10410175 != null ? n_10410175.length : 0)+0-1)-0].Field1, n_10410175[chckIndx(i_10410334, 0, (n_10410175 != null ? n_10410175.length : 0)+0-1)-0].Field2, eh_10410503, j_10410510);
            }
            
            F.line = 59;
            res_14326000 = addInt(res_14326000, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function raw_get_known_hc_10411693(t_10411697, key_10411698, hc_10411699) {
  var result_10411700 = 0;

  var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((t_10411697.data != null ? t_10411697.data.length : 0) == 0)) {
    F.line = 47;
    result_10411700 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_10415138 = (hc_10411699 & (t_10411697.data != null ? (t_10411697.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_10157018(t_10411697.data[chckIndx(h_10415138, 0, (t_10411697.data != null ? t_10411697.data.length : 0)+0-1)-0].Field0)) break L2;
          if (((t_10411697.data[chckIndx(h_10415138, 0, (t_10411697.data != null ? t_10411697.data.length : 0)+0-1)-0].Field0 == hc_10411699) && (t_10411697.data[chckIndx(h_10415138, 0, (t_10411697.data != null ? t_10411697.data.length : 0)+0-1)-0].Field1 == key_10411698))) {
          F.line = 55;
          result_10411700 = h_10415138;
          break BeforeRet;
          }
          
          F.line = 56;
          h_10415138 = next_try_10160014(h_10415138, (t_10411697.data != null ? (t_10411697.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_10411700 = subInt(-1, h_10415138);
  } while (false);
  framePtr = F.prev;

  return result_10411700;

}
function HEX5BHEX5DHEX3D_10335370(t_10335376, key_10335377, val_10335378) {
  var F={procname:"[]=.[]=",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (((t_10335376.data != null ? t_10335376.data.length : 0) == 0)) {
    if (!(is_power_of_two_8805029(64))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(defaultInitialSize)` "));
    }
    
    F.line = 167;
    t_10335376.counter = 0;
    F.line = 168;
    t_10335376.data = new Array(64); for (var i=0;i<64;++i) {t_10335376.data[i]={Field0: 0, Field1: null, Field2: null};}    }
    
    F.line = 57;
    var hc_10360601 = [0];
    F.line = 58;
    var index_10360610 = raw_get_10305802(t_10335376, key_10335377, hc_10360601, 0);
    if ((0 <= index_10360610)) {
    F.line = 59;
    t_10335376.data[chckIndx(index_10360610, 0, (t_10335376.data != null ? t_10335376.data.length : 0)+0-1)-0].Field2 = val_10335378;
    }
    else {
      if (((t_10335376.data != null ? t_10335376.data.length : 0) == 0)) {
      if (!(is_power_of_two_8805029(64))) {
      F.line = 166;
      failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(defaultInitialSize)` "));
      }
      
      F.line = 167;
      t_10335376.counter = 0;
      F.line = 168;
      t_10335376.data = new Array(64); for (var i=0;i<64;++i) {t_10335376.data[i]={Field0: 0, Field1: null, Field2: null};}      }
      
      if (must_rehash_10385601(t_10335376)) {
      F.line = 49;
      enlarge_10410161(t_10335376);
      F.line = 50;
      index_10360610 = raw_get_known_hc_10411693(t_10335376, key_10335377, hc_10360601[0]);
      }
      
      F.line = 51;
      index_10360610 = subInt(-1, index_10360610);
      F.line = 52;
      raw_insert_10411148(t_10335376, t_10335376, "data", key_10335377, val_10335378, hc_10360601[0], index_10360610);
      F.line = 60;
      t_10335376.counter = addInt(t_10335376.counter, 1);
    }
    
  framePtr = F.prev;

  
}
function vec2_10260375(xy_10260378) {
  var result_10260380 = null;

  var F={procname:"vec2.vec2",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 18;
    result_10260380 = {x: xy_10260378, y: xy_10260378};
  framePtr = F.prev;

  return result_10260380;

}
function calculate_world_positions_10326293(elem_10326295) {
    function set_world_pos_10326296(e_10326298, parent_pos_10326303) {
        function HEX3Aanonymous_10330001(b_10330024) {
          var result_10330028 = 0.0;

          var F={procname:"setWorldPos.:anonymous",prev:framePtr,filename:"types.nim",line:0};
          framePtr = F;
            F.line = 194;
            result_10330028 = x_9954321(b_10330024);
          framePtr = F.prev;

          return result_10330028;

        }
        function HEX3Aanonymous_10335001(b_10335024) {
          var result_10335028 = 0.0;

          var F={procname:"setWorldPos.:anonymous",prev:framePtr,filename:"types.nim",line:0};
          framePtr = F;
            F.line = 194;
            result_10335028 = y_9954544(b_10335024);
          framePtr = F.prev;

          return result_10335028;

        }

      var F={procname:"calculateWorldPositions.setWorldPos",prev:framePtr,filename:"types.nim",line:0};
      framePtr = F;
        F.line = 194;
        var this_world_pos_10335260 = add_10335232(vec2_9953092(get_10330316(map_10330071(e_10326298.bounds, HEX3Aanonymous_10330001), 0.0), get_10330316(map_10330071(e_10326298.bounds, HEX3Aanonymous_10335001), 0.0)), parent_pos_10326303);
        F.line = 195;
        HEX5BHEX5DHEX3D_10335370(world_positions_10305629[0], e_10326298, this_world_pos_10335260);
        L1: do {
          F.line = 196;
          var child_10425214 = null;
          F.line = 184;
          var i_14325993 = 0;
          F.line = 185;
          var l_14325994 = (e_10326298.children != null ? e_10326298.children.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_14325993 < l_14325994)) break L3;
                F.line = 196;
                child_10425214 = e_10326298.children[chckIndx(i_14325993, 0, (e_10326298.children != null ? e_10326298.children.length : 0)+0-1)-0];
                F.line = 197;
                set_world_pos_10326296(child_10425214, this_world_pos_10335260);
                F.line = 188;
                i_14325993 = addInt(i_14325993, 1);
                if (!(((e_10326298.children != null ? e_10326298.children.length : 0) == l_14325994))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      framePtr = F.prev;

      
    }

  var F={procname:"types.calculateWorldPositions",prev:framePtr,filename:"types.nim",line:0};
  framePtr = F;
    F.line = 191;
    invalidate_world_positions_cache_10320071();
    F.line = 198;
    set_world_pos_10326296(elem_10326295, vec2_10260375(0.0));
  framePtr = F.prev;

  
}
function clear_10470421(t_10470427) {
  var F={procname:"clear.clear",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 149;
      var i_10475139 = 0;
      F.line = 104;
      var colontmp__14326008 = 0;
      F.line = 149;
      colontmp__14326008 = (t_10470427.data != null ? t_10470427.data.length : 0);
      F.line = 106;
      var i_14326009 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_14326009 < colontmp__14326008)) break L3;
            F.line = 149;
            i_10475139 = i_14326009;
            F.line = 151;
            t_10470427.data[chckIndx(i_10475139, 0, (t_10470427.data != null ? t_10470427.data.length : 0)+0-1)-0].Field0 = 0;
            F.line = 152;
            t_10470427.data[chckIndx(i_10475139, 0, (t_10470427.data != null ? t_10470427.data.length : 0)+0-1)-0].Field1 = null;
            F.line = 153;
            t_10470427.data[chckIndx(i_10475139, 0, (t_10470427.data != null ? t_10470427.data.length : 0)+0-1)-0].Field2 = null;
            F.line = 109;
            i_14326009 = addInt(i_14326009, 1);
          }
      } while(false);
    } while(false);
    F.line = 154;
    t_10470427.counter = 0;
  framePtr = F.prev;

  
}
function invalidate_clip_bounds_cache_10470310() {
  var F={procname:"types.invalidateClipBoundsCache",prev:framePtr,filename:"types.nim",line:0};
  framePtr = F;
    F.line = 210;
    clear_10470421(clip_bounds_10445629[0]);
  framePtr = F.prev;

  
}
function none_10470238() {
  var result_10470255 = ({val: null});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  framePtr = F.prev;

  return result_10470255;

}
function map_10480120(self_10480125, callback_10480128) {
    var Tmp1;

  var result_10480130 = ({val: null});

  var F={procname:"map.map",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 243;
    if (is_some_10330097(self_10480125)) {
    Tmp1 = some_10460028(callback_10480128(self_10480125.val));
    }
    else {
    Tmp1 = none_10470238();
    }
    
    nimCopy(result_10480130, Tmp1, NTI10275084);
  framePtr = F.prev;

  return result_10480130;

}
function with_pos_10480050(self_10480054, pos_10480056) {
  var result_10480058 = null;

  var F={procname:"withPos.withPos",prev:framePtr,filename:"rect.nim",line:0};
  framePtr = F;
    F.line = 108;
    result_10480058 = rect_10480068(pos_10480056, self_10480054.size);
  framePtr = F.prev;

  return result_10480058;

}
function raw_get_10445784(t_10445788, key_10445789, hc_10445790, hc_10445790_Idx) {
            var Tmp3;

  var result_10445791 = 0;

  var F={procname:"rawGet.rawGet",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 63;
    hc_10445790[hc_10445790_Idx] = hash_10285010(key_10445789);
    if ((hc_10445790[hc_10445790_Idx] == 0)) {
    F.line = 65;
    hc_10445790[hc_10445790_Idx] = 314159265;
    }
    
    if (((t_10445788.data != null ? t_10445788.data.length : 0) == 0)) {
    F.line = 47;
    result_10445791 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_10455138 = (hc_10445790[hc_10445790_Idx] & (t_10445788.data != null ? (t_10445788.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_10157018(t_10445788.data[chckIndx(h_10455138, 0, (t_10445788.data != null ? t_10445788.data.length : 0)+0-1)-0].Field0)) break L2;
            if (!(t_10445788.data[chckIndx(h_10455138, 0, (t_10445788.data != null ? t_10445788.data.length : 0)+0-1)-0].Field0 == hc_10445790[hc_10445790_Idx])) Tmp3 = false; else {              Tmp3 = (t_10445788.data[chckIndx(h_10455138, 0, (t_10445788.data != null ? t_10445788.data.length : 0)+0-1)-0].Field1 == key_10445789);            }          if (Tmp3) {
          F.line = 55;
          result_10445791 = h_10455138;
          break BeforeRet;
          }
          
          F.line = 56;
          h_10455138 = next_try_10160014(h_10455138, (t_10445788.data != null ? (t_10445788.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_10445791 = subInt(-1, h_10455138);
  } while (false);
  framePtr = F.prev;

  return result_10445791;

}
function must_rehash_10535601(t_10535604) {
  var result_10535605 = false;

  var F={procname:"mustRehash.mustRehash",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    if (!((t_10535604.counter < (t_10535604.data != null ? t_10535604.data.length : 0)))) {
    F.line = 33;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/hashcommon.nim(33, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 34;
    result_10535605 = ((mulInt((t_10535604.data != null ? t_10535604.data.length : 0), 2) < mulInt(t_10535604.counter, 3)) || (subInt((t_10535604.data != null ? t_10535604.data.length : 0), t_10535604.counter) < 4));
  framePtr = F.prev;

  return result_10535605;

}
function raw_insert_10561148(t_10561154, data_10561157, data_10561157_Idx, key_10561158, val_10561159, hc_10561160, h_10561161) {
  var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"tableimpl.nim",line:0};
  framePtr = F;
    F.line = 22;
    data_10561157[data_10561157_Idx][chckIndx(h_10561161, 0, (data_10561157[data_10561157_Idx] != null ? data_10561157[data_10561157_Idx].length : 0)+0-1)-0].Field1 = key_10561158;
    F.line = 23;
    data_10561157[data_10561157_Idx][chckIndx(h_10561161, 0, (data_10561157[data_10561157_Idx] != null ? data_10561157[data_10561157_Idx].length : 0)+0-1)-0].Field2 = val_10561159;
    F.line = 24;
    data_10561157[data_10561157_Idx][chckIndx(h_10561161, 0, (data_10561157[data_10561157_Idx] != null ? data_10561157[data_10561157_Idx].length : 0)+0-1)-0].Field0 = hc_10561160;
  framePtr = F.prev;

  
}
function enlarge_10560161(t_10560167) {
  var F={procname:"enlarge.enlarge",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 267;
    var n_10560175 = null;
    F.line = 268;
    n_10560175 = new Array(chckRange(mulInt((t_10560167.data != null ? t_10560167.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_10560167.data != null ? t_10560167.data.length : 0), 2), 0, 2147483647);++i) {n_10560175[i]={Field0: 0, Field1: null, Field2: null};}    F.line = 269;
    var Tmp1 = t_10560167.data; t_10560167.data = n_10560175; n_10560175 = Tmp1;    L2: do {
      F.line = 270;
      var i_10560334 = 0;
      F.line = 39;
      var colontmp__14326019 = 0;
      F.line = 270;
      colontmp__14326019 = (n_10560175 != null ? (n_10560175.length-1) : -1);
      F.line = 56;
      var res_14326020 = 0;
      L3: do {
        F.line = 57;
          L4: while (true) {
          if (!(res_14326020 <= colontmp__14326019)) break L4;
            F.line = 270;
            i_10560334 = res_14326020;
            F.line = 271;
            var eh_10560503 = n_10560175[chckIndx(i_10560334, 0, (n_10560175 != null ? n_10560175.length : 0)+0-1)-0].Field0;
            if (is_filled_10157018(eh_10560503)) {
            F.line = 273;
            var j_10560510 = (eh_10560503 & (t_10560167.data != null ? (t_10560167.data.length-1) : -1));
            L5: do {
              F.line = 274;
                L6: while (true) {
                if (!is_filled_10157018(t_10560167.data[chckIndx(j_10560510, 0, (t_10560167.data != null ? t_10560167.data.length : 0)+0-1)-0].Field0)) break L6;
                  F.line = 275;
                  j_10560510 = next_try_10160014(j_10560510, (t_10560167.data != null ? (t_10560167.data.length-1) : -1));
                }
            } while(false);
            F.line = 277;
            raw_insert_10561148(t_10560167, t_10560167, "data", n_10560175[chckIndx(i_10560334, 0, (n_10560175 != null ? n_10560175.length : 0)+0-1)-0].Field1, n_10560175[chckIndx(i_10560334, 0, (n_10560175 != null ? n_10560175.length : 0)+0-1)-0].Field2, eh_10560503, j_10560510);
            }
            
            F.line = 59;
            res_14326020 = addInt(res_14326020, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function raw_get_known_hc_10561693(t_10561697, key_10561698, hc_10561699) {
  var result_10561700 = 0;

  var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((t_10561697.data != null ? t_10561697.data.length : 0) == 0)) {
    F.line = 47;
    result_10561700 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_10565138 = (hc_10561699 & (t_10561697.data != null ? (t_10561697.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_10157018(t_10561697.data[chckIndx(h_10565138, 0, (t_10561697.data != null ? t_10561697.data.length : 0)+0-1)-0].Field0)) break L2;
          if (((t_10561697.data[chckIndx(h_10565138, 0, (t_10561697.data != null ? t_10561697.data.length : 0)+0-1)-0].Field0 == hc_10561699) && (t_10561697.data[chckIndx(h_10565138, 0, (t_10561697.data != null ? t_10561697.data.length : 0)+0-1)-0].Field1 == key_10561698))) {
          F.line = 55;
          result_10561700 = h_10565138;
          break BeforeRet;
          }
          
          F.line = 56;
          h_10565138 = next_try_10160014(h_10565138, (t_10561697.data != null ? (t_10561697.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_10561700 = subInt(-1, h_10565138);
  } while (false);
  framePtr = F.prev;

  return result_10561700;

}
function HEX5BHEX5DHEX3D_10485088(t_10485094, key_10485095, val_10485096) {
  var F={procname:"[]=.[]=",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (((t_10485094.data != null ? t_10485094.data.length : 0) == 0)) {
    if (!(is_power_of_two_8805029(64))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(defaultInitialSize)` "));
    }
    
    F.line = 167;
    t_10485094.counter = 0;
    F.line = 168;
    t_10485094.data = new Array(64); for (var i=0;i<64;++i) {t_10485094.data[i]={Field0: 0, Field1: null, Field2: null};}    }
    
    F.line = 57;
    var hc_10510601 = [0];
    F.line = 58;
    var index_10510610 = raw_get_10445784(t_10485094, key_10485095, hc_10510601, 0);
    if ((0 <= index_10510610)) {
    F.line = 59;
    t_10485094.data[chckIndx(index_10510610, 0, (t_10485094.data != null ? t_10485094.data.length : 0)+0-1)-0].Field2 = val_10485096;
    }
    else {
      if (((t_10485094.data != null ? t_10485094.data.length : 0) == 0)) {
      if (!(is_power_of_two_8805029(64))) {
      F.line = 166;
      failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(defaultInitialSize)` "));
      }
      
      F.line = 167;
      t_10485094.counter = 0;
      F.line = 168;
      t_10485094.data = new Array(64); for (var i=0;i<64;++i) {t_10485094.data[i]={Field0: 0, Field1: null, Field2: null};}      }
      
      if (must_rehash_10535601(t_10485094)) {
      F.line = 49;
      enlarge_10560161(t_10485094);
      F.line = 50;
      index_10510610 = raw_get_known_hc_10561693(t_10485094, key_10485095, hc_10510601[0]);
      }
      
      F.line = 51;
      index_10510610 = subInt(-1, index_10510610);
      F.line = 52;
      raw_insert_10561148(t_10485094, t_10485094, "data", key_10485095, val_10485096, hc_10510601[0], index_10510610);
      F.line = 60;
      t_10485094.counter = addInt(t_10485094.counter, 1);
    }
    
  framePtr = F.prev;

  
}
function none_10470232() {
  var result_10470236 = ({val: null});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 140;
    nimCopy(result_10470236, none_10470238(), NTI10470244);
  framePtr = F.prev;

  return result_10470236;

}
function calculate_clip_bounds_10476278(root_10476280) {
    function set_clip_bounds_10476281(e_10476283, closest_10476288) {
        function HEX3Aanonymous_10480001(x_10480024) {
          var result_10480028 = null;

          var F={procname:"setClipBounds.:anonymous",prev:framePtr,filename:"types.nim",line:0};
          framePtr = F;
            F.line = 218;
            result_10480028 = with_pos_10480050(x_10480024, actual_world_position_10305676(e_10476283));
          framePtr = F.prev;

          return result_10480028;

        }
        var Tmp1;
        var Tmp2;

      var F={procname:"calculateClipBounds.setClipBounds",prev:framePtr,filename:"types.nim",line:0};
      framePtr = F;
        F.line = 216;
        var actual_closest_10476293 = [nimCopy(null, closest_10476288, NTI10275084)];
        if (get_10476339(e_10476283.props.clipToBounds, false)) {
        F.line = 218;
        nimCopy(actual_closest_10476293[0], map_10480120(e_10476283.bounds, HEX3Aanonymous_10480001), NTI10275084);
        F.line = 219;
        HEX5BHEX5DHEX3D_10485088(clip_bounds_10445629[0], e_10476283, (Tmp1 = get_10480301(actual_closest_10476293[0]), Tmp1)[0][Tmp1[1]]);
        }
        else {
        if (is_some_10330097(actual_closest_10476293[0])) {
        F.line = 221;
        HEX5BHEX5DHEX3D_10485088(clip_bounds_10445629[0], e_10476283, (Tmp2 = get_10480301(actual_closest_10476293[0]), Tmp2)[0][Tmp2[1]]);
        }
        }
        L3: do {
          F.line = 222;
          var child_10565913 = null;
          F.line = 184;
          var i_14326012 = 0;
          F.line = 185;
          var l_14326013 = (e_10476283.children != null ? e_10476283.children.length : 0);
          L4: do {
            F.line = 186;
              L5: while (true) {
              if (!(i_14326012 < l_14326013)) break L5;
                F.line = 222;
                child_10565913 = e_10476283.children[chckIndx(i_14326012, 0, (e_10476283.children != null ? e_10476283.children.length : 0)+0-1)-0];
                F.line = 223;
                set_clip_bounds_10476281(child_10565913, actual_closest_10476293[0]);
                F.line = 188;
                i_14326012 = addInt(i_14326012, 1);
                if (!(((e_10476283.children != null ? e_10476283.children.length : 0) == l_14326013))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      framePtr = F.prev;

      
    }

  var F={procname:"types.calculateClipBounds",prev:framePtr,filename:"types.nim",line:0};
  framePtr = F;
    F.line = 213;
    invalidate_clip_bounds_cache_10470310();
    F.line = 224;
    set_clip_bounds_10476281(root_10476280, none_10470232());
  framePtr = F.prev;

  
}
function none_11655068() {
  var result_11655085 = ({val: null});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  framePtr = F.prev;

  return result_11655085;

}
function none_11655062() {
  var result_11655066 = ({val: null});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 140;
    nimCopy(result_11655066, none_11655068(), NTI11655074);
  framePtr = F.prev;

  return result_11655066;

}
function is_some_10990113(self_10990117) {
  var result_10990118 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_10990118 = !((self_10990117.val == null));
  framePtr = F.prev;

  return result_10990118;

}
function is_none_11655200(self_11655204) {
  var result_11655205 = false;

  var F={procname:"isNone.isNone",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 158;
    result_11655205 = (self_11655204.val == null);
  framePtr = F.prev;

  return result_11655205;

}
function get_11655177(self_11655182) {
  var result_11655184 = null;
  var result_11655184_Idx = 0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (is_none_11655200(self_11655182)) {
    F.line = 215;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI9950204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    F.line = 216;
    result_11655184 = self_11655182; result_11655184_Idx = "val";
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return [result_11655184, result_11655184_Idx];

}
function some_11440204(val_11440207) {
  var result_11440209 = ({val: null});

  var F={procname:"some.some",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    if (!(!((val_11440207 == null)))) {
    F.line = 118;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/options.nim(118, 11) `not val.isNil` "));
    }
    
    F.line = 119;
    result_11440209.val = val_11440207;
  framePtr = F.prev;

  return result_11440209;

}
function is_some_11660154(self_11660158) {
  var result_11660159 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_11660159 = !((self_11660158.val == null));
  framePtr = F.prev;

  return result_11660159;

}
function is_none_11660288(self_11660292) {
  var result_11660293 = false;

  var F={procname:"isNone.isNone",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 158;
    result_11660293 = (self_11660292.val == null);
  framePtr = F.prev;

  return result_11660293;

}
function get_11660265(self_11660270) {
  var result_11660272 = null;
  var result_11660272_Idx = 0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (is_none_11660288(self_11660270)) {
    F.line = 215;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI9950204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    F.line = 216;
    result_11660272 = self_11660270; result_11660272_Idx = "val";
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return [result_11660272, result_11660272_Idx];

}
function HEX26_11685079(x_11685083, y_11685085) {
  var result_11685087 = null;

  var F={procname:"&.&",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1599;
    result_11685087 = new Array(chckRange(addInt((x_11685083 != null ? x_11685083.length : 0), (y_11685085 != null ? y_11685085.length : 0)), 0, 2147483647)); for (var i=0;i<chckRange(addInt((x_11685083 != null ? x_11685083.length : 0), (y_11685085 != null ? y_11685085.length : 0)), 0, 2147483647);++i) {result_11685087[i]=null;}    L1: do {
      F.line = 1600;
      var i_11685118 = 0;
      F.line = 66;
      var colontmp__14326032 = 0;
      F.line = 1600;
      colontmp__14326032 = subInt((x_11685083 != null ? x_11685083.length : 0), 1);
      F.line = 77;
      var res_14326033 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_14326033 <= colontmp__14326032)) break L3;
            F.line = 1600;
            i_11685118 = res_14326033;
            F.line = 1601;
            result_11685087[chckIndx(i_11685118, 0, (result_11685087 != null ? result_11685087.length : 0)+0-1)-0] = x_11685083[chckIndx(i_11685118, 0, (x_11685083 != null ? x_11685083.length : 0)+0-1)-0];
            F.line = 80;
            res_14326033 = addInt(res_14326033, 1);
          }
      } while(false);
    } while(false);
    L4: do {
      F.line = 1602;
      var i_11685132 = 0;
      F.line = 66;
      var colontmp__14326039 = 0;
      F.line = 1602;
      colontmp__14326039 = subInt((y_11685085 != null ? y_11685085.length : 0), 1);
      F.line = 77;
      var res_14326040 = 0;
      L5: do {
        F.line = 78;
          L6: while (true) {
          if (!(res_14326040 <= colontmp__14326039)) break L6;
            F.line = 1602;
            i_11685132 = res_14326040;
            F.line = 1603;
            result_11685087[chckIndx(addInt(i_11685132, (x_11685083 != null ? x_11685083.length : 0)), 0, (result_11685087 != null ? result_11685087.length : 0)+0-1)-0] = y_11685085[chckIndx(i_11685132, 0, (y_11685085 != null ? y_11685085.length : 0)+0-1)-0];
            F.line = 80;
            res_14326040 = addInt(res_14326040, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_11685087;

}
function map_11685030(s_11685035, op_11685038) {
  var result_11685040 = null;

  var F={procname:"map.map",prev:framePtr,filename:"sequtils.nim",line:0};
  framePtr = F;
    F.line = 374;
    result_11685040 = new Array(chckRange((s_11685035 != null ? s_11685035.length : 0), 0, 2147483647)); for (var i=0;i<chckRange((s_11685035 != null ? s_11685035.length : 0), 0, 2147483647);++i) {result_11685040[i]=null;}    L1: do {
      F.line = 375;
      var i_11685063 = 0;
      F.line = 104;
      var colontmp__14326046 = 0;
      F.line = 375;
      colontmp__14326046 = (s_11685035 != null ? s_11685035.length : 0);
      F.line = 106;
      var i_14326047 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_14326047 < colontmp__14326046)) break L3;
            F.line = 375;
            i_11685063 = i_14326047;
            F.line = 376;
            result_11685040[chckIndx(i_11685063, 0, (result_11685040 != null ? result_11685040.length : 0)+0-1)-0] = op_11685038(s_11685035[chckIndx(i_11685063, 0, (s_11685035 != null ? s_11685035.length : 0)+0-1)-0]);
            F.line = 109;
            i_14326047 = addInt(i_14326047, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_11685040;

}
function new_seq_11675059(len_11675062) {
  var result_11675064 = null;

  var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 643;
    result_11675064 = new Array(len_11675062); for (var i=0;i<len_11675062;++i) {result_11675064[i]=({val: null});}  framePtr = F.prev;

  return result_11675064;

}
function filter_11675048(s_11675052, pred_11675055) {
  var result_11675057 = null;

  var F={procname:"filter.filter",prev:framePtr,filename:"sequtils.nim",line:0};
  framePtr = F;
    F.line = 455;
    result_11675057 = nimCopy(null, new_seq_11675059(0), NTI11675063);
    L1: do {
      F.line = 456;
      var i_11675096 = 0;
      F.line = 104;
      var colontmp__14326050 = 0;
      F.line = 456;
      colontmp__14326050 = (s_11675052 != null ? s_11675052.length : 0);
      F.line = 106;
      var i_14326051 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_14326051 < colontmp__14326050)) break L3;
            F.line = 456;
            i_11675096 = i_14326051;
            if (pred_11675055(s_11675052[chckIndx(i_11675096, 0, (s_11675052 != null ? s_11675052.length : 0)+0-1)-0])) {
            F.line = 458;
            var Tmp4 = nimCopy(null, s_11675052[chckIndx(i_11675096, 0, (s_11675052 != null ? s_11675052.length : 0)+0-1)-0], NTI10275009);
            if (result_11675057 != null) { result_11675057.push(Tmp4); } else { result_11675057 = [Tmp4]; };
            }
            
            F.line = 109;
            i_14326051 = addInt(i_14326051, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_11675057;

}
function map_11670029(s_11670034, op_11670037) {
  var result_11670039 = null;

  var F={procname:"map.map",prev:framePtr,filename:"sequtils.nim",line:0};
  framePtr = F;
    F.line = 374;
    result_11670039 = new Array(chckRange((s_11670034 != null ? s_11670034.length : 0), 0, 2147483647)); for (var i=0;i<chckRange((s_11670034 != null ? s_11670034.length : 0), 0, 2147483647);++i) {result_11670039[i]=({val: null});}    L1: do {
      F.line = 375;
      var i_11670062 = 0;
      F.line = 104;
      var colontmp__14326054 = 0;
      F.line = 375;
      colontmp__14326054 = (s_11670034 != null ? s_11670034.length : 0);
      F.line = 106;
      var i_14326055 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_14326055 < colontmp__14326054)) break L3;
            F.line = 375;
            i_11670062 = i_14326055;
            F.line = 376;
            nimCopy(result_11670039[chckIndx(i_11670062, 0, (result_11670039 != null ? result_11670039.length : 0)+0-1)-0], op_11670037(s_11670034[chckIndx(i_11670062, 0, (s_11670034 != null ? s_11670034.length : 0)+0-1)-0]), NTI10275009);
            F.line = 109;
            i_14326055 = addInt(i_14326055, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_11670039;

}
function get_11680059(self_11680063) {
  var result_11680064 = null;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 171;
    if (is_none_11660288(self_11680063)) {
    F.line = 185;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI9950204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    result_11680064 = self_11680063.val;
  framePtr = F.prev;

  return result_11680064;

}
function len_11640534(t_11640539) {
  var result_11640540 = 0;

  var F={procname:"len.len",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 491;
    result_11640540 = t_11640539.counter;
  framePtr = F.prev;

  return result_11640540;

}
function flush_debug_drawings_11635738() {
  var result_11635741 = null;

  var F={procname:"debug_draw.flushDebugDrawings",prev:framePtr,filename:"debug_draw.nim",line:0};
  framePtr = F;
    F.line = 21;
    F.line = 780;
    var resultHEX60gensym11635745_11650229 = [];
    L1: do {
      F.line = 781;
      var xHEX60gensym11635746_11650236 = null;
      F.line = 728;
      var l_14326066 = len_11640534(debug_drawings_11540629[0]);
      L2: do {
        F.line = 729;
        var h_14326068 = 0;
        F.line = 66;
        var colontmp__14326069 = 0;
        F.line = 729;
        colontmp__14326069 = (debug_drawings_11540629[0].data != null ? (debug_drawings_11540629[0].data.length-1) : -1);
        F.line = 77;
        var res_14326070 = 0;
        L3: do {
          F.line = 78;
            L4: while (true) {
            if (!(res_14326070 <= colontmp__14326069)) break L4;
              F.line = 729;
              h_14326068 = res_14326070;
              if (is_filled_10157018(debug_drawings_11540629[0].data[chckIndx(h_14326068, 0, (debug_drawings_11540629[0].data != null ? debug_drawings_11540629[0].data.length : 0)+0-1)-0].Field0)) {
              F.line = 781;
              xHEX60gensym11635746_11650236 = debug_drawings_11540629[0].data[chckIndx(h_14326068, 0, (debug_drawings_11540629[0].data != null ? debug_drawings_11540629[0].data.length : 0)+0-1)-0].Field2;
              F.line = 782;
              if (resultHEX60gensym11635745_11650229 != null) { resultHEX60gensym11635745_11650229.push(xHEX60gensym11635746_11650236); } else { resultHEX60gensym11635745_11650229 = [xHEX60gensym11635746_11650236]; };
              if (!((len_11640534(debug_drawings_11540629[0]) == l_14326066))) {
              F.line = 732;
              failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tables.nim(732, 13) `len(t) == L` the length of the table changed while iterating over it"));
              }
              
              }
              
              F.line = 80;
              res_14326070 = addInt(res_14326070, 1);
            }
        } while(false);
      } while(false);
    } while(false);
    result_11635741 = nimCopy(null, resultHEX60gensym11635745_11650229, NTI11640401);
  framePtr = F.prev;

  return result_11635741;

}
function render_11651014(self_11651016) {
      var Tmp1;
    var Tmp2;
      var Tmp3;
    var Tmp4;
    function HEX3Aanonymous_11670001(x_11670009) {
      var result_11670013 = ({val: null});

      var F={procname:"render.:anonymous",prev:framePtr,filename:"rendering.nim",line:0};
      framePtr = F;
        F.line = 21;
        nimCopy(result_11670013, render_11651014(x_11670009), NTI10275009);
      framePtr = F.prev;

      return result_11670013;

    }
    function HEX3Aanonymous_11675001(x_11675008) {
      var result_11675012 = false;

      var F={procname:"render.:anonymous",prev:framePtr,filename:"rendering.nim",line:0};
      framePtr = F;
        F.line = 21;
        result_11675012 = is_some_11660154(x_11675008);
      framePtr = F.prev;

      return result_11675012;

    }
    function HEX3Aanonymous_11680001(x_11680009) {
      var result_11680013 = null;

      var F={procname:"render.:anonymous",prev:framePtr,filename:"rendering.nim",line:0};
      framePtr = F;
        F.line = 21;
        result_11680013 = get_11680059(x_11680009);
      framePtr = F.prev;

      return result_11680013;

    }

  var result_11651021 = [({val: null})];

  var F={procname:"rendering.render",prev:framePtr,filename:"rendering.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (!((get_11164512(self_11651016.props.visibility, 0) == 0))) {
    F.line = 8;
    nimCopy(result_11651021[0], none_11655062(), NTI10275009);
    break BeforeRet;
    }
    
      if (!is_some_10990113(self_11651016.drawable)) Tmp1 = false; else {        Tmp1 = is_rooted_10912027(self_11651016);      }    if (Tmp1) {
    F.line = 10;
    nimCopy(result_11651021[0], (Tmp2 = get_11655177(self_11651016.drawable), Tmp2)[0][Tmp2[1]].render(self_11651016), NTI10275009);
    }
    else {
      F.line = 12;
      nimCopy(result_11651021[0], some_11440204({transform: nimCopy(null, self_11651016.props.transform, NTI10260163), bounds: (Tmp3 = get_10480301(self_11651016.bounds), Tmp3)[0][Tmp3[1]], clipToBounds: get_10476339(self_11651016.props.clipToBounds, false), kind: 0, colorInfo: ({val: null}), strokeInfo: ({val: null}), children: null, textInfo: null, segments: null, circleInfo: ({center: null, radius: 0.0}), ellipseInfo: ({center: null, radius: null, rotation: 0.0, startAngle: 0.0, endAngle: 0.0}), rectangleInfo: ({bounds: null})}), NTI10275009);
    }
    
    if (is_some_11660154(result_11651021[0])) {
    F.line = 21;
    (Tmp4 = get_11660265(result_11651021[0]), Tmp4)[0][Tmp4[1]].children = nimCopy(null, HEX26_11685079(map_11685030(filter_11675048(map_11670029(self_11651016.children, HEX3Aanonymous_11670001), HEX3Aanonymous_11675001), HEX3Aanonymous_11680001), flush_debug_drawings_11635738()), NTI11685086);
    }
    
  } while (false);
  framePtr = F.prev;

  return result_11651021[0];

}
function render(ctx_14325120, dt_14325121) {
  var result_14325126 = ({val: null});

  var F={procname:"main.render",prev:framePtr,filename:"main.nim",line:0};
  framePtr = F;
    F.line = 37;
    if (pointer_pos_changed_this_frame_14325055[0]) {
    F.line = 38;
    dispatch_pointer_move_12131113(ctx_14325120.rootElement, pointer_args_12125626(ctx_14325120.rootElement, scale_mouse_pos_14325084(ctx_14325120, last_pointer_pos_14325062[0])));
    F.line = 39;
    pointer_pos_changed_this_frame_14325055[0] = false;
    }
    
    if (((pointer_pressed_last_frame_14325063[0] == false) && (pointer_pressed_this_frame_14325064[0] == true))) {
    F.line = 42;
    dispatch_pointer_down_12125706(ctx_14325120.rootElement, pointer_args_12125626(ctx_14325120.rootElement, scale_mouse_pos_14325084(ctx_14325120, last_pointer_pos_14325062[0])));
    F.line = 43;
    pointer_pressed_last_frame_14325063[0] = true;
    }
    
    if (((pointer_pressed_last_frame_14325063[0] == true) && (pointer_pressed_this_frame_14325064[0] == false))) {
    F.line = 46;
    dispatch_pointer_up_12129065(ctx_14325120.rootElement, pointer_args_12125626(ctx_14325120.rootElement, scale_mouse_pos_14325084(ctx_14325120, last_pointer_pos_14325062[0])));
    F.line = 47;
    pointer_pressed_last_frame_14325063[0] = false;
    }
    
    F.line = 49;
    var available_rect_14325771 = rect_10480068(zero_9953079(), divide_14325630(window_size_14325069[0], ctx_14325120.scale));
    F.line = 50;
    perform_outstanding_layouts_and_measures_10965436(available_rect_14325771);
    F.line = 55;
    calculate_world_positions_10326293(ctx_14325120.rootElement);
    F.line = 56;
    calculate_clip_bounds_10476278(ctx_14325120.rootElement);
    F.line = 58;
    ctx_14325120.dispatchUpdate(dt_14325121);
    nimCopy(result_14325126, render_11651014(ctx_14325120.rootElement), NTI10275009);
  framePtr = F.prev;

  return result_14325126;

}
function dispatchWindowSizeChanged(new_size_14326080) {
  var F={procname:"main.dispatchWindowSizeChanged",prev:framePtr,filename:"main.nim",line:0};
  framePtr = F;
    F.line = 62;
    window_size_14325069[0] = new_size_14326080;
  framePtr = F.prev;

  
}
function dispatchPointerMove(x_14326096, y_14326097) {
      var Tmp1;
      var Tmp2;

  var F={procname:"main.dispatchPointerMove",prev:framePtr,filename:"main.nim",line:0};
  framePtr = F;
      if (!((last_pointer_pos_14325062[0].x == x_14326096))) Tmp2 = true; else {        Tmp2 = !((last_pointer_pos_14325062[0].y == y_14326097));      }      if (!Tmp2) Tmp1 = false; else {        Tmp1 = (pointer_pos_changed_this_frame_14325055[0] == false);      }    if (Tmp1) {
    F.line = 66;
    pointer_pos_changed_this_frame_14325055[0] = true;
    F.line = 67;
    last_pointer_pos_14325062[0] = vec2_9953092(x_14326096, y_14326097);
    }
    
  framePtr = F.prev;

  
}
function dispatchPointerPress(x_14335174, y_14335175) {
  var F={procname:"main.dispatchPointerPress",prev:framePtr,filename:"main.nim",line:0};
  framePtr = F;
    F.line = 70;
    last_pointer_pos_14325062[0] = vec2_9953092(x_14335174, y_14335175);
    F.line = 71;
    pointer_pressed_this_frame_14325064[0] = true;
  framePtr = F.prev;

  
}
function dispatchPointerRelease(x_14335197, y_14335198) {
  var F={procname:"main.dispatchPointerRelease",prev:framePtr,filename:"main.nim",line:0};
  framePtr = F;
    F.line = 74;
    last_pointer_pos_14325062[0] = vec2_9953092(x_14335197, y_14335198);
    F.line = 75;
    pointer_pressed_this_frame_14325064[0] = false;
  framePtr = F.prev;

  
}
function delete_14347165(x_14347170, x_14347170_Idx, i_14347171) {
  var F={procname:"delete.delete",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1254;
    x_14347170[x_14347170_Idx].splice(i_14347171, 1);
  framePtr = F.prev;

  
}
function find_14345215(a_14345219, item_14345220) {
  var result_14345221 = 0;

  var F={procname:"find.find",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    L1: do {
      F.line = 1751;
      var i_14345235 = null;
      F.line = 184;
      var i_14350702 = 0;
      F.line = 185;
      var l_14350703 = (a_14345219 != null ? a_14345219.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14350702 < l_14350703)) break L3;
            F.line = 1751;
            i_14345235 = a_14345219[chckIndx(i_14350702, 0, (a_14345219 != null ? a_14345219.length : 0)+0-1)-0];
            if ((i_14345235 == item_14345220)) {
            F.line = 1752;
            break BeforeRet;
            }
            
            F.line = 1753;
            result_14345221 = addInt(result_14345221, 1);
            F.line = 188;
            i_14350702 = addInt(i_14350702, 1);
            if (!(((a_14345219 != null ? a_14345219.length : 0) == l_14350703))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 1754;
    result_14345221 = -1;
  } while (false);
  framePtr = F.prev;

  return result_14345221;

}
function emit_14335261(self_14335266, self_14335266_Idx, data_14335267) {
  var F={procname:"emit.emit",prev:framePtr,filename:"events.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 24;
      var to_remove_14345214 = null;
      F.line = 184;
      var i_14350681 = 0;
      F.line = 185;
      var l_14350682 = (self_14335266[self_14335266_Idx].toRemove != null ? self_14335266[self_14335266_Idx].toRemove.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14350681 < l_14350682)) break L3;
            F.line = 24;
            to_remove_14345214 = self_14335266[self_14335266_Idx].toRemove[chckIndx(i_14350681, 0, (self_14335266[self_14335266_Idx].toRemove != null ? self_14335266[self_14335266_Idx].toRemove.length : 0)+0-1)-0];
            F.line = 25;
            delete_14347165(self_14335266[self_14335266_Idx], "listeners", chckRange(find_14345215(self_14335266[self_14335266_Idx].listeners, to_remove_14345214), 0, 2147483647));
            F.line = 188;
            i_14350681 = addInt(i_14350681, 1);
            if (!(((self_14335266[self_14335266_Idx].toRemove != null ? self_14335266[self_14335266_Idx].toRemove.length : 0) == l_14350682))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 26;
    self_14335266[self_14335266_Idx].toRemove = nimCopy(null, [], NTI14350429);
    L4: do {
      F.line = 28;
      var to_add_14350443 = null;
      F.line = 184;
      var i_14350685 = 0;
      F.line = 185;
      var l_14350686 = (self_14335266[self_14335266_Idx].toAdd != null ? self_14335266[self_14335266_Idx].toAdd.length : 0);
      L5: do {
        F.line = 186;
          L6: while (true) {
          if (!(i_14350685 < l_14350686)) break L6;
            F.line = 28;
            to_add_14350443 = self_14335266[self_14335266_Idx].toAdd[chckIndx(i_14350685, 0, (self_14335266[self_14335266_Idx].toAdd != null ? self_14335266[self_14335266_Idx].toAdd.length : 0)+0-1)-0];
            F.line = 29;
            if (self_14335266[self_14335266_Idx].listeners != null) { self_14335266[self_14335266_Idx].listeners.push(to_add_14350443); } else { self_14335266[self_14335266_Idx].listeners = [to_add_14350443]; };
            F.line = 188;
            i_14350685 = addInt(i_14350685, 1);
            if (!(((self_14335266[self_14335266_Idx].toAdd != null ? self_14335266[self_14335266_Idx].toAdd.length : 0) == l_14350686))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 30;
    self_14335266[self_14335266_Idx].toAdd = nimCopy(null, [], NTI14350606);
    L7: do {
      F.line = 32;
      var listener_14350620 = null;
      F.line = 184;
      var i_14350689 = 0;
      F.line = 185;
      var l_14350690 = (self_14335266[self_14335266_Idx].listeners != null ? self_14335266[self_14335266_Idx].listeners.length : 0);
      L8: do {
        F.line = 186;
          L9: while (true) {
          if (!(i_14350689 < l_14350690)) break L9;
            F.line = 32;
            listener_14350620 = self_14335266[self_14335266_Idx].listeners[chckIndx(i_14350689, 0, (self_14335266[self_14335266_Idx].listeners != null ? self_14335266[self_14335266_Idx].listeners.length : 0)+0-1)-0];
            F.line = 33;
            listener_14350620(data_14335267);
            F.line = 188;
            i_14350689 = addInt(i_14350689, 1);
            if (!(((self_14335266[self_14335266_Idx].listeners != null ? self_14335266[self_14335266_Idx].listeners.length : 0) == l_14350690))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function dispatchKeyDown(key_code_14335220, key_14335221) {
  var F={procname:"main.dispatchKeyDown",prev:framePtr,filename:"main.nim",line:0};
  framePtr = F;
    F.line = 78;
    emit_14335261(key_down_emitter_12098959, 0, {key: nimCopy(null, key_14335221, NTI112), keyCode: key_code_14335220});
  framePtr = F.prev;

  
}
function add_tag_10840911(element_10840913, tag_10840914) {
  var F={procname:"tag.addTag",prev:framePtr,filename:"tag.nim",line:0};
  framePtr = F;
    F.line = 14;
    incl_10840974(tag_set_10735658(tag_10840914), element_10840913);
  framePtr = F.prev;

  
}
function set_parent_on_children_14325019(elem_14325022) {
  var F={procname:"main.setParentOnChildren",prev:framePtr,filename:"main.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 21;
      var child_14325036 = null;
      F.line = 184;
      var i_14360147 = 0;
      F.line = 185;
      var l_14360148 = (elem_14325022.children != null ? elem_14325022.children.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14360147 < l_14360148)) break L3;
            F.line = 21;
            child_14325036 = elem_14325022.children[chckIndx(i_14360147, 0, (elem_14325022.children != null ? elem_14325022.children.length : 0)+0-1)-0];
            F.line = 22;
            nimCopy(child_14325036.parent, some_11005282(elem_14325022), NTI10275035);
            F.line = 23;
            set_parent_on_children_14325019(child_14325036);
            F.line = 188;
            i_14360147 = addInt(i_14360147, 1);
            if (!(((elem_14325022.children != null ? elem_14325022.children.length : 0) == l_14360148))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function is_some_11015525(self_11015529) {
  var result_11015530 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_11015530 = !((self_11015529.val == null));
  framePtr = F.prev;

  return result_11015530;

}
function is_none_11015703(self_11015707) {
  var result_11015708 = false;

  var F={procname:"isNone.isNone",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 158;
    result_11015708 = (self_11015707.val == null);
  framePtr = F.prev;

  return result_11015708;

}
function get_11015680(self_11015685) {
  var result_11015687 = null;
  var result_11015687_Idx = 0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (is_none_11015703(self_11015685)) {
    F.line = 215;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI9950204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    F.line = 216;
    result_11015687 = self_11015685; result_11015687_Idx = "val";
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return [result_11015687, result_11015687_Idx];

}
function dispatch_on_rooted_11015507(self_11015509) {
    var Tmp1;

  var F={procname:"element.dispatchOnRooted",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    if (is_some_11015525(self_11015509.onRooted)) {
    F.line = 155;
    (Tmp1 = get_11015680(self_11015509.onRooted), Tmp1)[0][Tmp1[1]](self_11015509);
    }
    
    L2: do {
      F.line = 156;
      var child_11020057 = null;
      F.line = 184;
      var i_14360151 = 0;
      F.line = 185;
      var l_14360152 = (self_11015509.children != null ? self_11015509.children.length : 0);
      L3: do {
        F.line = 186;
          L4: while (true) {
          if (!(i_14360151 < l_14360152)) break L4;
            F.line = 156;
            child_11020057 = self_11015509.children[chckIndx(i_14360151, 0, (self_11015509.children != null ? self_11015509.children.length : 0)+0-1)-0];
            F.line = 157;
            dispatch_on_rooted_11015507(child_11020057);
            F.line = 188;
            i_14360151 = addInt(i_14360151, 1);
            if (!(((self_11015509.children != null ? self_11015509.children.length : 0) == l_14360152))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function invalidate_layout_10965696(self_10965698) {
  var F={procname:"element.invalidateLayout",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 106;
    invalidate_measure_10965574(self_10965698);
  framePtr = F.prev;

  
}
function delete_12220253(x_12220258, x_12220258_Idx, i_12220259) {
  var F={procname:"delete.delete",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1254;
    x_12220258[x_12220258_Idx].splice(i_12220259, 1);
  framePtr = F.prev;

  
}
function find_12220215(a_12220219, item_12220220) {
  var result_12220221 = 0;

  var F={procname:"find.find",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    L1: do {
      F.line = 1751;
      var i_12220228 = null;
      F.line = 184;
      var i_14360178 = 0;
      F.line = 185;
      var l_14360179 = (a_12220219 != null ? a_12220219.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14360178 < l_14360179)) break L3;
            F.line = 1751;
            i_12220228 = a_12220219[chckIndx(i_14360178, 0, (a_12220219 != null ? a_12220219.length : 0)+0-1)-0];
            if ((i_12220228 == item_12220220)) {
            F.line = 1752;
            break BeforeRet;
            }
            
            F.line = 1753;
            result_12220221 = addInt(result_12220221, 1);
            F.line = 188;
            i_14360178 = addInt(i_14360178, 1);
            if (!(((a_12220219 != null ? a_12220219.length : 0) == l_14360179))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 1754;
    result_12220221 = -1;
  } while (false);
  framePtr = F.prev;

  return result_12220221;

}
function emit_12211609(self_12211614, self_12211614_Idx, data_12211615) {
  var F={procname:"emit.emit",prev:framePtr,filename:"events.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 24;
      var to_remove_12220214 = null;
      F.line = 184;
      var i_14360157 = 0;
      F.line = 185;
      var l_14360158 = (self_12211614[self_12211614_Idx].toRemove != null ? self_12211614[self_12211614_Idx].toRemove.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14360157 < l_14360158)) break L3;
            F.line = 24;
            to_remove_12220214 = self_12211614[self_12211614_Idx].toRemove[chckIndx(i_14360157, 0, (self_12211614[self_12211614_Idx].toRemove != null ? self_12211614[self_12211614_Idx].toRemove.length : 0)+0-1)-0];
            F.line = 25;
            delete_12220253(self_12211614[self_12211614_Idx], "listeners", chckRange(find_12220215(self_12211614[self_12211614_Idx].listeners, to_remove_12220214), 0, 2147483647));
            F.line = 188;
            i_14360157 = addInt(i_14360157, 1);
            if (!(((self_12211614[self_12211614_Idx].toRemove != null ? self_12211614[self_12211614_Idx].toRemove.length : 0) == l_14360158))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 26;
    self_12211614[self_12211614_Idx].toRemove = nimCopy(null, [], NTI12225429);
    L4: do {
      F.line = 28;
      var to_add_12225436 = null;
      F.line = 184;
      var i_14360161 = 0;
      F.line = 185;
      var l_14360162 = (self_12211614[self_12211614_Idx].toAdd != null ? self_12211614[self_12211614_Idx].toAdd.length : 0);
      L5: do {
        F.line = 186;
          L6: while (true) {
          if (!(i_14360161 < l_14360162)) break L6;
            F.line = 28;
            to_add_12225436 = self_12211614[self_12211614_Idx].toAdd[chckIndx(i_14360161, 0, (self_12211614[self_12211614_Idx].toAdd != null ? self_12211614[self_12211614_Idx].toAdd.length : 0)+0-1)-0];
            F.line = 29;
            if (self_12211614[self_12211614_Idx].listeners != null) { self_12211614[self_12211614_Idx].listeners.push(to_add_12225436); } else { self_12211614[self_12211614_Idx].listeners = [to_add_12225436]; };
            F.line = 188;
            i_14360161 = addInt(i_14360161, 1);
            if (!(((self_12211614[self_12211614_Idx].toAdd != null ? self_12211614[self_12211614_Idx].toAdd.length : 0) == l_14360162))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 30;
    self_12211614[self_12211614_Idx].toAdd = nimCopy(null, [], NTI12225458);
    L7: do {
      F.line = 32;
      var listener_12225465 = null;
      F.line = 184;
      var i_14360165 = 0;
      F.line = 185;
      var l_14360166 = (self_12211614[self_12211614_Idx].listeners != null ? self_12211614[self_12211614_Idx].listeners.length : 0);
      L8: do {
        F.line = 186;
          L9: while (true) {
          if (!(i_14360165 < l_14360166)) break L9;
            F.line = 32;
            listener_12225465 = self_12211614[self_12211614_Idx].listeners[chckIndx(i_14360165, 0, (self_12211614[self_12211614_Idx].listeners != null ? self_12211614[self_12211614_Idx].listeners.length : 0)+0-1)-0];
            F.line = 33;
            listener_12225465(data_12211615);
            F.line = 188;
            i_14360165 = addInt(i_14360165, 1);
            if (!(((self_12211614[self_12211614_Idx].listeners != null ? self_12211614[self_12211614_Idx].listeners.length : 0) == l_14360166))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function dispatch_update_12211580(dt_12211582) {
  var F={procname:"update_manager.dispatchUpdate",prev:framePtr,filename:"update_manager.nim",line:0};
  framePtr = F;
    F.line = 15;
    emit_12211609(update_manager_listeners_12211172, 0, dt_12211582);
  framePtr = F.prev;

  
}
function dispatch_update_14350705(dt_14350707) {
  var F={procname:"main.dispatchUpdate",prev:framePtr,filename:"main.nim",line:0};
  framePtr = F;
    F.line = 86;
    dispatch_update_12211580(dt_14350707);
  framePtr = F.prev;

  
}
function raw_get_11715930(t_11715934, key_11715935, hc_11715936, hc_11715936_Idx) {
            var Tmp3;

  var result_11715937 = 0;

  var F={procname:"rawGet.rawGet",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 63;
    hc_11715936[hc_11715936_Idx] = hash_10285010(key_11715935);
    if ((hc_11715936[hc_11715936_Idx] == 0)) {
    F.line = 65;
    hc_11715936[hc_11715936_Idx] = 314159265;
    }
    
    if (((t_11715934.data != null ? t_11715934.data.length : 0) == 0)) {
    F.line = 47;
    result_11715937 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_11725548 = (hc_11715936[hc_11715936_Idx] & (t_11715934.data != null ? (t_11715934.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_10157018(t_11715934.data[chckIndx(h_11725548, 0, (t_11715934.data != null ? t_11715934.data.length : 0)+0-1)-0].Field0)) break L2;
            if (!(t_11715934.data[chckIndx(h_11725548, 0, (t_11715934.data != null ? t_11715934.data.length : 0)+0-1)-0].Field0 == hc_11715936[hc_11715936_Idx])) Tmp3 = false; else {              Tmp3 = (t_11715934.data[chckIndx(h_11725548, 0, (t_11715934.data != null ? t_11715934.data.length : 0)+0-1)-0].Field1 == key_11715935);            }          if (Tmp3) {
          F.line = 55;
          result_11715937 = h_11725548;
          break BeforeRet;
          }
          
          F.line = 56;
          h_11725548 = next_try_10160014(h_11725548, (t_11715934.data != null ? (t_11715934.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_11715937 = subInt(-1, h_11725548);
  } while (false);
  framePtr = F.prev;

  return result_11715937;

}
function has_key_11715907(t_11715912, key_11715913) {
  var result_11715914 = false;

  var F={procname:"hasKey.hasKey",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 395;
    var hc_11715915 = [0];
    F.line = 396;
    result_11715914 = (0 <= raw_get_11715930(t_11715912, key_11715913, hc_11715915, 0));
  framePtr = F.prev;

  return result_11715914;

}
function HEX5BHEX5D_11727286(t_11727292, key_11727293) {
  var result_11727295 = null;
  var result_11727295_Idx = 0;

  var F={procname:"[].[]",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 257;
    var hcHEX60gensym10160424_11727296 = [0];
    F.line = 258;
    var indexHEX60gensym10160425_11727305 = raw_get_11715930(t_11727292, key_11727293, hcHEX60gensym10160424_11727296, 0);
    if ((0 <= indexHEX60gensym10160425_11727305)) {
    F.line = 259;
    result_11727295 = t_11727292.data[chckIndx(indexHEX60gensym10160425_11727305, 0, (t_11727292.data != null ? t_11727292.data.length : 0)+0-1)-0]; result_11727295_Idx = "Field2";
    }
    else {
      F.line = 262;
      raiseException({message: (makeNimstrLit("key not found: ") || []).concat(HEX24_11142220(key_11727293) || []), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    
  framePtr = F.prev;

  return [result_11727295, result_11727295_Idx];

}
function is_some_11740230(self_11740234) {
  var result_11740235 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_11740235 = !((self_11740234.val == null));
  framePtr = F.prev;

  return result_11740235;

}
function is_none_11740501(self_11740505) {
  var result_11740506 = false;

  var F={procname:"isNone.isNone",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 158;
    result_11740506 = (self_11740505.val == null);
  framePtr = F.prev;

  return result_11740506;

}
function get_11740480(self_11740484) {
  var result_11740485 = null;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 171;
    if (is_none_11740501(self_11740484)) {
    F.line = 185;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI9950204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    result_11740485 = self_11740484.val;
  framePtr = F.prev;

  return result_11740485;

}
function dispatch_update_11715658(self_11715660, dt_11715661) {
      var Tmp5;

  var result_11715662 = false;

  var F={procname:"behaviors.dispatchUpdate",prev:framePtr,filename:"behaviors.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 17;
    var stop_bubbling_11715663 = false;
    L1: do {
      F.line = 18;
      var child_11715676 = null;
      F.line = 184;
      var i_14360182 = 0;
      F.line = 185;
      var l_14360183 = (self_11715660.children != null ? self_11715660.children.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14360182 < l_14360183)) break L3;
            F.line = 18;
            child_11715676 = self_11715660.children[chckIndx(i_14360182, 0, (self_11715660.children != null ? self_11715660.children.length : 0)+0-1)-0];
            if (dispatch_update_11715658(child_11715676, dt_11715661)) {
            F.line = 20;
            stop_bubbling_11715663 = true;
            }
            
            F.line = 188;
            i_14360182 = addInt(i_14360182, 1);
            if (!(((self_11715660.children != null ? self_11715660.children.length : 0) == l_14360183))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    if ((is_rooted_10912027(self_11715660) && has_key_11715907(behaviors_list_11715629[0], self_11715660))) {
    L4: do {
      F.line = 22;
      var behavior_11740214 = ({update: ({val: null}), added: ({val: null})});
      F.line = 182;
      var colontmp__14360186 = null;
      F.line = 22;
      colontmp__14360186 = (Tmp5 = HEX5BHEX5D_11727286(behaviors_list_11715629[0], self_11715660), Tmp5)[0][Tmp5[1]];
      F.line = 184;
      var i_14360188 = 0;
      F.line = 185;
      var l_14360189 = (colontmp__14360186 != null ? colontmp__14360186.length : 0);
      L6: do {
        F.line = 186;
          L7: while (true) {
          if (!(i_14360188 < l_14360189)) break L7;
            F.line = 22;
            nimCopy(behavior_11740214, colontmp__14360186[chckIndx(i_14360188, 0, (colontmp__14360186 != null ? colontmp__14360186.length : 0)+0-1)-0], NTI11686068);
            if (is_some_11740230(behavior_11740214.update)) {
            F.line = 24;
            get_11740480(behavior_11740214.update)(self_11715660, dt_11715661);
            }
            
            F.line = 188;
            i_14360188 = addInt(i_14360188, 1);
            if (!(((colontmp__14360186 != null ? colontmp__14360186.length : 0) == l_14360189))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    }
    
    F.line = 25;
    result_11715662 = stop_bubbling_11715663;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11715662;

}
function init(size_14350727, scale_14350732, measure_text_function_14355012, render_14360004) {
    function HEX3Aanonymous_14360008(dt_14360010) {
      var F={procname:"init.:anonymous",prev:framePtr,filename:"main.nim",line:0};
      framePtr = F;
        F.line = 111;
        dispatch_update_14350705(dt_14360010);
        F.line = 112;
        dispatch_update_11715658(root_element_14360006, dt_14360010);
      framePtr = F.prev;

      
    }

  var result_14360005 = null;

  var F={procname:"main.init",prev:framePtr,filename:"main.nim",line:0};
  framePtr = F;
    F.line = 94;
    measure_text_11440012[0] = measure_text_function_14355012;
    F.line = 95;
    window_size_14325069[0] = size_14350727;
    F.line = 96;
    var root_element_14360006 = render_14360004();
    F.line = 99;
    add_tag_10840911(root_element_14360006, makeNimstrLit("root"));
    F.line = 100;
    set_parent_on_children_14325019(root_element_14360006);
    F.line = 101;
    dispatch_on_rooted_11015507(root_element_14360006);
    F.line = 102;
    invalidate_layout_10965696(root_element_14360006);
    F.line = 103;
    result_14360005 = {rootElement: root_element_14360006, dispatchPointerMove: dispatchPointerMove, dispatchPointerDown: dispatchPointerPress, dispatchPointerUp: dispatchPointerRelease, dispatchKeyDown: dispatchKeyDown, dispatchWindowSizeChanged: dispatchWindowSizeChanged, dispatchUpdate: HEX3Aanonymous_14360008, scale: scale_14350732, size: size_14350727, render: null};
  framePtr = F.prev;

  return result_14360005;

}
function nim_interop_test() {
  var F={procname:"main.nim_interop_test",prev:framePtr,filename:"main.nim",line:0};
  framePtr = F;
    F.line = 118;
    rawEcho(makeNimstrLit("Hello, world. From nim."));
  framePtr = F.prev;

  
}
function to_float_9986050(x_9986052) {
  var result_9986053 = 0.0;

  var F={procname:"utils.toFloat",prev:framePtr,filename:"utils.nim",line:0};
  framePtr = F;
    F.line = 6;
    result_9986053 = x_9986052;
  framePtr = F.prev;

  return result_9986053;

}
function get_context2d_14362102(c_14362104) {
  var result_14362105 = null;

  var F={procname:"canvas.getContext2d",prev:framePtr,filename:"canvas.nim",line:0};
  framePtr = F;
    F.line = 25;
    result_14362105 = c_14362104.getContext('2d');
  framePtr = F.prev;

  return result_14362105;

}
function add_14441026(self_14441031, self_14441031_Idx, listener_14441033) {
  var F={procname:"add.add",prev:framePtr,filename:"events.nim",line:0};
  framePtr = F;
    F.line = 36;
    if (self_14441031[self_14441031_Idx].toAdd != null) { self_14441031[self_14441031_Idx].toAdd.push(listener_14441033); } else { self_14441031[self_14441031_Idx].toAdd = [listener_14441033]; };
  framePtr = F.prev;

  
}
function is_some_14390595(self_14390599) {
  var result_14390600 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_14390600 = self_14390599.has;
  framePtr = F.prev;

  return result_14390600;

}
function is_none_14390882(self_14390886) {
  var result_14390887 = false;

  var F={procname:"isNone.isNone",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 158;
    result_14390887 = !(self_14390886.has);
  framePtr = F.prev;

  return result_14390887;

}
function get_14390859(self_14390864) {
  var result_14390866 = null;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (is_none_14390882(self_14390864)) {
    F.line = 215;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI9950204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    F.line = 216;
    result_14390866 = self_14390864.val;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_14390866;

}
function render_segment_14363080(ctx_14363082, segment_14363083) {
      var Tmp1;
      var Tmp2;
      var Tmp3;
      var Tmp4;
      var Tmp5;
      var Tmp6;
      var Tmp7;
      var Tmp8;

  var F={procname:"canvas_renderer.renderSegment",prev:framePtr,filename:"canvas_renderer.nim",line:0};
  framePtr = F;
    F.line = 8;
    switch (segment_14363083.kind) {
    case 0:
      F.line = 10;
      var Tmp1 = segment_14363083;
      if (ConstSet10[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'to\' is not accessible using discriminant \'kind\' of type \'PathSegment\'")); }
      var Tmp2 = segment_14363083;
      if (ConstSet11[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("\'to\' is not accessible using discriminant \'kind\' of type \'PathSegment\'")); }
      ctx_14363082.moveTo(Tmp1.to.x, Tmp2.to.y);
      break;
    case 1:
      F.line = 12;
      var Tmp3 = segment_14363083;
      if (ConstSet12[Tmp3.kind]===undefined) { raiseFieldError(makeNimstrLit("\'to\' is not accessible using discriminant \'kind\' of type \'PathSegment\'")); }
      var Tmp4 = segment_14363083;
      if (ConstSet13[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'to\' is not accessible using discriminant \'kind\' of type \'PathSegment\'")); }
      ctx_14363082.lineTo(Tmp3.to.x, Tmp4.to.y);
      break;
    case 2:
      F.line = 14;
      var Tmp5 = segment_14363083;
      if (ConstSet14[Tmp5.kind]===undefined) { raiseFieldError(makeNimstrLit("\'controlPoint\' is not accessible using discriminant \'kind\' of type \'PathSegment\'")); }
      var Tmp6 = segment_14363083;
      if (ConstSet15[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'controlPoint\' is not accessible using discriminant \'kind\' of type \'PathSegment\'")); }
      var Tmp7 = segment_14363083;
      if (ConstSet16[Tmp7.kind]===undefined) { raiseFieldError(makeNimstrLit("\'point\' is not accessible using discriminant \'kind\' of type \'PathSegment\'")); }
      var Tmp8 = segment_14363083;
      if (ConstSet17[Tmp8.kind]===undefined) { raiseFieldError(makeNimstrLit("\'point\' is not accessible using discriminant \'kind\' of type \'PathSegment\'")); }
      ctx_14363082.quadraticCurveTo(Tmp5.controlPoint.x, Tmp6.controlPoint.y, Tmp7.point.x, Tmp8.point.y);
      break;
    case 3:
      F.line = 16;
      ctx_14363082.closePath();
      break;
    }
  framePtr = F.prev;

  
}
function is_some_14365954(self_14365958) {
  var result_14365959 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_14365959 = !((self_14365958.val == null));
  framePtr = F.prev;

  return result_14365959;

}
function is_none_14366102(self_14366106) {
  var result_14366107 = false;

  var F={procname:"isNone.isNone",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 158;
    result_14366107 = (self_14366106.val == null);
  framePtr = F.prev;

  return result_14366107;

}
function get_14366081(self_14366085) {
  var result_14366086 = null;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 171;
    if (is_none_14366102(self_14366085)) {
    F.line = 185;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI9950204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    result_14366086 = self_14366085.val;
  framePtr = F.prev;

  return result_14366086;

}
function is_some_14365431(self_14365435) {
  var result_14365436 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_14365436 = !((self_14365435.val == null));
  framePtr = F.prev;

  return result_14365436;

}
function is_none_14370101(self_14370105) {
  var result_14370106 = false;

  var F={procname:"isNone.isNone",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 158;
    result_14370106 = (self_14370105.val == null);
  framePtr = F.prev;

  return result_14370106;

}
function get_14370080(self_14370084) {
  var result_14370085 = null;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 171;
    if (is_none_14370101(self_14370084)) {
    F.line = 185;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI9950204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    result_14370085 = self_14370084.val;
  framePtr = F.prev;

  return result_14370085;

}
function is_some_10985355(self_10985359) {
  var result_10985360 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_10985360 = self_10985359.has;
  framePtr = F.prev;

  return result_10985360;

}
function is_none_14375104(self_14375108) {
  var result_14375109 = false;

  var F={procname:"isNone.isNone",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 158;
    result_14375109 = !(self_14375108.has);
  framePtr = F.prev;

  return result_14375109;

}
function get_14375081(self_14375086) {
  var result_14375088 = null;
  var result_14375088_Idx = 0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (is_none_14375104(self_14375086)) {
    F.line = 215;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI9950204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    F.line = 216;
    result_14375088 = self_14375086; result_14375088_Idx = "val";
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return [result_14375088, result_14375088_Idx];

}
function map_14390354(self_14390359, callback_14390362) {
    var Tmp1;

  var result_14390364 = ({val: 0.0, has: false});

  var F={procname:"map.map",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 243;
    if (is_some_14365954(self_14390359)) {
    Tmp1 = some_9986089(callback_14390362(self_14390359.val));
    }
    else {
    Tmp1 = none_10330226();
    }
    
    nimCopy(result_14390364, Tmp1, NTI9986076);
  framePtr = F.prev;

  return result_14390364;

}
function fill_and_stroke_14365926(ctx_14365928, color_info_14365933, stroke_info_14365938) {
    var Tmp1;
      var Tmp2;
        function HEX3Aanonymous_14390001(x_14390219) {
          var result_14390223 = 0.0;

          var F={procname:"fillAndStroke.:anonymous",prev:framePtr,filename:"canvas_renderer.nim",line:0};
          framePtr = F;
            F.line = 46;
            result_14390223 = x_14390219.width;
          framePtr = F.prev;

          return result_14390223;

        }
    var Tmp3;

  var F={procname:"canvas_renderer.fillAndStroke",prev:framePtr,filename:"canvas_renderer.nim",line:0};
  framePtr = F;
    if (is_some_14365954(stroke_info_14365938)) {
    F.line = 38;
    ctx_14365928.lineWidth = get_14366081(stroke_info_14365938).width;
    }
    else {
      F.line = 40;
      ctx_14365928.lineWidth = 0.0;
    }
    
    if (is_some_14365431(color_info_14365933)) {
    F.line = 42;
    var ci_14375015 = get_14370080(color_info_14365933);
    if (is_some_10985355(ci_14375015.fill)) {
    F.line = 44;
    ctx_14365928.fillStyle = toJSStr((Tmp1 = get_14375081(ci_14375015.fill), Tmp1)[0][Tmp1[1]]);
    F.line = 45;
    ctx_14365928.fill();
    }
    
      if (!is_some_10985355(ci_14375015.stroke)) Tmp2 = false; else {        Tmp2 = (0.0 < get_10330316(map_14390354(stroke_info_14365938, HEX3Aanonymous_14390001), 0.0));      }    if (Tmp2) {
    F.line = 47;
    ctx_14365928.strokeStyle = toJSStr((Tmp3 = get_14375081(ci_14375015.stroke), Tmp3)[0][Tmp3[1]]);
    F.line = 48;
    ctx_14365928.stroke();
    }
    
    }
    
  framePtr = F.prev;

  
}
function get_10985333(self_10985337, otherwise_10985338) {
    var Tmp1;

  var result_10985339 = null;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 189;
    if (is_some_10985355(self_10985337)) {
    Tmp1 = self_10985337.val;
    }
    else {
    Tmp1 = otherwise_10985338;
    }
    
    result_10985339 = nimCopy(null, Tmp1, NTI112);
  framePtr = F.prev;

  return result_10985339;

}
function some_10572184(val_10572187) {
  var result_10572189 = ({val: null, has: false});

  var F={procname:"some.some",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 121;
    result_10572189.has = true;
    F.line = 122;
    result_10572189.val = nimCopy(null, val_10572187, NTI112);
  framePtr = F.prev;

  return result_10572189;

}
function none_10985243() {
  var result_10985261 = ({val: null, has: false});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  framePtr = F.prev;

  return result_10985261;

}
function map_14365405(self_14365410, callback_14365413) {
    var Tmp1;

  var result_14365415 = ({val: null, has: false});

  var F={procname:"map.map",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 243;
    if (is_some_14365431(self_14365410)) {
    Tmp1 = some_10572184(callback_14365413(self_14365410.val));
    }
    else {
    Tmp1 = none_10985243();
    }
    
    nimCopy(result_14365415, Tmp1, NTI10257086);
  framePtr = F.prev;

  return result_14365415;

}
function render_text_14363105(ctx_14363107, color_info_14363112, text_info_14363113) {
    function HEX3Aanonymous_14365001(x_14365219) {
      var result_14365223 = null;

      var F={procname:"renderText.:anonymous",prev:framePtr,filename:"canvas_renderer.nim",line:0};
      framePtr = F;
        F.line = 19;
        result_14365223 = nimCopy(null, get_10985333(x_14365219.fill, makeNimstrLit("red")), NTI112);
      framePtr = F.prev;

      return result_14365223;

    }

  var F={procname:"canvas_renderer.renderText",prev:framePtr,filename:"canvas_renderer.nim",line:0};
  framePtr = F;
    F.line = 19;
    ctx_14363107.fillStyle = toJSStr(get_10985333(map_14365405(color_info_14363112, HEX3Aanonymous_14365001), makeNimstrLit("brown")));
    F.line = 20;
    ctx_14363107.textAlign = toJSStr(text_info_14363113.alignment);
    F.line = 21;
    ctx_14363107.textBaseline = toJSStr(text_info_14363113.textBaseline);
    F.line = 22;
    ctx_14363107.font = toJSStr((cstrToNimstr((text_info_14363113.fontSize)+"") || []).concat(makeNimstrLit("px ") || [],text_info_14363113.font || []));
    F.line = 23;
    ctx_14363107.fillText(toJSStr(text_info_14363113.text), text_info_14363113.pos.x, text_info_14363113.pos.y);
  framePtr = F.prev;

  
}
function render_circle_14365839(ctx_14365841, center_14365846, radius_14365847) {
  var F={procname:"canvas_renderer.renderCircle",prev:framePtr,filename:"canvas_renderer.nim",line:0};
  framePtr = F;
    F.line = 26;
    ctx_14365841.beginPath();
    F.line = 27;
    ctx_14365841.arc((center_14365846.x + radius_14365847), (center_14365846.y + radius_14365847), radius_14365847, 0.0, 6.2831853071795862e+00, false);
  framePtr = F.prev;

  
}
function render_ellipse_14365907(ctx_14365909, info_14365910) {
  var F={procname:"canvas_renderer.renderEllipse",prev:framePtr,filename:"canvas_renderer.nim",line:0};
  framePtr = F;
    F.line = 30;
    ctx_14365909.beginPath();
    F.line = 32;
    var c_14365911 = info_14365910.center;
    F.line = 33;
    var r_14365912 = info_14365910.radius;
    F.line = 34;
    ctx_14365909.ellipse(c_14365911.x, c_14365911.y, r_14365912.x, r_14365912.y, info_14365910.rotation, info_14365910.startAngle, info_14365910.endAngle, false);
  framePtr = F.prev;

  
}
function get_14405286(self_14405291) {
  var result_14405293 = null;
  var result_14405293_Idx = 0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (is_none_14366102(self_14405291)) {
    F.line = 215;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI9950204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    F.line = 216;
    result_14405293 = self_14405291; result_14405293_Idx = "val";
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return [result_14405293, result_14405293_Idx];

}
function get_14410096(self_14410101) {
  var result_14410103 = null;
  var result_14410103_Idx = 0;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (is_none_14370101(self_14410101)) {
    F.line = 215;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI9950204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    F.line = 216;
    result_14410103 = self_14410101; result_14410103_Idx = "val";
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return [result_14410103, result_14410103_Idx];

}
function left_9954295(self_9954299) {
  var result_9954300 = 0.0;

  var F={procname:"left.left",prev:framePtr,filename:"rect.nim",line:0};
  framePtr = F;
    F.line = 46;
    result_9954300 = x_9954321(self_9954299);
  framePtr = F.prev;

  return result_9954300;

}
function top_9954518(self_9954522) {
  var result_9954523 = 0.0;

  var F={procname:"top.top",prev:framePtr,filename:"rect.nim",line:0};
  framePtr = F;
    F.line = 50;
    result_9954523 = y_9954544(self_9954522);
  framePtr = F.prev;

  return result_9954523;

}
function render_primitive_14390575(ctx_14390577, p_14390578, offset_14390579) {
        var Tmp2;
      var Tmp5;
      var Tmp6;
      var Tmp7;
      var Tmp8;
      var Tmp9;
      var Tmp10;
      var Tmp11;
      var Tmp12;

  var F={procname:"canvas_renderer.renderPrimitive",prev:framePtr,filename:"canvas_renderer.nim",line:0};
  framePtr = F;
    if (is_some_14390595(p_14390578.transform)) {
    F.line = 52;
    var t_14395029 = nimCopy(null, get_14390859(p_14390578.transform), NTI10260025);
    F.line = 53;
    var wp_14395030 = offset_14390579;
    F.line = 54;
    var size_14395031 = p_14390578.bounds.size;
    F.line = 55;
    var x_pos_14395050 = (wp_14395030.x + (size_14395031.x / 2.0000000000000000e+00));
    F.line = 56;
    var y_pos_14395069 = (wp_14395030.y + (size_14395031.y / 2.0000000000000000e+00));
    F.line = 57;
    ctx_14390577.translate(x_pos_14395050, y_pos_14395069);
    F.line = 58;
    ctx_14390577.rotate(t_14395029.rotation);
    F.line = 59;
    ctx_14390577.translate(-(x_pos_14395050), -(y_pos_14395069));
    F.line = 60;
    ctx_14390577.translate(t_14395029.translation.x, t_14395029.translation.y);
    F.line = 61;
    ctx_14390577.scale(t_14395029.scale.x, t_14395029.scale.y);
    }
    
    F.line = 63;
    switch (p_14390578.kind) {
    case 0:
      break;
    case 2:
      F.line = 67;
      ctx_14390577.beginPath();
      L1: do {
        F.line = 68;
        var segment_14405214 = null;
        F.line = 182;
        var colontmp__14655255 = null;
        F.line = 68;
        var Tmp2 = p_14390578;
        if (ConstSet9[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("\'segments\' is not accessible using discriminant \'kind\' of type \'Primitive\'")); }
        colontmp__14655255 = Tmp2.segments;
        F.line = 184;
        var i_14655257 = 0;
        F.line = 185;
        var l_14655258 = (colontmp__14655255 != null ? colontmp__14655255.length : 0);
        L3: do {
          F.line = 186;
            L4: while (true) {
            if (!(i_14655257 < l_14655258)) break L4;
              F.line = 68;
              segment_14405214 = colontmp__14655255[chckIndx(i_14655257, 0, (colontmp__14655255 != null ? colontmp__14655255.length : 0)+0-1)-0];
              F.line = 69;
              render_segment_14363080(ctx_14390577, segment_14405214);
              F.line = 188;
              i_14655257 = addInt(i_14655257, 1);
              if (!(((colontmp__14655255 != null ? colontmp__14655255.length : 0) == l_14655258))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      F.line = 70;
      fill_and_stroke_14365926(ctx_14390577, p_14390578.colorInfo, p_14390578.strokeInfo);
      break;
    case 1:
      F.line = 72;
      var Tmp5 = p_14390578;
      if (ConstSet18[Tmp5.kind]===undefined) { raiseFieldError(makeNimstrLit("\'textInfo\' is not accessible using discriminant \'kind\' of type \'Primitive\'")); }
      render_text_14363105(ctx_14390577, p_14390578.colorInfo, Tmp5.textInfo);
      break;
    case 3:
      F.line = 74;
      var Tmp6 = p_14390578;
      if (ConstSet19[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'circleInfo\' is not accessible using discriminant \'kind\' of type \'Primitive\'")); }
      var info_14405218 = nimCopy(null, Tmp6.circleInfo, NTI10260039);
      F.line = 75;
      render_circle_14365839(ctx_14390577, info_14405218.center, info_14405218.radius);
      F.line = 76;
      fill_and_stroke_14365926(ctx_14390577, p_14390578.colorInfo, p_14390578.strokeInfo);
      break;
    case 4:
      F.line = 78;
      var Tmp7 = p_14390578;
      if (ConstSet20[Tmp7.kind]===undefined) { raiseFieldError(makeNimstrLit("\'ellipseInfo\' is not accessible using discriminant \'kind\' of type \'Primitive\'")); }
      var info_14405220 = nimCopy(null, Tmp7.ellipseInfo, NTI10260041);
      F.line = 79;
      render_ellipse_14365907(ctx_14390577, info_14405220);
      F.line = 80;
      fill_and_stroke_14365926(ctx_14390577, p_14390578.colorInfo, p_14390578.strokeInfo);
      break;
    case 5:
      if (is_some_14365954(p_14390578.strokeInfo)) {
      F.line = 83;
      ctx_14390577.lineWidth = (Tmp8 = get_14405286(p_14390578.strokeInfo), Tmp8)[0][Tmp8[1]].width;
      }
      
      if (is_some_14365431(p_14390578.colorInfo)) {
      F.line = 85;
      var Tmp9 = p_14390578;
      if (ConstSet21[Tmp9.kind]===undefined) { raiseFieldError(makeNimstrLit("\'rectangleInfo\' is not accessible using discriminant \'kind\' of type \'Primitive\'")); }
      var b_14410050 = Tmp9.rectangleInfo.bounds;
      F.line = 86;
      var ci_14415029 = (Tmp10 = get_14410096(p_14390578.colorInfo), Tmp10)[0][Tmp10[1]];
      if (is_some_10985355(ci_14415029.fill)) {
      F.line = 88;
      ctx_14390577.fillStyle = toJSStr((Tmp11 = get_14375081(ci_14415029.fill), Tmp11)[0][Tmp11[1]]);
      F.line = 89;
      ctx_14390577.fillRect(left_9954295(b_14410050), top_9954518(b_14410050), width_9954437(b_14410050), height_9954660(b_14410050));
      }
      
      if (is_some_10985355(ci_14415029.stroke)) {
      F.line = 91;
      ctx_14390577.strokeStyle = toJSStr((Tmp12 = get_14375081(ci_14415029.stroke), Tmp12)[0][Tmp12[1]]);
      F.line = 92;
      ctx_14390577.strokeRect(left_9954295(b_14410050), top_9954518(b_14410050), width_9954437(b_14410050), height_9954660(b_14410050));
      }
      
      }
      
      break;
    }
  framePtr = F.prev;

  
}
function get_14425458(self_14425462) {
  var result_14425463 = null;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 171;
    if (is_none_10480324(self_14425462)) {
    F.line = 185;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI9950204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    result_14425463 = self_14425462.val;
  framePtr = F.prev;

  return result_14425463;

}
function render_14415869(ctx_14415871, primitive_14415872) {
    function render_inner_14415873(primitive_14415875, offset_14415880) {
      var F={procname:"render.renderInner",prev:framePtr,filename:"canvas_renderer.nim",line:0};
      framePtr = F;
        F.line = 97;
        ctx_14415871.save();
        F.line = 98;
        render_primitive_14390575(ctx_14415871, primitive_14415875, offset_14415880);
        L1: do {
          F.line = 99;
          var p_14425214 = null;
          F.line = 184;
          var i_14655251 = 0;
          F.line = 185;
          var l_14655252 = (primitive_14415875.children != null ? primitive_14415875.children.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_14655251 < l_14655252)) break L3;
                F.line = 99;
                p_14425214 = primitive_14415875.children[chckIndx(i_14655251, 0, (primitive_14415875.children != null ? primitive_14415875.children.length : 0)+0-1)-0];
                if (p_14425214.clipToBounds) {
                F.line = 101;
                ctx_14415871.beginPath();
                F.line = 102;
                var cb_14430020 = get_14425458(to_option_11161251(p_14425214.bounds));
                F.line = 103;
                ctx_14415871.rect(cb_14430020.pos.x, cb_14430020.pos.y, cb_14430020.size.x, cb_14430020.size.y);
                F.line = 104;
                ctx_14415871.clip();
                }
                
                F.line = 105;
                render_inner_14415873(p_14425214, add_10335232(offset_14415880, p_14425214.bounds.pos));
                F.line = 188;
                i_14655251 = addInt(i_14655251, 1);
                if (!(((primitive_14415875.children != null ? primitive_14415875.children.length : 0) == l_14655252))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
        F.line = 106;
        ctx_14415871.restore();
      framePtr = F.prev;

      
    }

  var F={procname:"canvas_renderer.render",prev:framePtr,filename:"canvas_renderer.nim",line:0};
  framePtr = F;
    F.line = 108;
    render_inner_14415873(primitive_14415872, vec2_10260375(0.0));
  framePtr = F.prev;

  
}
function render_primitives_14436027(canvas_context_14436029, primitive_14436030, size_14436035) {
  var F={procname:"midio_ui_canvas.renderPrimitives",prev:framePtr,filename:"midio_ui_canvas.nim",line:0};
  framePtr = F;
    F.line = 8;
    canvas_context_14436029.clearRect(0.0, 0.0, size_14436035.x, size_14436035.y);
    F.line = 9;
    render_14415869(canvas_context_14436029, primitive_14436030);
  framePtr = F.prev;

  
}
function start_app_14436051(render_14440005, canvas_element_id_14440006, native_container_id_14440007) {
    function HEX3Aanonymous_14440822(capturer_14440825) {
      var F={procname:"startApp.:anonymous",prev:framePtr,filename:"midio_ui_canvas.nim",line:0};
      framePtr = F;
        F.line = 45;
        native_container_14440009.style.pointerEvents = "none";
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_14441805(capturer_14441808) {
      var F={procname:"startApp.:anonymous",prev:framePtr,filename:"midio_ui_canvas.nim",line:0};
      framePtr = F;
        F.line = 50;
        native_container_14440009.style.pointerEvents = "auto";
      framePtr = F.prev;

      
    }
    function measure_text_14440070(text_14440072, font_size_14440073, font_14440074, baseline_14440075) {
      var result_14440080 = null;

      var F={procname:"startApp.measureText",prev:framePtr,filename:"midio_ui_canvas.nim",line:0};
      framePtr = F;
        F.line = 37;
        canvas_context_14440068.textBaseline = toJSStr(baseline_14440075);
        F.line = 38;
        canvas_context_14440068.font = toJSStr((cstrToNimstr((font_size_14440073)+"") || []).concat(makeNimstrLit("px ") || [],font_14440074 || []));
        F.line = 39;
        var measured_14440167 = canvas_context_14440068.measureText(toJSStr(text_14440072));
        F.line = 40;
        result_14440080 = vec2_9953092(measured_14440167.width, font_size_14440073);
      framePtr = F.prev;

      return result_14440080;

    }
    function HEX3Aanonymous_14442126(event_14442128) {
      var F={procname:"startApp.:anonymous",prev:framePtr,filename:"midio_ui_canvas.nim",line:0};
      framePtr = F;
        F.line = 66;
        var ev_14442129 = event_14442128;
        F.line = 67;
        var canvas_14442143 = document.getElementById("rootCanvas");
        F.line = 68;
        var bounds_14442144 = canvas_14442143.getBoundingClientRect();
        F.line = 69;
        context_14442025.dispatchPointerDown((to_float_9986050(ev_14442129.clientX) - bounds_14442144.left), (to_float_9986050(ev_14442129.clientY) - bounds_14442144.top));
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_14442242(event_14442244) {
      var F={procname:"startApp.:anonymous",prev:framePtr,filename:"midio_ui_canvas.nim",line:0};
      framePtr = F;
        F.line = 72;
        var ev_14442245 = event_14442244;
        F.line = 73;
        var canvas_14442247 = document.getElementById("rootCanvas");
        F.line = 74;
        var bounds_14442248 = canvas_14442247.getBoundingClientRect();
        F.line = 75;
        context_14442025.dispatchPointerUp((to_float_9986050(ev_14442245.clientX) - bounds_14442248.left), (to_float_9986050(ev_14442245.clientY) - bounds_14442248.top));
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_14442331(event_14442333) {
      var F={procname:"startApp.:anonymous",prev:framePtr,filename:"midio_ui_canvas.nim",line:0};
      framePtr = F;
        F.line = 78;
        var ev_14442334 = event_14442333;
        F.line = 79;
        var canvas_14442336 = document.getElementById("rootCanvas");
        F.line = 80;
        var bounds_14442337 = canvas_14442336.getBoundingClientRect();
        F.line = 81;
        context_14442025.dispatchPointerMove((to_float_9986050(ev_14442334.clientX) - bounds_14442337.left), (to_float_9986050(ev_14442334.clientY) - bounds_14442337.top));
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_14442420(event_14442422) {
      var F={procname:"startApp.:anonymous",prev:framePtr,filename:"midio_ui_canvas.nim",line:0};
      framePtr = F;
        F.line = 84;
        var ev_14442423 = event_14442422;
        F.line = 85;
        context_14442025.dispatchKeyDown(ev_14442423.keyCode, cstrToNimstr(ev_14442423.key));
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_14442540(event_14442542) {
      var F={procname:"startApp.:anonymous",prev:framePtr,filename:"midio_ui_canvas.nim",line:0};
      framePtr = F;
        F.line = 88;
        var ev_14442543 = event_14442542;
        F.line = 89;
        size_14440020 = vec2_9953092(window.innerWidth, window.innerHeight);
        F.line = 90;
        canvas_14440012.width = size_14440020.x;
        F.line = 91;
        canvas_14440012.height = size_14440020.y;
        F.line = 92;
        context_14442025.dispatchWindowSizeChanged(size_14440020);
        F.line = 93;
        canvas_context_14440068.scale(scale_14440032, scale_14440032);
        F.line = 94;
        invalidate_layout_10965696(context_14442025.rootElement);
      framePtr = F.prev;

      
    }
function render_to_js_canvas_14442026(dt_14442028) {
  var F={procname:"startApp.renderToJsCanvas",prev:framePtr,filename:"midio_ui_canvas.nim",line:0};
  framePtr = F;
    F.line = 61;
    var primitive_14442042 = render(context_14442025, dt_14442028);
    if (is_some_11660154(primitive_14442042)) {
    F.line = 63;
    render_primitives_14436027(canvas_context_14440068, get_11680059(primitive_14442042), size_14440020);
    }
    
  framePtr = F.prev;

  
}
    function frame_14442582(time_14442584) {
      var F={procname:"startApp.frame",prev:framePtr,filename:"midio_ui_canvas.nim",line:0};
      framePtr = F;
        F.line = 100;
        var dt_14442611 = (time_14442584 - last_time_14442581);
        F.line = 101;
        last_time_14442581 = time_14442584;
        F.line = 103;
        context_14442025.dispatchUpdate(dt_14442611);
        F.line = 104;
        render_to_js_canvas_14442026(dt_14442611);
        F.line = 106;
        window.requestAnimationFrame(frame_14442582);
      framePtr = F.prev;

      
    }

  var F={procname:"midio_ui_canvas.startApp",prev:framePtr,filename:"midio_ui_canvas.nim",line:0};
  framePtr = F;
    F.line = 15;
    var native_container_14440009 = document.getElementById(toJSStr(native_container_id_14440007));
    F.line = 16;
    var canvas_elem_14440011 = document.getElementById(toJSStr(canvas_element_id_14440006));
    F.line = 18;
    var canvas_14440012 = canvas_elem_14440011;
    F.line = 21;
    var size_14440020 = vec2_9953092(window.innerWidth, window.innerHeight);
    F.line = 22;
    var scale_14440032 = (window.devicePixelRatio * 2.0000000000000000e+00);
    F.line = 24;
    canvas_14440012.width = size_14440020.x;
    F.line = 25;
    canvas_14440012.height = size_14440020.y;
    F.line = 27;
    var element_width_14440033 = canvas_elem_14440011.offsetWidth;
    F.line = 28;
    var element_height_14440034 = canvas_elem_14440011.offsetHeight;
    F.line = 29;
    var canvas_pixel_scale_14440067 = vec2_9953092(((size_14440020.x / to_float_9986050(element_width_14440033)) * 2.0000000000000000e+00), ((size_14440020.y / to_float_9986050(element_height_14440034)) * 2.0000000000000000e+00));
    F.line = 32;
    var canvas_context_14440068 = get_context2d_14362102(canvas_14440012);
    F.line = 33;
    canvas_context_14440068.scale(scale_14440032, scale_14440032);
    F.line = 43;
    add_14441026(pointer_captured_emitter_12098848, 0, HEX3Aanonymous_14440822);
    F.line = 48;
    add_14441026(pointer_capture_released_emitter_12098854, 0, HEX3Aanonymous_14441805);
    F.line = 53;
    var context_14442025 = init(size_14440020, vec2_9953092(scale_14440032, scale_14440032), measure_text_14440070, render_14440005);
    F.line = 65;
    window.addEventListener("mousedown", HEX3Aanonymous_14442126, false);
    F.line = 71;
    window.addEventListener("mouseup", HEX3Aanonymous_14442242, false);
    F.line = 77;
    window.addEventListener("mousemove", HEX3Aanonymous_14442331, false);
    F.line = 83;
    window.addEventListener("keydown", HEX3Aanonymous_14442420, false);
    F.line = 87;
    window.addEventListener("resize", HEX3Aanonymous_14442540, false);
    F.line = 96;
    var is_animating_14442580 = true;
    F.line = 98;
    var last_time_14442581 = 0.0;
    F.line = 108;
    frame_14442582(last_time_14442581);
  framePtr = F.prev;

  
}
function delete_12251729(x_12251734, x_12251734_Idx, i_12251735) {
  var F={procname:"delete.delete",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1254;
    x_12251734[x_12251734_Idx].splice(i_12251735, 1);
  framePtr = F.prev;

  
}
function find_12240217(a_12240221, item_12240222) {
  var result_12240223 = 0;

  var F={procname:"find.find",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    L1: do {
      F.line = 1751;
      var i_12250214 = null;
      F.line = 184;
      var i_14655319 = 0;
      F.line = 185;
      var l_14655320 = (a_12240221 != null ? a_12240221.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14655319 < l_14655320)) break L3;
            F.line = 1751;
            i_12250214 = a_12240221[chckIndx(i_14655319, 0, (a_12240221 != null ? a_12240221.length : 0)+0-1)-0];
            if ((i_12250214 == item_12240222)) {
            F.line = 1752;
            break BeforeRet;
            }
            
            F.line = 1753;
            result_12240223 = addInt(result_12240223, 1);
            F.line = 188;
            i_14655319 = addInt(i_14655319, 1);
            if (!(((a_12240221 != null ? a_12240221.length : 0) == l_14655320))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 1754;
    result_12240223 = -1;
  } while (false);
  framePtr = F.prev;

  return result_12240223;

}
function remove_12240160(self_12240165, self_12240165_Idx, item_12240166) {
  var F={procname:"remove.remove",prev:framePtr,filename:"utils.nim",line:0};
  framePtr = F;
    F.line = 18;
    delete_12251729(self_12240165, self_12240165_Idx, chckRange(find_12240217(self_12240165[self_12240165_Idx], item_12240166), 0, 2147483647));
  framePtr = F.prev;

  
}
function behavior_subject_14455511(value_14455514) {
    function HEX3Aanonymous_14455526(subscriber_14455532) {
        function HEX3Aanonymous_14455707() {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"observables.nim",line:0};
          framePtr = F;
            F.line = 73;
            remove_12240160(ret_14455521, "subscribers", subscriber_14455532);
          framePtr = F.prev;

          
        }

      var result_14455533 = null;

      var F={procname:"behaviorSubject.:anonymous",prev:framePtr,filename:"observables.nim",line:0};
      framePtr = F;
        F.line = 69;
        F.line = 69;
        if (ret_14455521.subscribers != null) { ret_14455521.subscribers.push(subscriber_14455532); } else { ret_14455521.subscribers = [subscriber_14455532]; };
        F.line = 70;
        subscriber_14455532.onNext(ret_14455521.value);
        result_14455533 = {dispose: HEX3Aanonymous_14455707};
      framePtr = F.prev;

      return result_14455533;

    }

  var result_14455516 = null;

  var F={procname:"behaviorSubject.behaviorSubject",prev:framePtr,filename:"observables.nim",line:0};
  framePtr = F;
    F.line = 61;
    F.line = 63;
    var ret_14455521 = {value: value_14455514, didComplete: false, source: null, subscribers: null};
    F.line = 67;
    ret_14455521.source = {onSubscribe: HEX3Aanonymous_14455526};
    result_14455516 = ret_14455521;
  framePtr = F.prev;

  return result_14455516;

}
function to_option_10572177(x_10572180) {
  var result_10572182 = ({val: null, has: false});

  var F={procname:"toOption.toOption",prev:framePtr,filename:"utils.nim",line:0};
  framePtr = F;
    F.line = 5;
    nimCopy(result_10572182, some_10572184(x_10572180), NTI10257086);
  framePtr = F.prev;

  return result_10572182;

}
function gen_guid_10256403() {
  var result_10256405 = 0;

  var F={procname:"guid.genGuid",prev:framePtr,filename:"guid.nim",line:0};
  framePtr = F;
    F.line = 19;
    result_10256405 = counter_10256402[0];
    F.line = 20;
    counter_10256402[0] = addInt(counter_10256402[0], 1);
  framePtr = F.prev;

  return result_10256405;

}
function new_element_11030693(props_11030695, children_11030712, layout_11030785, drawable_11030858, on_rooted_11040070, on_unrooted_11050009) {
  var result_11050010 = null;

  var F={procname:"element.newElement",prev:framePtr,filename:"element.nim",line:0};
  framePtr = F;
    F.line = 202;
    result_11050010 = {id: gen_guid_10256403(), props: props_11030695, children: nimCopy(null, children_11030712, NTI11030696), layout: nimCopy(null, layout_11030785, NTI10275125), drawable: nimCopy(null, drawable_11030858, NTI10275143), parent: none_11020346(), onRooted: nimCopy(null, on_rooted_11040070, NTI10280009), onUnrooted: nimCopy(null, on_unrooted_11050009, NTI10280009), desiredSize: ({val: null}), bounds: ({val: null}), previousArrange: ({val: null}), previousMeasure: ({val: null}), isArrangeValid: false, isMeasureValid: false, measuring: false, pointerInsideLastUpdate: false};
    L1: do {
      F.line = 212;
      var child_11050033 = null;
      F.line = 184;
      var i_14655325 = 0;
      F.line = 185;
      var l_14655326 = (children_11030712 != null ? children_11030712.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14655325 < l_14655326)) break L3;
            F.line = 212;
            child_11050033 = children_11030712[chckIndx(i_14655325, 0, (children_11030712 != null ? children_11030712.length : 0)+0-1)-0];
            F.line = 213;
            nimCopy(child_11050033.parent, to_option_11005275(result_11050010), NTI10275035);
            F.line = 188;
            i_14655325 = addInt(i_14655325, 1);
            if (!(((children_11030712 != null ? children_11030712.length : 0) == l_14655326))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_11050010;

}
function none_11030720() {
  var result_11030724 = ({val: null});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 140;
    nimCopy(result_11030724, none_11030726(), NTI11030732);
  framePtr = F.prev;

  return result_11030724;

}
function some_11460019(val_11460022) {
  var result_11460024 = ({val: null});

  var F={procname:"some.some",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    if (!(!((val_11460022 == null)))) {
    F.line = 118;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/options.nim(118, 11) `not val.isNil` "));
    }
    
    F.line = 119;
    result_11460024.val = val_11460022;
  framePtr = F.prev;

  return result_11460024;

}
function is_some_11491356(self_11491360) {
  var result_11491361 = false;

  var F={procname:"isSome.isSome",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_11491361 = self_11491360.has;
  framePtr = F.prev;

  return result_11491361;

}
function get_11491334(self_11491338, otherwise_11491339) {
    var Tmp1;

  var result_11491340 = {Field0: 0.0, Field1: 0.0, Field2: 0.0, Field3: 0.0};

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 189;
    if (is_some_11491356(self_11491338)) {
    Tmp1 = self_11491338.val;
    }
    else {
    Tmp1 = otherwise_11491339;
    }
    
    nimCopy(result_11491340, Tmp1, NTI10260043);
  framePtr = F.prev;

  return result_11491340;

}
function HEX40_10580804(a_10580808) {
  var result_10580810 = null;

  var F={procname:"@.@",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1538;
    result_10580810 = new Array(chckRange((a_10580808 != null ? a_10580808.length : 0), 0, 2147483647)); for (var i=0;i<chckRange((a_10580808 != null ? a_10580808.length : 0), 0, 2147483647);++i) {result_10580810[i]=null;}    L1: do {
      F.line = 1539;
      var i_10580944 = 0;
      F.line = 66;
      var colontmp__14655333 = 0;
      F.line = 1539;
      colontmp__14655333 = subInt((a_10580808 != null ? a_10580808.length : 0), 1);
      F.line = 77;
      var res_14655334 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_14655334 <= colontmp__14655333)) break L3;
            F.line = 1539;
            i_10580944 = res_14655334;
            F.line = 1539;
            result_10580810[chckIndx(i_10580944, 0, (result_10580810 != null ? result_10580810.length : 0)+0-1)-0] = a_10580808[chckIndx(i_10580944, 0, (a_10580808 != null ? a_10580808.length : 0)+0-1)-0];
            F.line = 80;
            res_14655334 = addInt(res_14655334, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_10580810;

}
function create_path_10581016(self_10581018, color_info_10581023, stroke_info_10581028, segments_10581030) {
    var Tmp1;

  var result_10581031 = null;

  var F={procname:"drawing_primitives.createPath",prev:framePtr,filename:"drawing_primitives.nim",line:0};
  framePtr = F;
    F.line = 51;
    result_10581031 = {transform: nimCopy(null, self_10581018.props.transform, NTI10260163), bounds: (Tmp1 = get_10480301(self_10581018.bounds), Tmp1)[0][Tmp1[1]], clipToBounds: get_10476339(self_10581018.props.clipToBounds, false), kind: 2, segments: HEX40_10580804(segments_10581030), colorInfo: nimCopy(null, color_info_10581023, NTI10260125), strokeInfo: nimCopy(null, stroke_info_10581028, NTI10260143), children: [], textInfo: null, circleInfo: ({center: null, radius: 0.0}), ellipseInfo: ({center: null, radius: null, rotation: 0.0, startAngle: 0.0, endAngle: 0.0}), rectangleInfo: ({bounds: null})};
  framePtr = F.prev;

  return result_10581031;

}
function some_10572250(val_10572253) {
  var result_10572255 = ({val: null});

  var F={procname:"some.some",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    if (!(!((val_10572253 == null)))) {
    F.line = 118;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/options.nim(118, 11) `not val.isNil` "));
    }
    
    F.line = 119;
    result_10572255.val = val_10572253;
  framePtr = F.prev;

  return result_10572255;

}
function some_11471166(val_11471169) {
  var result_11471171 = ({val: null});

  var F={procname:"some.some",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    if (!(!((val_11471169 == null)))) {
    F.line = 118;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/options.nim(118, 11) `not val.isNil` "));
    }
    
    F.line = 119;
    result_11471171.val = val_11471169;
  framePtr = F.prev;

  return result_11471171;

}
function move_to_10580511(x_10580513, y_10580514) {
  var result_10580515 = null;

  var F={procname:"drawing_primitives.moveTo",prev:framePtr,filename:"drawing_primitives.nim",line:0};
  framePtr = F;
    F.line = 30;
    result_10580515 = {kind: 0, to: vec2_9953092(x_10580513, y_10580514), controlPoint: null, point: null};
  framePtr = F.prev;

  return result_10580515;

}
function line_to_10580582(x_10580584, y_10580585) {
  var result_10580586 = null;

  var F={procname:"drawing_primitives.lineTo",prev:framePtr,filename:"drawing_primitives.nim",line:0};
  framePtr = F;
    F.line = 32;
    result_10580586 = {kind: 1, to: vec2_9953092(x_10580584, y_10580585), controlPoint: null, point: null};
  framePtr = F.prev;

  return result_10580586;

}
function curve_to_10580606(cpx_10580608, cpy_10580609, x_10580610, y_10580611) {
  var result_10580612 = null;

  var F={procname:"drawing_primitives.curveTo",prev:framePtr,filename:"drawing_primitives.nim",line:0};
  framePtr = F;
    F.line = 34;
    result_10580612 = {kind: 2, controlPoint: vec2_9953092(cpx_10580608, cpy_10580609), point: vec2_9953092(x_10580610, y_10580611), to: null};
  framePtr = F.prev;

  return result_10580612;

}
function close_10580638() {
  var result_10580640 = null;

  var F={procname:"drawing_primitives.close",prev:framePtr,filename:"drawing_primitives.nim",line:0};
  framePtr = F;
    F.line = 36;
    result_10580640 = {kind: 3, to: null, controlPoint: null, point: null};
  framePtr = F.prev;

  return result_10580640;

}
function render_rectangle_11491118(self_11491120, props_11491121) {
    var Tmp1;
    var Tmp2;

  var result_11491126 = ({val: null});

  var F={procname:"rectangle.renderRectangle",prev:framePtr,filename:"rectangle.nim",line:0};
  framePtr = F;
    F.line = 16;
    F.line = 17;
    var world_pos_11491127 = actual_world_position_10305676(self_11491120);
    F.line = 18;
    var x_11491128 = world_pos_11491127.x;
    F.line = 19;
    var y_11491129 = world_pos_11491127.y;
    F.line = 20;
    var width_11491208 = width_9954437((Tmp1 = get_10480301(self_11491120.bounds), Tmp1)[0][Tmp1[1]]);
    F.line = 21;
    var height_11491287 = height_9954660((Tmp2 = get_10480301(self_11491120.bounds), Tmp2)[0][Tmp2[1]]);
    F.line = 22;
    var radius_11491427 = get_11491334(props_11491121.radius, {Field0: 0.0, Field1: 0.0, Field2: 0.0, Field3: 0.0});
    nimCopy(result_11491126, some_11440204(create_path_10581016(self_11491120, some_10572250({fill: nimCopy(null, props_11491121.color, NTI10257086), stroke: nimCopy(null, props_11491121.stroke, NTI10257086)}), some_11471166({width: get_10330316(props_11491121.strokeWidth, 0.0)}), [move_to_10580511((x_11491128 + radius_11491427["Field0"]), y_11491129), line_to_10580582(((x_11491128 + width_11491208) - radius_11491427["Field1"]), y_11491129), curve_to_10580606((x_11491128 + width_11491208), y_11491129, (x_11491128 + width_11491208), (y_11491129 + radius_11491427["Field1"])), line_to_10580582((x_11491128 + width_11491208), ((y_11491129 + height_11491287) - radius_11491427["Field2"])), curve_to_10580606((x_11491128 + width_11491208), (y_11491129 + height_11491287), ((x_11491128 + width_11491208) - radius_11491427["Field2"]), (y_11491129 + height_11491287)), line_to_10580582((x_11491128 + radius_11491427["Field3"]), (y_11491129 + height_11491287)), curve_to_10580606(x_11491128, (y_11491129 + height_11491287), x_11491128, ((y_11491129 + height_11491287) - radius_11491427["Field3"])), line_to_10580582(x_11491128, (y_11491129 + radius_11491427["Field0"])), curve_to_10580606(x_11491128, y_11491129, (x_11491128 + radius_11491427["Field0"]), y_11491129), close_10580638()])), NTI10275009);
  framePtr = F.prev;

  return result_11491126;

}
function none_11040011() {
  var result_11040028 = ({val: null});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  framePtr = F.prev;

  return result_11040028;

}
function none_11040005() {
  var result_11040009 = ({val: null});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 140;
    nimCopy(result_11040009, none_11040011(), NTI11040017);
  framePtr = F.prev;

  return result_11040009;

}
function create_rectangle_11491539(props_11491541, elem_props_11491542, children_11491559) {
    function HEX3Aanonymous_11495001(elem_11495003) {
      var result_11495005 = ({val: null});

      var F={procname:"createRectangle.:anonymous",prev:framePtr,filename:"rectangle.nim",line:0};
      framePtr = F;
        F.line = 46;
        nimCopy(result_11495005, render_rectangle_11491118(elem_11495003, props_11491541), NTI10275009);
      framePtr = F.prev;

      return result_11495005;

    }

  var result_11491560 = null;

  var F={procname:"rectangle.createRectangle",prev:framePtr,filename:"rectangle.nim",line:0};
  framePtr = F;
    F.line = 42;
    result_11491560 = new_element_11030693(elem_props_11491542, [], none_11030720(), some_11460019({name: makeNimstrLit("rectangle"), render: HEX3Aanonymous_11495001}), none_11040005(), none_11040005());
  framePtr = F.prev;

  return result_11491560;

}
function must_rehash_11795601(t_11795604) {
  var result_11795605 = false;

  var F={procname:"mustRehash.mustRehash",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    if (!((t_11795604.counter < (t_11795604.data != null ? t_11795604.data.length : 0)))) {
    F.line = 33;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/hashcommon.nim(33, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 34;
    result_11795605 = ((mulInt((t_11795604.data != null ? t_11795604.data.length : 0), 2) < mulInt(t_11795604.counter, 3)) || (subInt((t_11795604.data != null ? t_11795604.data.length : 0), t_11795604.counter) < 4));
  framePtr = F.prev;

  return result_11795605;

}
function raw_insert_11822058(t_11822064, data_11822067, data_11822067_Idx, key_11822068, val_11822069, hc_11822070, h_11822071) {
  var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"tableimpl.nim",line:0};
  framePtr = F;
    F.line = 22;
    data_11822067[data_11822067_Idx][chckIndx(h_11822071, 0, (data_11822067[data_11822067_Idx] != null ? data_11822067[data_11822067_Idx].length : 0)+0-1)-0].Field1 = key_11822068;
    F.line = 23;
    data_11822067[data_11822067_Idx][chckIndx(h_11822071, 0, (data_11822067[data_11822067_Idx] != null ? data_11822067[data_11822067_Idx].length : 0)+0-1)-0].Field2 = nimCopy(null, val_11822069, NTI11695010);
    F.line = 24;
    data_11822067[data_11822067_Idx][chckIndx(h_11822071, 0, (data_11822067[data_11822067_Idx] != null ? data_11822067[data_11822067_Idx].length : 0)+0-1)-0].Field0 = hc_11822070;
  framePtr = F.prev;

  
}
function enlarge_11820336(t_11820342) {
  var F={procname:"enlarge.enlarge",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 267;
    var n_11820350 = null;
    F.line = 268;
    n_11820350 = new Array(chckRange(mulInt((t_11820342.data != null ? t_11820342.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_11820342.data != null ? t_11820342.data.length : 0), 2), 0, 2147483647);++i) {n_11820350[i]={Field0: 0, Field1: null, Field2: null};}    F.line = 269;
    var Tmp1 = t_11820342.data; t_11820342.data = n_11820350; n_11820350 = Tmp1;    L2: do {
      F.line = 270;
      var i_11820668 = 0;
      F.line = 39;
      var colontmp__14655346 = 0;
      F.line = 270;
      colontmp__14655346 = (n_11820350 != null ? (n_11820350.length-1) : -1);
      F.line = 56;
      var res_14655347 = 0;
      L3: do {
        F.line = 57;
          L4: while (true) {
          if (!(res_14655347 <= colontmp__14655346)) break L4;
            F.line = 270;
            i_11820668 = res_14655347;
            F.line = 271;
            var eh_11820992 = n_11820350[chckIndx(i_11820668, 0, (n_11820350 != null ? n_11820350.length : 0)+0-1)-0].Field0;
            if (is_filled_10157018(eh_11820992)) {
            F.line = 273;
            var j_11821016 = (eh_11820992 & (t_11820342.data != null ? (t_11820342.data.length-1) : -1));
            L5: do {
              F.line = 274;
                L6: while (true) {
                if (!is_filled_10157018(t_11820342.data[chckIndx(j_11821016, 0, (t_11820342.data != null ? t_11820342.data.length : 0)+0-1)-0].Field0)) break L6;
                  F.line = 275;
                  j_11821016 = next_try_10160014(j_11821016, (t_11820342.data != null ? (t_11820342.data.length-1) : -1));
                }
            } while(false);
            F.line = 277;
            raw_insert_11822058(t_11820342, t_11820342, "data", n_11820350[chckIndx(i_11820668, 0, (n_11820350 != null ? n_11820350.length : 0)+0-1)-0].Field1, n_11820350[chckIndx(i_11820668, 0, (n_11820350 != null ? n_11820350.length : 0)+0-1)-0].Field2, eh_11820992, j_11821016);
            }
            
            F.line = 59;
            res_14655347 = addInt(res_14655347, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function raw_get_known_hc_11823068(t_11823072, key_11823073, hc_11823074) {
  var result_11823075 = 0;

  var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((t_11823072.data != null ? t_11823072.data.length : 0) == 0)) {
    F.line = 47;
    result_11823075 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_11825548 = (hc_11823074 & (t_11823072.data != null ? (t_11823072.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_10157018(t_11823072.data[chckIndx(h_11825548, 0, (t_11823072.data != null ? t_11823072.data.length : 0)+0-1)-0].Field0)) break L2;
          if (((t_11823072.data[chckIndx(h_11825548, 0, (t_11823072.data != null ? t_11823072.data.length : 0)+0-1)-0].Field0 == hc_11823074) && (t_11823072.data[chckIndx(h_11825548, 0, (t_11823072.data != null ? t_11823072.data.length : 0)+0-1)-0].Field1 == key_11823073))) {
          F.line = 55;
          result_11823075 = h_11825548;
          break BeforeRet;
          }
          
          F.line = 56;
          h_11825548 = next_try_10160014(h_11825548, (t_11823072.data != null ? (t_11823072.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_11823075 = subInt(-1, h_11825548);
  } while (false);
  framePtr = F.prev;

  return result_11823075;

}
function mget_or_put_11745231(t_11745237, key_11745238, val_11745239) {
  var result_11745241 = null;
  var result_11745241_Idx = 0;

  var F={procname:"mgetOrPut.mgetOrPut",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (((t_11745237.data != null ? t_11745237.data.length : 0) == 0)) {
    if (!(is_power_of_two_8805029(64))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(defaultInitialSize)` "));
    }
    
    F.line = 167;
    t_11745237.counter = 0;
    F.line = 168;
    t_11745237.data = new Array(64); for (var i=0;i<64;++i) {t_11745237.data[i]={Field0: 0, Field1: null, Field2: null};}    }
    
    F.line = 64;
    var hc_11770601 = [0];
    F.line = 65;
    var index_11770610 = raw_get_11715930(t_11745237, key_11745238, hc_11770601, 0);
    if ((index_11770610 < 0)) {
    if (((t_11745237.data != null ? t_11745237.data.length : 0) == 0)) {
    if (!(is_power_of_two_8805029(64))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(defaultInitialSize)` "));
    }
    
    F.line = 167;
    t_11745237.counter = 0;
    F.line = 168;
    t_11745237.data = new Array(64); for (var i=0;i<64;++i) {t_11745237.data[i]={Field0: 0, Field1: null, Field2: null};}    }
    
    if (must_rehash_11795601(t_11745237)) {
    F.line = 49;
    enlarge_11820336(t_11745237);
    F.line = 50;
    index_11770610 = raw_get_known_hc_11823068(t_11745237, key_11745238, hc_11770601[0]);
    }
    
    F.line = 51;
    index_11770610 = subInt(-1, index_11770610);
    F.line = 52;
    raw_insert_11822058(t_11745237, t_11745237, "data", key_11745238, val_11745239, hc_11770601[0], index_11770610);
    F.line = 68;
    t_11745237.counter = addInt(t_11745237.counter, 1);
    }
    
    F.line = 70;
    result_11745241 = t_11745237.data[chckIndx(index_11770610, 0, (t_11745237.data != null ? t_11745237.data.length : 0)+0-1)-0]; result_11745241_Idx = "Field2";
  framePtr = F.prev;

  return [result_11745241, result_11745241_Idx];

}
function get_11827533(self_11827537) {
  var result_11827538 = null;

  var F={procname:"get.get",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 171;
    if (is_none_11015703(self_11827537)) {
    F.line = 185;
    raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), parent: null, m_type: NTI9950204, name: null, trace: null, up: null}, "UnpackError");
    }
    
    result_11827538 = self_11827537.val;
  framePtr = F.prev;

  return result_11827538;

}
function add_11745074(element_11745076, behavior_11745077) {
    var Tmp1;

  var F={procname:"behaviors.add",prev:framePtr,filename:"behaviors.nim",line:0};
  framePtr = F;
    F.line = 28;
    var Tmp2 = nimCopy(null, behavior_11745077, NTI11686068);
    if ((Tmp1 = mget_or_put_11745231(behaviors_list_11715629[0], element_11745076, []), Tmp1)[0][Tmp1[1]] != null) { Tmp1[0][Tmp1[1]].push(Tmp2); } else { Tmp1[0][Tmp1[1]] = [Tmp2]; };
    if (is_some_11015525(behavior_11745077.added)) {
    F.line = 30;
    get_11827533(behavior_11745077.added)(element_11745076);
    }
    
  framePtr = F.prev;

  
}
function some_11490139(val_11490142) {
  var result_11490144 = ({val: 0, has: false});

  var F={procname:"some.some",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 121;
    result_11490144.has = true;
    F.line = 122;
    result_11490144.val = val_11490142;
  framePtr = F.prev;

  return result_11490144;

}
function to_option_11490132(x_11490135) {
  var result_11490137 = ({val: 0, has: false});

  var F={procname:"toOption.toOption",prev:framePtr,filename:"utils.nim",line:0};
  framePtr = F;
    F.line = 5;
    nimCopy(result_11490137, some_11490139(x_11490135), NTI10260292);
  framePtr = F.prev;

  return result_11490137;

}
function some_11380404(val_11380407) {
  var result_11380409 = ({val: null});

  var F={procname:"some.some",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    if (!(!((val_11380407 == null)))) {
    F.line = 118;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/options.nim(118, 11) `not val.isNil` "));
    }
    
    F.line = 119;
    result_11380409.val = val_11380407;
  framePtr = F.prev;

  return result_11380409;

}
function internal_measure_11450242(element_11450244, text_11450245, font_size_11450246, font_11450247, baseline_11450248) {
  var result_11450253 = null;

  var F={procname:"text.internalMeasure",prev:framePtr,filename:"text.nim",line:0};
  framePtr = F;
    F.line = 17;
    result_11450253 = measure_text_11440012[0](text_11450245, font_size_11450246, font_11450247, baseline_11450248);
  framePtr = F.prev;

  return result_11450253;

}
function to_option_10572243(x_10572246) {
  var result_10572248 = ({val: null});

  var F={procname:"toOption.toOption",prev:framePtr,filename:"utils.nim",line:0};
  framePtr = F;
    F.line = 5;
    nimCopy(result_10572248, some_10572250(x_10572246), NTI10260125);
  framePtr = F.prev;

  return result_10572248;

}
function create_text_primitive_10572158(self_10572160, text_10572161, pos_10572168, color_10572169, font_size_10572170, font_10572171, text_baseline_10572172, alignment_10572173) {
    var Tmp1;

  var result_10572174 = null;

  var F={procname:"drawing_primitives.createTextPrimitive",prev:framePtr,filename:"drawing_primitives.nim",line:0};
  framePtr = F;
    F.line = 18;
    F.line = 18;
    var text_info_10572175 = {text: nimCopy(null, text_10572161, NTI112), fontSize: font_size_10572170, textBaseline: nimCopy(null, text_baseline_10572172, NTI112), font: nimCopy(null, font_10572171, NTI112), pos: pos_10572168, alignment: nimCopy(null, alignment_10572173, NTI112)};
    result_10572174 = {transform: nimCopy(null, self_10572160.props.transform, NTI10260163), bounds: (Tmp1 = get_10480301(self_10572160.bounds), Tmp1)[0][Tmp1[1]], clipToBounds: get_10476339(self_10572160.props.clipToBounds, false), kind: 1, textInfo: text_info_10572175, colorInfo: to_option_10572243({fill: to_option_10572177(color_10572169), stroke: ({val: null, has: false})}), children: [], strokeInfo: ({val: null}), segments: null, circleInfo: ({center: null, radius: 0.0}), ellipseInfo: ({center: null, radius: null, rotation: 0.0, startAngle: 0.0, endAngle: 0.0}), rectangleInfo: ({bounds: null})};
  framePtr = F.prev;

  return result_10572174;

}
function render_text_11440041(self_11440043, props_11440044) {
  var result_11440049 = ({val: null});

  var F={procname:"text.renderText",prev:framePtr,filename:"text.nim",line:0};
  framePtr = F;
    F.line = 13;
    F.line = 13;
    var world_pos_11440050 = actual_world_position_10305676(self_11440043);
    nimCopy(result_11440049, some_11440204(create_text_primitive_10572158(self_11440043, props_11440044.text, world_pos_11440050, get_10985333(props_11440044.color, makeNimstrLit("white")), get_10330316(props_11440044.fontSize, 1.2000000000000000e+01), get_10985333(props_11440044.font, makeNimstrLit("system-ui")), makeNimstrLit("top"), makeNimstrLit("left"))), NTI10275009);
  framePtr = F.prev;

  return result_11440049;

}
function create_text_11450267(props_11450269, elem_props_11450270) {
    function HEX3Aanonymous_11455001(self_11455003, av_size_11455008) {
      var result_11455010 = null;

      var F={procname:"createText.:anonymous",prev:framePtr,filename:"text.nim",line:0};
      framePtr = F;
        F.line = 25;
        result_11455010 = internal_measure_11450242(self_11455003, props_11450269.text, get_10330316(props_11450269.fontSize, 1.4000000000000000e+01), get_10985333(props_11450269.font, makeNimstrLit("system-ui")), makeNimstrLit("top"));
      framePtr = F.prev;

      return result_11455010;

    }
    function HEX3Aanonymous_11460001(self_11460003) {
      var result_11460005 = ({val: null});

      var F={procname:"createText.:anonymous",prev:framePtr,filename:"text.nim",line:0};
      framePtr = F;
        F.line = 29;
        nimCopy(result_11460005, render_text_11440041(self_11460003, props_11450269), NTI10275009);
      framePtr = F.prev;

      return result_11460005;

    }

  var result_11450271 = null;

  var F={procname:"text.createText",prev:framePtr,filename:"text.nim",line:0};
  framePtr = F;
    F.line = 20;
    result_11450271 = new_element_11030693(elem_props_11450270, [], some_11380404({name: makeNimstrLit("text(layout)"), measure: HEX3Aanonymous_11455001, arrange: null}), some_11460019({name: makeNimstrLit("text(render)"), render: HEX3Aanonymous_11460001}), none_11040005(), none_11040005());
  framePtr = F.prev;

  return result_11450271;

}
function create_text_13460305(props_13460307, elem_props_13460308, children_13460310) {
  var result_13460311 = null;

  var F={procname:"dsl.createText",prev:framePtr,filename:"dsl.nim",line:0};
  framePtr = F;
    F.line = 354;
    result_13460311 = create_text_11450267(props_13460307, elem_props_13460308);
  framePtr = F.prev;

  return result_13460311;

}
function none_12145873() {
  var result_12145890 = ({val: null});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  framePtr = F.prev;

  return result_12145890;

}
function none_12145867() {
  var result_12145871 = ({val: null});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 140;
    nimCopy(result_12145871, none_12145873(), NTI12145879);
  framePtr = F.prev;

  return result_12145871;

}
function none_12145945() {
  var result_12145962 = ({val: null});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  framePtr = F.prev;

  return result_12145962;

}
function none_12145939() {
  var result_12145943 = ({val: null});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 140;
    nimCopy(result_12145943, none_12145945(), NTI12145951);
  framePtr = F.prev;

  return result_12145943;

}
function to_subscriber_13845466(on_next_13845471) {
  var result_13845473 = null;

  var F={procname:"toSubscriber.toSubscriber",prev:framePtr,filename:"observables.nim",line:0};
  framePtr = F;
    F.line = 36;
    result_13845473 = {onNext: on_next_13845471, onCompleted: none_12145867(), onError: none_12145939()};
  framePtr = F.prev;

  return result_13845473;

}
function subscribe_13845457(self_13845461, on_next_13845464) {
  var result_13845465 = null;

  var F={procname:"subscribe.subscribe",prev:framePtr,filename:"observables.nim",line:0};
  framePtr = F;
    F.line = 45;
    result_13845465 = self_13845461.onSubscribe(to_subscriber_13845466(on_next_13845464));
  framePtr = F.prev;

  return result_13845465;

}
function to_subscriber_13780466(on_next_13780471) {
  var result_13780473 = null;

  var F={procname:"toSubscriber.toSubscriber",prev:framePtr,filename:"observables.nim",line:0};
  framePtr = F;
    F.line = 36;
    result_13780473 = {onNext: on_next_13780471, onCompleted: none_12145867(), onError: none_12145939()};
  framePtr = F.prev;

  return result_13780473;

}
function subscribe_13780457(self_13780461, on_next_13780464) {
  var result_13780465 = null;

  var F={procname:"subscribe.subscribe",prev:framePtr,filename:"observables.nim",line:0};
  framePtr = F;
    F.line = 45;
    result_13780465 = self_13780461.onSubscribe(to_subscriber_13780466(on_next_13780464));
  framePtr = F.prev;

  return result_13780465;

}
function map_14605475(self_14605480, mapper_14605483) {
    function HEX3Aanonymous_14605490(subscriber_14605496) {
        function HEX3Aanonymous_14605523(new_val_14605525) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"observables.nim",line:0};
          framePtr = F;
            F.line = 178;
            subscriber_14605496.onNext(mapper_14605483(new_val_14605525));
          framePtr = F.prev;

          
        }

      var result_14605497 = null;

      var F={procname:"map.:anonymous",prev:framePtr,filename:"observables.nim",line:0};
      framePtr = F;
        F.line = 176;
        result_14605497 = subscribe_13780457(self_14605480, HEX3Aanonymous_14605523);
      framePtr = F.prev;

      return result_14605497;

    }

  var result_14605485 = null;

  var F={procname:"map.map",prev:framePtr,filename:"observables.nim",line:0};
  framePtr = F;
    F.line = 174;
    result_14605485 = {onSubscribe: HEX3Aanonymous_14605490};
  framePtr = F.prev;

  return result_14605485;

}
function to_observable_12280044(subject_12280048) {
  var result_12280050 = null;

  var F={procname:"toObservable.toObservable",prev:framePtr,filename:"observables.nim",line:0};
  framePtr = F;
    F.line = 167;
    result_12280050 = subject_12280048.source;
  framePtr = F.prev;

  return result_12280050;

}
function nsuformatBiggestFloat(f_9670221, format_9670222, precision_9670227, decimal_sep_9670228) {
  var result_9670229 = null;

  var F={procname:"strutils.formatBiggestFloat",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 2310;
    var precision_9670401 = precision_9670227;
    if ((precision_9670401 == -1)) {
    F.line = 2313;
    precision_9670401 = 6;
    }
    
    F.line = 2314;
    var res_9670402 = null;
    F.line = 2315;
    switch (format_9670222) {
    case 0:
      F.line = 2317;
      res_9670402 = f_9670221.toString();
      break;
    case 1:
      F.line = 2319;
      res_9670402 = f_9670221.toFixed(precision_9670401);
      break;
    case 2:
      F.line = 2321;
      res_9670402 = f_9670221.toExponential(precision_9670401);
      break;
    }
    F.line = 2322;
    result_9670229 = nimCopy(null, cstrToNimstr(res_9670402), NTI112);
    if (((1.0000000000000000e+00 / f_9670221) == -Infinity)) {
    F.line = 2325;
    result_9670229 = nimCopy(null, (makeNimstrLit("-") || []).concat(cstrToNimstr(res_9670402) || []), NTI112);
    }
    
    L1: do {
      F.line = 2326;
      var i_9670410 = 0;
      F.line = 104;
      var colontmp__14655367 = 0;
      F.line = 2326;
      colontmp__14655367 = (result_9670229 != null ? result_9670229.length : 0);
      F.line = 106;
      var i_14655368 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_14655368 < colontmp__14655367)) break L3;
            F.line = 2326;
            i_9670410 = i_14655368;
            if ((ConstSet22[result_9670229[chckIndx(i_9670410, 0, (result_9670229 != null ? result_9670229.length : 0)+0-1)-0]] != undefined)) {
            F.line = 2329;
            result_9670229[chckIndx(i_9670410, 0, (result_9670229 != null ? result_9670229.length : 0)+0-1)-0] = decimal_sep_9670228;
            }
            
            F.line = 109;
            i_14655368 = addInt(i_14655368, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_9670229;

}
function insert_335401(x_335404, x_335404_Idx, item_335405, i_335406) {
  var F={procname:"system.insert",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2706;
    var xl_335407 = (x_335404[x_335404_Idx] != null ? x_335404[x_335404_Idx].length : 0);
    F.line = 2707;
    (x_335404[x_335404_Idx] == null ? x_335404[x_335404_Idx] = mnewString(chckRange(addInt(xl_335407, (item_335405 != null ? item_335405.length : 0)), 0, 2147483647)) : x_335404[x_335404_Idx].length = chckRange(addInt(xl_335407, (item_335405 != null ? item_335405.length : 0)), 0, 2147483647));
    F.line = 2708;
    var j_335408 = subInt(xl_335407, 1);
    L1: do {
      F.line = 2709;
        L2: while (true) {
        if (!(i_335406 <= j_335408)) break L2;
          F.line = 2710;
          x_335404[x_335404_Idx][chckIndx(addInt(j_335408, (item_335405 != null ? item_335405.length : 0)), 0, (x_335404[x_335404_Idx] != null ? x_335404[x_335404_Idx].length : 0)+0-1)-0] = x_335404[x_335404_Idx][chckIndx(j_335408, 0, (x_335404[x_335404_Idx] != null ? x_335404[x_335404_Idx].length : 0)+0-1)-0];
          F.line = 2711;
          j_335408 = subInt(j_335408, 1);
        }
    } while(false);
    F.line = 2712;
    j_335408 = 0;
    L3: do {
      F.line = 2713;
        L4: while (true) {
        if (!(j_335408 < (item_335405 != null ? item_335405.length : 0))) break L4;
          F.line = 2714;
          x_335404[x_335404_Idx][chckIndx(addInt(j_335408, i_335406), 0, (x_335404[x_335404_Idx] != null ? x_335404[x_335404_Idx].length : 0)+0-1)-0] = item_335405[chckIndx(j_335408, 0, (item_335405 != null ? item_335405.length : 0)+0-1)-0];
          F.line = 2715;
          j_335408 = addInt(j_335408, 1);
        }
    } while(false);
  framePtr = F.prev;

  
}
function nsuToUpperAsciiChar(c_8900016) {
  var result_8900017 = 0;

  var F={procname:"strutils.toUpperAscii",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    if ((ConstSet24[c_8900016] != undefined)) {
    F.line = 248;
    result_8900017 = chckRange(subInt(c_8900016, 32), 0, 255);
    }
    else {
      F.line = 250;
      result_8900017 = c_8900016;
    }
    
  framePtr = F.prev;

  return result_8900017;

}
function nsuToUpperAsciiStr(s_8905037) {
  var result_8905038 = null;

  var F={procname:"strutils.toUpperAscii",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 214;
    result_8905038 = nimCopy(null, mnewString(chckRange((s_8905037 != null ? s_8905037.length : 0), 0, 2147483647)), NTI112);
    L1: do {
      F.line = 215;
      var iHEX60gensym8905039_8910009 = 0;
      F.line = 66;
      var colontmp__14655373 = 0;
      F.line = 215;
      colontmp__14655373 = subInt((s_8905037 != null ? s_8905037.length : 0), 1);
      F.line = 77;
      var res_14655374 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_14655374 <= colontmp__14655373)) break L3;
            F.line = 264;
            iHEX60gensym8905039_8910009 = res_14655374;
            F.line = 216;
            result_8905038[chckIndx(iHEX60gensym8905039_8910009, 0, (result_8905038 != null ? result_8905038.length : 0)+0-1)-0] = nsuToUpperAsciiChar(s_8905037[chckIndx(iHEX60gensym8905039_8910009, 0, (s_8905037 != null ? s_8905037.length : 0)+0-1)-0]);
            F.line = 80;
            res_14655374 = addInt(res_14655374, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_8905038;

}
function format_value_11120011(result_11120014, result_11120014_Idx, value_11120015, specifier_11120016) {
    var Tmp1;

  var F={procname:"formatValue.formatValue",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((specifier_11120016 != null ? specifier_11120016.length : 0) == 0)) {
    F.line = 446;
    if (result_11120014[result_11120014_Idx] != null) { result_11120014[result_11120014_Idx] = (result_11120014[result_11120014_Idx]).concat(cstrToNimstr((value_11120015)+"")); } else { result_11120014[result_11120014_Idx] = cstrToNimstr((value_11120015)+"").slice(); };
    F.line = 447;
    break BeforeRet;
    }
    
    F.line = 448;
    var spec_11120921 = parse_standard_format_specifier_9840322(specifier_11120016, 0, false);
    F.line = 450;
    var fmode_11120922 = 0;
    F.line = 451;
    switch (spec_11120921.typ) {
    case 101:
    case 69:
      F.line = 453;
      fmode_11120922 = 2;
      break;
    case 102:
    case 70:
      F.line = 455;
      fmode_11120922 = 1;
      break;
    case 103:
    case 71:
      F.line = 457;
      fmode_11120922 = 0;
      break;
    case 0:
      break;
    default: 
      F.line = 460;
      raiseException({message: (makeNimstrLit("invalid type in format string for number, expected one  of \'e\', \'E\', \'f\', \'F\', \'g\', \'G\' but got: ") || []).concat([spec_11120921.typ]), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
      break;
    }
    F.line = 464;
    var f_11125002 = [nsuformatBiggestFloat(value_11120015, fmode_11120922, chckRange(spec_11120921.precision, -1, 32), 46)];
    F.line = 465;
    var sign_11125003 = false;
    if ((0.0 <= value_11120015)) {
    if (!((spec_11120921.sign == 45))) {
    F.line = 468;
    sign_11125003 = true;
    if ((value_11120015 == 0.0)) {
    if (((1.0000000000000000e+00 / value_11120015) == Infinity)) {
    F.line = 472;
    insert_335401(f_11125002, 0, nimCharToStr(spec_11120921.sign), 0);
    }
    
    }
    else {
      F.line = 474;
    insert_335401(f_11125002, 0, nimCharToStr(spec_11120921.sign), 0);
    }
    
    }
    
    }
    else {
      F.line = 476;
      sign_11125003 = true;
    }
    
    if (spec_11120921.padWithZero) {
    F.line = 479;
    var sign_str_11126132 = [];
    if (sign_11125003) {
    F.line = 481;
    sign_str_11126132 = nimCopy(null, nimCharToStr(f_11125002[0][chckIndx(0, 0, (f_11125002[0] != null ? f_11125002[0].length : 0)+0-1)-0]), NTI112);
    F.line = 482;
    f_11125002[0] = nimCopy(null, HEX5BHEX5D_4530068(f_11125002[0], HEX2EHEX2E_4530001(1, 1)), NTI112);
    }
    
    F.line = 484;
    var to_fill_11135545 = subInt(subInt(spec_11120921.minimumWidth, (f_11125002[0] != null ? f_11125002[0].length : 0)), (sign_11125003 ? 1:0));
    if ((0 < to_fill_11135545)) {
    F.line = 486;
    f_11125002[0] = nimCopy(null, (nsuRepeatChar(48, chckRange(to_fill_11135545, 0, 2147483647)) || []).concat(f_11125002[0] || []), NTI112);
    }
    
    if (sign_11125003) {
    F.line = 488;
    f_11125002[0] = nimCopy(null, (sign_str_11126132 || []).concat(f_11125002[0] || []), NTI112);
    }
    
    }
    
    F.line = 491;
    if ((spec_11120921.align == 0)) {
    Tmp1 = 62;
    }
    else {
    Tmp1 = spec_11120921.align;
    }
    
    var align_11135829 = Tmp1;
    F.line = 492;
    var res_11135830 = align_string_9840222(f_11125002[0], spec_11120921.minimumWidth, align_11135829, spec_11120921.fill);
    if ((ConstSet23[spec_11120921.typ] != undefined)) {
    F.line = 494;
    if (result_11120014[result_11120014_Idx] != null) { result_11120014[result_11120014_Idx] = (result_11120014[result_11120014_Idx]).concat(nsuToUpperAsciiStr(res_11135830)); } else { result_11120014[result_11120014_Idx] = nsuToUpperAsciiStr(res_11135830).slice(); };
    }
    else {
      F.line = 496;
    if (result_11120014[result_11120014_Idx] != null) { result_11120014[result_11120014_Idx] = (result_11120014[result_11120014_Idx]).concat(res_11135830); } else { result_11120014[result_11120014_Idx] = res_11135830.slice(); };
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function notify_subscribers_12265052(self_12265056) {
  var F={procname:"notifySubscribers.notifySubscribers",prev:framePtr,filename:"observables.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 57;
      var subscriber_12265063 = null;
      F.line = 184;
      var i_14655381 = 0;
      F.line = 185;
      var l_14655382 = (self_12265056.subscribers != null ? self_12265056.subscribers.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14655381 < l_14655382)) break L3;
            F.line = 57;
            subscriber_12265063 = self_12265056.subscribers[chckIndx(i_14655381, 0, (self_12265056.subscribers != null ? self_12265056.subscribers.length : 0)+0-1)-0];
            F.line = 58;
            subscriber_12265063.onNext(self_12265056.value);
            F.line = 188;
            i_14655381 = addInt(i_14655381, 1);
            if (!(((self_12265056.subscribers != null ? self_12265056.subscribers.length : 0) == l_14655382))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function next_12260114(self_12260118, new_val_12260119) {
  var F={procname:"next.next",prev:framePtr,filename:"observables.nim",line:0};
  framePtr = F;
    if ((self_12260118.didComplete == true)) {
    F.line = 157;
    raiseException({message: makeNimstrLit("Tried to push a new value to a completed subject"), parent: null, m_type: NTI6217, name: null, trace: null, up: null}, "Exception");
    }
    
    F.line = 158;
    self_12260118.value = new_val_12260119;
    F.line = 159;
    notify_subscribers_12265052(self_12260118);
  framePtr = F.prev;

  
}
function delete_13517134(x_13517139, x_13517139_Idx, i_13517140) {
  var F={procname:"delete.delete",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1254;
    x_13517139[x_13517139_Idx].splice(i_13517140, 1);
  framePtr = F.prev;

  
}
function find_13505712(a_13505716, item_13505717) {
  var result_13505718 = 0;

  var F={procname:"find.find",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    L1: do {
      F.line = 1751;
      var i_13515214 = null;
      F.line = 184;
      var i_14655426 = 0;
      F.line = 185;
      var l_14655427 = (a_13505716 != null ? a_13505716.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14655426 < l_14655427)) break L3;
            F.line = 1751;
            i_13515214 = a_13505716[chckIndx(i_14655426, 0, (a_13505716 != null ? a_13505716.length : 0)+0-1)-0];
            if ((i_13515214 == item_13505717)) {
            F.line = 1752;
            break BeforeRet;
            }
            
            F.line = 1753;
            result_13505718 = addInt(result_13505718, 1);
            F.line = 188;
            i_14655426 = addInt(i_14655426, 1);
            if (!(((a_13505716 != null ? a_13505716.length : 0) == l_14655427))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 1754;
    result_13505718 = -1;
  } while (false);
  framePtr = F.prev;

  return result_13505718;

}
function remove_13505650(self_13505655, self_13505655_Idx, item_13505656) {
  var F={procname:"remove.remove",prev:framePtr,filename:"utils.nim",line:0};
  framePtr = F;
    F.line = 18;
    delete_13517134(self_13505655, self_13505655_Idx, chckRange(find_13505712(self_13505655[self_13505655_Idx], item_13505656), 0, 2147483647));
  framePtr = F.prev;

  
}
function behavior_subject_13505375(value_13505378) {
    function HEX3Aanonymous_13505403(subscriber_13505409) {
        function HEX3Aanonymous_13505584() {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"observables.nim",line:0};
          framePtr = F;
            F.line = 73;
            remove_13505650(ret_13505398, "subscribers", subscriber_13505409);
          framePtr = F.prev;

          
        }

      var result_13505410 = null;

      var F={procname:"behaviorSubject.:anonymous",prev:framePtr,filename:"observables.nim",line:0};
      framePtr = F;
        F.line = 69;
        F.line = 69;
        if (ret_13505398.subscribers != null) { ret_13505398.subscribers.push(subscriber_13505409); } else { ret_13505398.subscribers = [subscriber_13505409]; };
        F.line = 70;
        subscriber_13505409.onNext(ret_13505398.value);
        result_13505410 = {dispose: HEX3Aanonymous_13505584};
      framePtr = F.prev;

      return result_13505410;

    }

  var result_13505393 = null;

  var F={procname:"behaviorSubject.behaviorSubject",prev:framePtr,filename:"observables.nim",line:0};
  framePtr = F;
    F.line = 61;
    F.line = 63;
    var ret_13505398 = {value: value_13505378, didComplete: false, source: null, subscribers: null};
    F.line = 67;
    ret_13505398.source = {onSubscribe: HEX3Aanonymous_13505403};
    result_13505393 = ret_13505398;
  framePtr = F.prev;

  return result_13505393;

}
function map_14456373(self_14456378, mapper_14456381) {
    function HEX3Aanonymous_14456388(subscriber_14456394) {
        function HEX3Aanonymous_14456421(new_val_14456423) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"observables.nim",line:0};
          framePtr = F;
            F.line = 178;
            subscriber_14456394.onNext(mapper_14456381(new_val_14456423));
          framePtr = F.prev;

          
        }

      var result_14456395 = null;

      var F={procname:"map.:anonymous",prev:framePtr,filename:"observables.nim",line:0};
      framePtr = F;
        F.line = 176;
        result_14456395 = subscribe_13780457(self_14456378, HEX3Aanonymous_14456421);
      framePtr = F.prev;

      return result_14456395;

    }

  var result_14456383 = null;

  var F={procname:"map.map",prev:framePtr,filename:"observables.nim",line:0};
  framePtr = F;
    F.line = 174;
    result_14456383 = {onSubscribe: HEX3Aanonymous_14456388};
  framePtr = F.prev;

  return result_14456383;

}
function lerp_9954469(a_9954472, b_9954473, t_9954474) {
  var result_9954475 = 0.0;

  var F={procname:"lerp.lerp",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 21;
    result_9954475 = ((a_9954472 * (1.0000000000000000e+00 - t_9954474)) + (b_9954473 * t_9954474));
  framePtr = F.prev;

  return result_9954475;

}
function subscribe_14457367(self_14457371, on_next_14457374) {
  var result_14457375 = null;

  var F={procname:"subscribe.subscribe",prev:framePtr,filename:"observables.nim",line:0};
  framePtr = F;
    F.line = 54;
    result_14457375 = subscribe_13780457(self_14457371.source, on_next_14457374);
  framePtr = F.prev;

  return result_14457375;

}
function to_option_11470283(x_11470286) {
  var result_11470288 = ({val: 0.0, has: false});

  var F={procname:"toOption.toOption",prev:framePtr,filename:"utils.nim",line:0};
  framePtr = F;
    F.line = 5;
    nimCopy(result_11470288, some_9986089(x_11470286), NTI9986076);
  framePtr = F.prev;

  return result_11470288;

}
function some_11050661(val_11050664) {
  var result_11050666 = ({val: {Field0: 0.0, Field1: 0.0, Field2: 0.0, Field3: 0.0}, has: false});

  var F={procname:"some.some",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 121;
    result_11050666.has = true;
    F.line = 122;
    nimCopy(result_11050666.val, val_11050664, NTI9952046);
  framePtr = F.prev;

  return result_11050666;

}
function to_option_11050654(x_11050657) {
  var result_11050659 = ({val: {Field0: 0.0, Field1: 0.0, Field2: 0.0, Field3: 0.0}, has: false});

  var F={procname:"toOption.toOption",prev:framePtr,filename:"utils.nim",line:0};
  framePtr = F;
    F.line = 5;
    nimCopy(result_11050659, some_11050661(x_11050657), NTI10260273);
  framePtr = F.prev;

  return result_11050659;

}
function some_13590016(val_13590019) {
  var result_13590021 = ({val: 0, has: false});

  var F={procname:"some.some",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 121;
    result_13590021.has = true;
    F.line = 122;
    result_13590021.val = val_13590019;
  framePtr = F.prev;

  return result_13590021;

}
function to_option_13590009(x_13590012) {
  var result_13590014 = ({val: 0, has: false});

  var F={procname:"toOption.toOption",prev:framePtr,filename:"utils.nim",line:0};
  framePtr = F;
    F.line = 5;
    nimCopy(result_13590014, some_13590016(x_13590012), NTI10260311);
  framePtr = F.prev;

  return result_13590014;

}
function some_12160057(val_12160060) {
  var result_12160062 = ({val: null});

  var F={procname:"some.some",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    if (!(!((val_12160060 == null)))) {
    F.line = 118;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/options.nim(118, 11) `not val.isNil` "));
    }
    
    F.line = 119;
    result_12160062.val = val_12160060;
  framePtr = F.prev;

  return result_12160062;

}
function must_rehash_11930801(t_11930804) {
  var result_11930805 = false;

  var F={procname:"mustRehash.mustRehash",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    if (!((t_11930804.counter < (t_11930804.data != null ? t_11930804.data.length : 0)))) {
    F.line = 33;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/hashcommon.nim(33, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 34;
    result_11930805 = ((mulInt((t_11930804.data != null ? t_11930804.data.length : 0), 2) < mulInt(t_11930804.counter, 3)) || (subInt((t_11930804.data != null ? t_11930804.data.length : 0), t_11930804.counter) < 4));
  framePtr = F.prev;

  return result_11930805;

}
function raw_insert_11962158(t_11962164, data_11962167, data_11962167_Idx, key_11962168, val_11962169, hc_11962170, h_11962171) {
  var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"tableimpl.nim",line:0};
  framePtr = F;
    F.line = 22;
    data_11962167[data_11962167_Idx][chckIndx(h_11962171, 0, (data_11962167[data_11962167_Idx] != null ? data_11962167[data_11962167_Idx].length : 0)+0-1)-0].Field1 = key_11962168;
    F.line = 23;
    data_11962167[data_11962167_Idx][chckIndx(h_11962171, 0, (data_11962167[data_11962167_Idx] != null ? data_11962167[data_11962167_Idx].length : 0)+0-1)-0].Field2 = val_11962169;
    F.line = 24;
    data_11962167[data_11962167_Idx][chckIndx(h_11962171, 0, (data_11962167[data_11962167_Idx] != null ? data_11962167[data_11962167_Idx].length : 0)+0-1)-0].Field0 = hc_11962170;
  framePtr = F.prev;

  
}
function enlarge_11956004(t_11956010) {
  var F={procname:"enlarge.enlarge",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 267;
    var n_11956018 = null;
    F.line = 268;
    n_11956018 = new Array(chckRange(mulInt((t_11956010.data != null ? t_11956010.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_11956010.data != null ? t_11956010.data.length : 0), 2), 0, 2147483647);++i) {n_11956018[i]={Field0: 0, Field1: null, Field2: null};}    F.line = 269;
    var Tmp1 = t_11956010.data; t_11956010.data = n_11956018; n_11956018 = Tmp1;    L2: do {
      F.line = 270;
      var i_11957386 = 0;
      F.line = 39;
      var colontmp__14655433 = 0;
      F.line = 270;
      colontmp__14655433 = (n_11956018 != null ? (n_11956018.length-1) : -1);
      F.line = 56;
      var res_14655434 = 0;
      L3: do {
        F.line = 57;
          L4: while (true) {
          if (!(res_14655434 <= colontmp__14655433)) break L4;
            F.line = 270;
            i_11957386 = res_14655434;
            F.line = 271;
            var eh_11958360 = n_11956018[chckIndx(i_11957386, 0, (n_11956018 != null ? n_11956018.length : 0)+0-1)-0].Field0;
            if (is_filled_10157018(eh_11958360)) {
            F.line = 273;
            var j_11958734 = (eh_11958360 & (t_11956010.data != null ? (t_11956010.data.length-1) : -1));
            L5: do {
              F.line = 274;
                L6: while (true) {
                if (!is_filled_10157018(t_11956010.data[chckIndx(j_11958734, 0, (t_11956010.data != null ? t_11956010.data.length : 0)+0-1)-0].Field0)) break L6;
                  F.line = 275;
                  j_11958734 = next_try_10160014(j_11958734, (t_11956010.data != null ? (t_11956010.data.length-1) : -1));
                }
            } while(false);
            F.line = 277;
            raw_insert_11962158(t_11956010, t_11956010, "data", n_11956018[chckIndx(i_11957386, 0, (n_11956018 != null ? n_11956018.length : 0)+0-1)-0].Field1, n_11956018[chckIndx(i_11957386, 0, (n_11956018 != null ? n_11956018.length : 0)+0-1)-0].Field2, eh_11958360, j_11958734);
            }
            
            F.line = 59;
            res_14655434 = addInt(res_14655434, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function raw_get_known_hc_11965118(t_11965122, key_11965123, hc_11965124) {
  var result_11965125 = 0;

  var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((t_11965122.data != null ? t_11965122.data.length : 0) == 0)) {
    F.line = 47;
    result_11965125 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_11971585 = (hc_11965124 & (t_11965122.data != null ? (t_11965122.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_10157018(t_11965122.data[chckIndx(h_11971585, 0, (t_11965122.data != null ? t_11965122.data.length : 0)+0-1)-0].Field0)) break L2;
          if (((t_11965122.data[chckIndx(h_11971585, 0, (t_11965122.data != null ? t_11965122.data.length : 0)+0-1)-0].Field0 == hc_11965124) && (t_11965122.data[chckIndx(h_11971585, 0, (t_11965122.data != null ? t_11965122.data.length : 0)+0-1)-0].Field1 == key_11965123))) {
          F.line = 55;
          result_11965125 = h_11971585;
          break BeforeRet;
          }
          
          F.line = 56;
          h_11971585 = next_try_10160014(h_11971585, (t_11965122.data != null ? (t_11965122.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_11965125 = subInt(-1, h_11971585);
  } while (false);
  framePtr = F.prev;

  return result_11965125;

}
function mget_or_put_11865391(t_11865397, key_11865398, val_11865399) {
  var result_11865401 = null;
  var result_11865401_Idx = 0;

  var F={procname:"mgetOrPut.mgetOrPut",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (((t_11865397.data != null ? t_11865397.data.length : 0) == 0)) {
    if (!(is_power_of_two_8805029(64))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(defaultInitialSize)` "));
    }
    
    F.line = 167;
    t_11865397.counter = 0;
    F.line = 168;
    t_11865397.data = new Array(64); for (var i=0;i<64;++i) {t_11865397.data[i]={Field0: 0, Field1: null, Field2: null};}    }
    
    F.line = 64;
    var hc_11890801 = [0];
    F.line = 65;
    var index_11905393 = raw_get_11890802(t_11865397, key_11865398, hc_11890801, 0);
    if ((index_11905393 < 0)) {
    if (((t_11865397.data != null ? t_11865397.data.length : 0) == 0)) {
    if (!(is_power_of_two_8805029(64))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(defaultInitialSize)` "));
    }
    
    F.line = 167;
    t_11865397.counter = 0;
    F.line = 168;
    t_11865397.data = new Array(64); for (var i=0;i<64;++i) {t_11865397.data[i]={Field0: 0, Field1: null, Field2: null};}    }
    
    if (must_rehash_11930801(t_11865397)) {
    F.line = 49;
    enlarge_11956004(t_11865397);
    F.line = 50;
    index_11905393 = raw_get_known_hc_11965118(t_11865397, key_11865398, hc_11890801[0]);
    }
    
    F.line = 51;
    index_11905393 = subInt(-1, index_11905393);
    F.line = 52;
    raw_insert_11962158(t_11865397, t_11865397, "data", key_11865398, val_11865399, hc_11890801[0], index_11905393);
    F.line = 68;
    t_11865397.counter = addInt(t_11865397.counter, 1);
    }
    
    F.line = 70;
    result_11865401 = t_11865397.data[chckIndx(index_11905393, 0, (t_11865397.data != null ? t_11865397.data.length : 0)+0-1)-0]; result_11865401_Idx = "Field2";
  framePtr = F.prev;

  return [result_11865401, result_11865401_Idx];

}
function emitter_11865131() {
  var result_11865135 = null;

  var F={procname:"emitter.emitter",prev:framePtr,filename:"events.nim",line:0};
  framePtr = F;
    F.line = 12;
    result_11865135 = {listeners: [], toAdd: [], toRemove: []};
  framePtr = F.prev;

  return result_11865135;

}
function add_11977358(self_11977363, self_11977363_Idx, listener_11977365) {
  var F={procname:"add.add",prev:framePtr,filename:"events.nim",line:0};
  framePtr = F;
    F.line = 36;
    if (self_11977363[self_11977363_Idx].toAdd != null) { self_11977363[self_11977363_Idx].toAdd.push(listener_11977365); } else { self_11977363[self_11977363_Idx].toAdd = [listener_11977365]; };
  framePtr = F.prev;

  
}
function onpointer_entered_11860830(selfHEX60gensym11835003_11860832, handlerHEX60gensym11835004_11865005) {
    var Tmp1;

  var F={procname:"element_events.onpointerEntered",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
    F.line = 13;
    var eHEX60gensym11835005_11976467 = [(Tmp1 = mget_or_put_11865391(event_tableHEX60gensym11835002_11860829[0], selfHEX60gensym11835003_11860832, emitter_11865131()), Tmp1)[0][Tmp1[1]]];
    F.line = 14;
    add_11977358(eHEX60gensym11835005_11976467, 0, handlerHEX60gensym11835004_11865005);
  framePtr = F.prev;

  
}
function onpointer_exited_12030014(selfHEX60gensym12025003_12030016, handlerHEX60gensym12025004_12035005) {
    var Tmp1;

  var F={procname:"element_events.onpointerExited",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
    F.line = 13;
    var eHEX60gensym12025005_12035311 = [(Tmp1 = mget_or_put_11865391(event_tableHEX60gensym12025002_12030013[0], selfHEX60gensym12025003_12030016, emitter_11865131()), Tmp1)[0][Tmp1[1]]];
    F.line = 14;
    add_11977358(eHEX60gensym12025005_12035311, 0, handlerHEX60gensym12025004_12035005);
  framePtr = F.prev;

  
}
function on_hover_12171080(entered_12175005, exited_12180005) {
    function HEX3Aanonymous_12180007(element_12180009) {
        function HEX3Aanonymous_12180010(arg_12180012) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"onHover.nim",line:0};
          framePtr = F;
            F.line = 14;
            entered_12175005(element_12180009);
          framePtr = F.prev;

          
        }
        function HEX3Aanonymous_12180026(arg_12180028) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"onHover.nim",line:0};
          framePtr = F;
            F.line = 18;
            exited_12180005(element_12180009);
          framePtr = F.prev;

          
        }

      var F={procname:"onHover.:anonymous",prev:framePtr,filename:"onHover.nim",line:0};
      framePtr = F;
        F.line = 12;
        onpointer_entered_11860830(element_12180009, HEX3Aanonymous_12180010);
        F.line = 16;
        onpointer_exited_12030014(element_12180009, HEX3Aanonymous_12180026);
      framePtr = F.prev;

      
    }

  var result_12180006 = ({update: ({val: null}), added: ({val: null})});

  var F={procname:"onHover.onHover",prev:framePtr,filename:"onHover.nim",line:0};
  framePtr = F;
    F.line = 9;
    nimCopy(result_12180006, {added: some_12160057(HEX3Aanonymous_12180007), update: ({val: null})}, NTI11686068);
  framePtr = F.prev;

  return result_12180006;

}
function notify_subscribers_13620052(self_13620056) {
  var F={procname:"notifySubscribers.notifySubscribers",prev:framePtr,filename:"observables.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 57;
      var subscriber_13620071 = null;
      F.line = 184;
      var i_14655443 = 0;
      F.line = 185;
      var l_14655444 = (self_13620056.subscribers != null ? self_13620056.subscribers.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14655443 < l_14655444)) break L3;
            F.line = 57;
            subscriber_13620071 = self_13620056.subscribers[chckIndx(i_14655443, 0, (self_13620056.subscribers != null ? self_13620056.subscribers.length : 0)+0-1)-0];
            F.line = 58;
            subscriber_13620071.onNext(self_13620056.value);
            F.line = 188;
            i_14655443 = addInt(i_14655443, 1);
            if (!(((self_13620056.subscribers != null ? self_13620056.subscribers.length : 0) == l_14655444))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function next_13615118(self_13615122, new_val_13615123) {
  var F={procname:"next.next",prev:framePtr,filename:"observables.nim",line:0};
  framePtr = F;
    if ((self_13615122.didComplete == true)) {
    F.line = 157;
    raiseException({message: makeNimstrLit("Tried to push a new value to a completed subject"), parent: null, m_type: NTI6217, name: null, trace: null, up: null}, "Exception");
    }
    
    F.line = 158;
    self_13615122.value = new_val_13615123;
    F.line = 159;
    notify_subscribers_13620052(self_13615122);
  framePtr = F.prev;

  
}
function on_hover_14443014(self_14443020) {
    function HEX3Aanonymous_14443022(e_14443024) {
      var F={procname:"onHover.:anonymous",prev:framePtr,filename:"midio_slider.nim",line:0};
      framePtr = F;
        F.line = 9;
        next_13615118(self_14443020, true);
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_14443146(e_14443148) {
      var F={procname:"onHover.:anonymous",prev:framePtr,filename:"midio_slider.nim",line:0};
      framePtr = F;
        F.line = 11;
        next_13615118(self_14443020, false);
      framePtr = F.prev;

      
    }

  var result_14443021 = ({update: ({val: null}), added: ({val: null})});

  var F={procname:"midio_slider.onHover",prev:framePtr,filename:"midio_slider.nim",line:0};
  framePtr = F;
    F.line = 7;
    nimCopy(result_14443021, on_hover_12171080(HEX3Aanonymous_14443022, HEX3Aanonymous_14443146), NTI11686068);
  framePtr = F.prev;

  return result_14443021;

}
function onpointer_moved_12045014(selfHEX60gensym12040003_12045016, handlerHEX60gensym12040004_12050005) {
    var Tmp1;

  var F={procname:"element_events.onpointerMoved",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
    F.line = 13;
    var eHEX60gensym12040005_12050311 = [(Tmp1 = mget_or_put_11865391(event_tableHEX60gensym12040002_12045013[0], selfHEX60gensym12040003_12045016, emitter_11865131()), Tmp1)[0][Tmp1[1]]];
    F.line = 14;
    add_11977358(eHEX60gensym12040005_12050311, 0, handlerHEX60gensym12040004_12050005);
  framePtr = F.prev;

  
}
function has_pointer_capture_12115913(self_12115915) {
    function HEX3Aanonymous_12120001(x_12120025) {
      var result_12120029 = false;

      var F={procname:"hasPointerCapture.:anonymous",prev:framePtr,filename:"element_events.nim",line:0};
      framePtr = F;
        F.line = 56;
        result_12120029 = (x_12120025 == self_12115915);
      framePtr = F.prev;

      return result_12120029;

    }

  var result_12115916 = false;

  var F={procname:"element_events.hasPointerCapture",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
    F.line = 56;
    result_12115916 = get_10476339(map_11005060(pointer_captured_to_12098967[0], HEX3Aanonymous_12120001), false);
  framePtr = F.prev;

  return result_12115916;

}
function sub_11195511(self_11195515, other_11195517) {
  var result_11195519 = null;

  var F={procname:"sub.sub",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 57;
    result_11195519 = vec2_9953092((self_11195515.x - other_11195517.x), (self_11195515.y - other_11195517.y));
  framePtr = F.prev;

  return result_11195519;

}
function onpointer_pressed_12075014(selfHEX60gensym12070003_12075016, handlerHEX60gensym12070004_12080005) {
    var Tmp1;

  var F={procname:"element_events.onpointerPressed",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
    F.line = 13;
    var eHEX60gensym12070005_12080311 = [(Tmp1 = mget_or_put_11865391(event_tableHEX60gensym12070002_12075013[0], selfHEX60gensym12070003_12075016, emitter_11865131()), Tmp1)[0][Tmp1[1]]];
    F.line = 14;
    add_11977358(eHEX60gensym12070005_12080311, 0, handlerHEX60gensym12070004_12080005);
  framePtr = F.prev;

  
}
function delete_12112617(x_12112622, x_12112622_Idx, i_12112623) {
  var F={procname:"delete.delete",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1254;
    x_12112622[x_12112622_Idx].splice(i_12112623, 1);
  framePtr = F.prev;

  
}
function find_12110415(a_12110419, item_12110420) {
  var result_12110421 = 0;

  var F={procname:"find.find",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    L1: do {
      F.line = 1751;
      var i_12110434 = null;
      F.line = 184;
      var i_14655470 = 0;
      F.line = 185;
      var l_14655471 = (a_12110419 != null ? a_12110419.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14655470 < l_14655471)) break L3;
            F.line = 1751;
            i_12110434 = a_12110419[chckIndx(i_14655470, 0, (a_12110419 != null ? a_12110419.length : 0)+0-1)-0];
            if ((i_12110434 == item_12110420)) {
            F.line = 1752;
            break BeforeRet;
            }
            
            F.line = 1753;
            result_12110421 = addInt(result_12110421, 1);
            F.line = 188;
            i_14655470 = addInt(i_14655470, 1);
            if (!(((a_12110419 != null ? a_12110419.length : 0) == l_14655471))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 1754;
    result_12110421 = -1;
  } while (false);
  framePtr = F.prev;

  return result_12110421;

}
function emit_12101611(self_12101616, self_12101616_Idx, data_12101617) {
  var F={procname:"emit.emit",prev:framePtr,filename:"events.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 24;
      var to_remove_12110414 = null;
      F.line = 184;
      var i_14655449 = 0;
      F.line = 185;
      var l_14655450 = (self_12101616[self_12101616_Idx].toRemove != null ? self_12101616[self_12101616_Idx].toRemove.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14655449 < l_14655450)) break L3;
            F.line = 24;
            to_remove_12110414 = self_12101616[self_12101616_Idx].toRemove[chckIndx(i_14655449, 0, (self_12101616[self_12101616_Idx].toRemove != null ? self_12101616[self_12101616_Idx].toRemove.length : 0)+0-1)-0];
            F.line = 25;
            delete_12112617(self_12101616[self_12101616_Idx], "listeners", chckRange(find_12110415(self_12101616[self_12101616_Idx].listeners, to_remove_12110414), 0, 2147483647));
            F.line = 188;
            i_14655449 = addInt(i_14655449, 1);
            if (!(((self_12101616[self_12101616_Idx].toRemove != null ? self_12101616[self_12101616_Idx].toRemove.length : 0) == l_14655450))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 26;
    self_12101616[self_12101616_Idx].toRemove = nimCopy(null, [], NTI12115629);
    L4: do {
      F.line = 28;
      var to_add_12115642 = null;
      F.line = 184;
      var i_14655453 = 0;
      F.line = 185;
      var l_14655454 = (self_12101616[self_12101616_Idx].toAdd != null ? self_12101616[self_12101616_Idx].toAdd.length : 0);
      L5: do {
        F.line = 186;
          L6: while (true) {
          if (!(i_14655453 < l_14655454)) break L6;
            F.line = 28;
            to_add_12115642 = self_12101616[self_12101616_Idx].toAdd[chckIndx(i_14655453, 0, (self_12101616[self_12101616_Idx].toAdd != null ? self_12101616[self_12101616_Idx].toAdd.length : 0)+0-1)-0];
            F.line = 29;
            if (self_12101616[self_12101616_Idx].listeners != null) { self_12101616[self_12101616_Idx].listeners.push(to_add_12115642); } else { self_12101616[self_12101616_Idx].listeners = [to_add_12115642]; };
            F.line = 188;
            i_14655453 = addInt(i_14655453, 1);
            if (!(((self_12101616[self_12101616_Idx].toAdd != null ? self_12101616[self_12101616_Idx].toAdd.length : 0) == l_14655454))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 30;
    self_12101616[self_12101616_Idx].toAdd = nimCopy(null, [], NTI12115872);
    L7: do {
      F.line = 32;
      var listener_12115885 = null;
      F.line = 184;
      var i_14655457 = 0;
      F.line = 185;
      var l_14655458 = (self_12101616[self_12101616_Idx].listeners != null ? self_12101616[self_12101616_Idx].listeners.length : 0);
      L8: do {
        F.line = 186;
          L9: while (true) {
          if (!(i_14655457 < l_14655458)) break L9;
            F.line = 32;
            listener_12115885 = self_12101616[self_12101616_Idx].listeners[chckIndx(i_14655457, 0, (self_12101616[self_12101616_Idx].listeners != null ? self_12101616[self_12101616_Idx].listeners.length : 0)+0-1)-0];
            F.line = 33;
            listener_12115885(data_12101617);
            F.line = 188;
            i_14655457 = addInt(i_14655457, 1);
            if (!(((self_12101616[self_12101616_Idx].listeners != null ? self_12101616[self_12101616_Idx].listeners.length : 0) == l_14655458))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function capture_pointer_12125240(self_12125242) {
  var F={procname:"element_events.capturePointer",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
    if (pointer_captured_by_someone_else_12120459(self_12125242)) {
    F.line = 63;
    rawEcho(makeNimstrLit("WARN: Tried to capture pointer that was already captured by someone else!"));
    }
    
    F.line = 65;
    nimCopy(pointer_captured_to_12098967[0], some_11005282(self_12125242), NTI10275035);
    F.line = 66;
    emit_12101611(pointer_captured_emitter_12098848, 0, self_12125242);
  framePtr = F.prev;

  
}
function onpointer_released_12090014(selfHEX60gensym12085003_12090016, handlerHEX60gensym12085004_12095005) {
    var Tmp1;

  var F={procname:"element_events.onpointerReleased",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
    F.line = 13;
    var eHEX60gensym12085005_12095311 = [(Tmp1 = mget_or_put_11865391(event_tableHEX60gensym12085002_12090013[0], selfHEX60gensym12085003_12090016, emitter_11865131()), Tmp1)[0][Tmp1[1]]];
    F.line = 14;
    add_11977358(eHEX60gensym12085005_12095311, 0, handlerHEX60gensym12085004_12095005);
  framePtr = F.prev;

  
}
function HEX3DHEX3D_12101247(a_12101250, b_12101251) {
  var result_12101252 = false;

  var F={procname:"==.==",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 337;
    result_12101252 = (((is_some_10912193(a_12101250) && is_some_10912193(b_12101251)) && (a_12101250.val == b_12101251.val)) || (!(is_some_10912193(a_12101250)) && !(is_some_10912193(b_12101251))));
  framePtr = F.prev;

  return result_12101252;

}
function release_pointer_12099261(self_12099263) {
  var F={procname:"element_events.releasePointer",prev:framePtr,filename:"element_events.nim",line:0};
  framePtr = F;
    if (HEX3DHEX3D_12101247(pointer_captured_to_12098967[0], to_option_11005275(self_12099263))) {
    F.line = 52;
    nimCopy(pointer_captured_to_12098967[0], none_11020346(), NTI10275035);
    F.line = 53;
    emit_12101611(pointer_capture_released_emitter_12098854, 0, self_12099263);
    }
    
  framePtr = F.prev;

  
}
function on_drag_12186093(moved_12190009) {
    function HEX3Aanonymous_12190018(element_12190020) {
        function HEX3Aanonymous_12190021(arg_12190023) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"onDrag.nim",line:0};
          framePtr = F;
            if (has_pointer_capture_12115913(element_12190020)) {
            F.line = 18;
            var diff_12190041 = sub_11195511(arg_12190023.pos, past_pos_12190017);
            F.line = 19;
            moved_12190009(diff_12190041);
            F.line = 20;
            past_pos_12190017 = arg_12190023.pos;
            }
            
          framePtr = F.prev;

          
        }
        function HEX3Aanonymous_12190055(arg_12190057) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"onDrag.nim",line:0};
          framePtr = F;
            F.line = 24;
            capture_pointer_12125240(element_12190020);
            F.line = 25;
            past_pos_12190017 = arg_12190057.pos;
          framePtr = F.prev;

          
        }
        function HEX3Aanonymous_12190071(arg_12190073) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"onDrag.nim",line:0};
          framePtr = F;
            F.line = 30;
            release_pointer_12099261(arg_12190073.sender);
          framePtr = F.prev;

          
        }

      var F={procname:"onDrag.:anonymous",prev:framePtr,filename:"onDrag.nim",line:0};
      framePtr = F;
        F.line = 15;
        onpointer_moved_12045014(element_12190020, HEX3Aanonymous_12190021);
        F.line = 22;
        onpointer_pressed_12075014(element_12190020, HEX3Aanonymous_12190055);
        F.line = 28;
        onpointer_released_12090014(element_12190020, HEX3Aanonymous_12190071);
      framePtr = F.prev;

      
    }

  var result_12190010 = ({update: ({val: null}), added: ({val: null})});

  var F={procname:"onDrag.onDrag",prev:framePtr,filename:"onDrag.nim",line:0};
  framePtr = F;
    F.line = 10;
    F.line = 10;
    var past_pos_12190017 = vec2_9953092(0.0, 0.0);
    nimCopy(result_12190010, {added: some_12160057(HEX3Aanonymous_12190018), update: ({val: null})}, NTI11686068);
  framePtr = F.prev;

  return result_12190010;

}
function clamp_14515190(x_14515193, a_14515194, b_14515195) {
  var result_14515196 = 0.0;

  var F={procname:"clamp.clamp",prev:framePtr,filename:"comparisons.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if ((x_14515193 < a_14515194)) {
    F.line = 260;
    result_14515196 = a_14515194;
    break BeforeRet;
    }
    
    if ((b_14515195 < x_14515193)) {
    F.line = 261;
    result_14515196 = b_14515195;
    break BeforeRet;
    }
    
    F.line = 262;
    result_14515196 = x_14515193;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_14515196;

}
function measure_circle_11480262(self_11480264, available_size_11480269, props_11480270) {
  var result_11480275 = null;

  var F={procname:"circle.measureCircle",prev:framePtr,filename:"circle.nim",line:0};
  framePtr = F;
    F.line = 27;
    F.line = 27;
    var diameter_11480287 = (props_11480270.radius * 2.0000000000000000e+00);
    result_11480275 = vec2_9953092(max_90014(diameter_11480287, get_10330316(self_11480264.props.width, 0.0)), max_90014(diameter_11480287, get_10330316(self_11480264.props.height, 0.0)));
  framePtr = F.prev;

  return result_11480275;

}
function circle_10581184(self_10581186, color_info_10581191, stroke_info_10581196, center_10581197, radius_10581198) {
    var Tmp1;

  var result_10581199 = null;

  var F={procname:"drawing_primitives.circle",prev:framePtr,filename:"drawing_primitives.nim",line:0};
  framePtr = F;
    F.line = 63;
    result_10581199 = {transform: nimCopy(null, self_10581186.props.transform, NTI10260163), bounds: (Tmp1 = get_10480301(self_10581186.bounds), Tmp1)[0][Tmp1[1]], clipToBounds: get_10476339(self_10581186.props.clipToBounds, false), kind: 3, colorInfo: nimCopy(null, color_info_10581191, NTI10260125), strokeInfo: nimCopy(null, stroke_info_10581196, NTI10260143), circleInfo: {center: center_10581197, radius: radius_10581198}, children: [], textInfo: null, segments: null, ellipseInfo: ({center: null, radius: null, rotation: 0.0, startAngle: 0.0, endAngle: 0.0}), rectangleInfo: ({bounds: null})};
  framePtr = F.prev;

  return result_10581199;

}
function render_circle_11471100(self_11471102, props_11471103) {
  var result_11471108 = ({val: null});

  var F={procname:"circle.renderCircle",prev:framePtr,filename:"circle.nim",line:0};
  framePtr = F;
    F.line = 16;
    F.line = 16;
    var world_pos_11471109 = actual_world_position_10305676(self_11471102);
    nimCopy(result_11471108, some_11440204(circle_10581184(self_11471102, some_10572250({fill: nimCopy(null, props_11471103.color, NTI10257086), stroke: nimCopy(null, props_11471103.stroke, NTI10257086)}), some_11471166({width: get_10330316(props_11471103.strokeWidth, 1.0000000000000000e+00)}), world_pos_11471109, props_11471103.radius)), NTI10275009);
  framePtr = F.prev;

  return result_11471108;

}
function create_circle_11480443(props_11480445, elem_props_11480446, children_11480463) {
    function HEX3Aanonymous_11485001(self_11485003, available_size_11485008) {
      var result_11485010 = null;

      var F={procname:"createCircle.:anonymous",prev:framePtr,filename:"circle.nim",line:0};
      framePtr = F;
        F.line = 33;
        result_11485010 = measure_circle_11480262(self_11485003, available_size_11485008, props_11480445);
      framePtr = F.prev;

      return result_11485010;

    }
    function HEX3Aanonymous_11490001(elem_11490003) {
      var result_11490005 = ({val: null});

      var F={procname:"createCircle.:anonymous",prev:framePtr,filename:"circle.nim",line:0};
      framePtr = F;
        F.line = 37;
        nimCopy(result_11490005, render_circle_11471100(elem_11490003, props_11480445), NTI10275009);
      framePtr = F.prev;

      return result_11490005;

    }

  var result_11480464 = null;

  var F={procname:"circle.createCircle",prev:framePtr,filename:"circle.nim",line:0};
  framePtr = F;
    F.line = 31;
    result_11480464 = {props: elem_props_11480446, id: 0, children: null, parent: ({val: null, has: false}), desiredSize: ({val: null}), bounds: ({val: null}), previousArrange: ({val: null}), previousMeasure: ({val: null}), isArrangeValid: false, isMeasureValid: false, measuring: false, layout: ({val: null}), drawable: ({val: null}), onRooted: ({val: null}), onUnrooted: ({val: null}), pointerInsideLastUpdate: false};
    F.line = 32;
    nimCopy(result_11480464.layout, some_11380404({measure: HEX3Aanonymous_11485001, name: null, arrange: null}), NTI10275125);
    F.line = 35;
    nimCopy(result_11480464.drawable, some_11460019({name: makeNimstrLit("circle"), render: HEX3Aanonymous_11490001}), NTI10275143);
  framePtr = F.prev;

  return result_11480464;

}
function to_subscriber_13736017(on_next_13736022) {
  var result_13736024 = null;

  var F={procname:"toSubscriber.toSubscriber",prev:framePtr,filename:"observables.nim",line:0};
  framePtr = F;
    F.line = 36;
    result_13736024 = {onNext: on_next_13736022, onCompleted: none_12145867(), onError: none_12145939()};
  framePtr = F.prev;

  return result_13736024;

}
function subscribe_13736008(self_13736012, on_next_13736015) {
  var result_13736016 = null;

  var F={procname:"subscribe.subscribe",prev:framePtr,filename:"observables.nim",line:0};
  framePtr = F;
    F.line = 45;
    result_13736016 = self_13736012.onSubscribe(to_subscriber_13736017(on_next_13736015));
  framePtr = F.prev;

  return result_13736016;

}
function map_13835510(self_13835515, mapper_13835518) {
    function HEX3Aanonymous_13835553(subscriber_13835559) {
        function HEX3Aanonymous_13835586(new_val_13835588) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"observables.nim",line:0};
          framePtr = F;
            F.line = 178;
            subscriber_13835559.onNext(mapper_13835518(new_val_13835588));
          framePtr = F.prev;

          
        }

      var result_13835560 = null;

      var F={procname:"map.:anonymous",prev:framePtr,filename:"observables.nim",line:0};
      framePtr = F;
        F.line = 176;
        result_13835560 = subscribe_13736008(self_13835515, HEX3Aanonymous_13835586);
      framePtr = F.prev;

      return result_13835560;

    }

  var result_13835548 = null;

  var F={procname:"map.map",prev:framePtr,filename:"observables.nim",line:0};
  framePtr = F;
    F.line = 174;
    result_13835548 = {onSubscribe: HEX3Aanonymous_13835553};
  framePtr = F.prev;

  return result_13835548;

}
function choose_14520089(self_14520093, on_true_14520094, on_false_14520095) {
    on_true_14520094 = nimCopy(null, on_true_14520094, NTI112);
    on_false_14520095 = nimCopy(null, on_false_14520095, NTI112);
    function HEX3Aanonymous_14520202(x_14520204) {
        var Tmp1;

      var result_14520205 = null;

      var F={procname:"choose.:anonymous",prev:framePtr,filename:"observable_utils.nim",line:0};
      framePtr = F;
        F.line = 7;
        if (x_14520204) {
        Tmp1 = on_true_14520094;
        }
        else {
        Tmp1 = on_false_14520095;
        }
        
        result_14520205 = nimCopy(null, Tmp1, NTI112);
      framePtr = F.prev;

      return result_14520205;

    }

  var result_14520097 = null;

  var F={procname:"choose.choose",prev:framePtr,filename:"observable_utils.nim",line:0};
  framePtr = F;
    F.line = 4;
    result_14520097 = map_13835510(self_14520093, HEX3Aanonymous_14520202);
  framePtr = F.prev;

  return result_14520097;

}
function to_observable_13736148(subject_13736152) {
  var result_13736154 = null;

  var F={procname:"toObservable.toObservable",prev:framePtr,filename:"observables.nim",line:0};
  framePtr = F;
    F.line = 167;
    result_13736154 = subject_13736152.source;
  framePtr = F.prev;

  return result_13736154;

}
function none_11030799() {
  var result_11030816 = ({val: null});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
  framePtr = F.prev;

  return result_11030816;

}
function none_11030793() {
  var result_11030797 = ({val: null});

  var F={procname:"none.none",prev:framePtr,filename:"options.nim",line:0};
  framePtr = F;
    F.line = 140;
    nimCopy(result_11030797, none_11030799(), NTI11030805);
  framePtr = F.prev;

  return result_11030797;

}
function new_element_13450297(comp_props_13450299, elem_props_13450300, children_13450302) {
  var result_13450303 = null;

  var F={procname:"dsl.newElement",prev:framePtr,filename:"dsl.nim",line:0};
  framePtr = F;
    F.line = 326;
    result_13450303 = new_element_11030693(elem_props_13450300, children_13450302, none_11030720(), none_11030793(), none_11040005(), none_11040005());
  framePtr = F.prev;

  return result_13450303;

}
function create_slider_14455341(props_14455343, elem_propsHEX60gensym14443285_14455344, children_14455346) {
    function val_to_pos_14455424(val_14455426) {
      var result_14455427 = 0.0;

      var F={procname:"createSlider.valToPos",prev:framePtr,filename:"midio_slider.nim",line:0};
      framePtr = F;
        F.line = 27;
        result_14455427 = (lerp_9954469(min_14455348, max_14455349, val_14455426) * slider_max_pos_14455423);
      framePtr = F.prev;

      return result_14455427;

    }
function pos_to_val_14455467(pos_14455469) {
  var result_14455470 = 0.0;

  var F={procname:"createSlider.posToVal",prev:framePtr,filename:"midio_slider.nim",line:0};
  framePtr = F;
    F.line = 30;
    result_14455470 = (pos_14455469 / slider_max_pos_14455423);
  framePtr = F.prev;

  return result_14455470;

}
        function HEX3Aanonymous_14515116(delta_14515122) {
          var F={procname:"createSlider.:anonymous",prev:framePtr,filename:"midio_slider.nim",line:0};
          framePtr = F;
            F.line = 51;
            next_12260114(val_14455821, clamp_14515190((val_14455821.value + pos_to_val_14455467(delta_14515122.x)), min_14455348, max_14455349));
          framePtr = F.prev;

          
        }
        function HEX3Aanonymous_14530177(new_valHEX60gensym14525002_14530179) {
          var F={procname:"createSlider.:anonymous",prev:framePtr,filename:"data_binding.nim",line:0};
          framePtr = F;
            F.line = 25;
            nimCopy(res_14520031.props.x, to_option_11470283(new_valHEX60gensym14525002_14530179), NTI9986076);
            F.line = 26;
            invalidate_layout_10965696(res_14520031);
          framePtr = F.prev;

          
        }
        function HEX3Aanonymous_14535177(new_valHEX60gensym14530442_14535179) {
          var F={procname:"createSlider.:anonymous",prev:framePtr,filename:"dsl.nim",line:0};
          framePtr = F;
            F.line = 79;
            nimCopy(elem_parts_14515010.Field1.color, to_option_10572177(new_valHEX60gensym14530442_14535179), NTI10257086);
            F.line = 80;
            invalidate_layout_10965696(res_14520031);
          framePtr = F.prev;

          
        }

  var result_14455347 = null;

  var F={procname:"midio_slider.createSlider",prev:framePtr,filename:"dsl.nim",line:0};
  framePtr = F;
    F.line = 411;
    F.line = 14;
    var min_14455348 = props_14455343.min;
    F.line = 14;
    var max_14455349 = props_14455343.max;
    F.line = 14;
    var default_value_14455350 = props_14455343.defaultValue;
    F.line = 14;
    var on_value_changed_14455351 = props_14455343.onValueChanged;
    F.line = 20;
    var hovering_thumb_14455383 = behavior_subject_13505375(false);
    F.line = 21;
    var circle_radius_14455384 = 8.0000000000000000e+00;
    F.line = 22;
    var slider_width_14455385 = 2.0000000000000000e+02;
    F.line = 24;
    var slider_max_pos_14455423 = (slider_width_14455385 - (circle_radius_14455384 * 2.0000000000000000e+00));
    F.line = 32;
    var val_14455821 = behavior_subject_14455511(default_value_14455350);
    F.line = 33;
    var thumb_pos_14456858 = map_14456373(to_observable_12280044(val_14455821), val_to_pos_14455424);
    F.line = 35;
    subscribe_14457367(val_14455821, on_value_changed_14455351);
    L1: do {
      F.line = 42;
      var elem_parts_14465010 = {Field0: {width: to_option_11470283(slider_width_14455385), height: ({val: 0.0, has: false}), maxWidth: ({val: 0.0, has: false}), minWidth: ({val: 0.0, has: false}), maxHeight: ({val: 0.0, has: false}), minHeight: ({val: 0.0, has: false}), x: ({val: 0.0, has: false}), y: ({val: 0.0, has: false}), xOffset: ({val: 0.0, has: false}), yOffset: ({val: 0.0, has: false}), margin: ({val: {Field0: 0.0, Field1: 0.0, Field2: 0.0, Field3: 0.0}, has: false}), horizontalAlignment: ({val: 0, has: false}), verticalAlignment: ({val: 0, has: false}), visibility: ({val: 0, has: false}), clipToBounds: ({val: false, has: false}), transform: ({val: ({scale: null, translation: null, rotation: 0.0}), has: false})}, Field1: {}};
      F.line = 229;
      L2: do {
        F.line = 40;
        var elem_parts_14475010 = {Field0: {width: ({val: 0.0, has: false}), height: ({val: 0.0, has: false}), maxWidth: ({val: 0.0, has: false}), minWidth: ({val: 0.0, has: false}), maxHeight: ({val: 0.0, has: false}), minHeight: ({val: 0.0, has: false}), x: ({val: 0.0, has: false}), y: ({val: 0.0, has: false}), xOffset: ({val: 0.0, has: false}), yOffset: ({val: 0.0, has: false}), margin: ({val: {Field0: 0.0, Field1: 0.0, Field2: 0.0, Field3: 0.0}, has: false}), horizontalAlignment: ({val: 0, has: false}), verticalAlignment: ({val: 0, has: false}), visibility: ({val: 0, has: false}), clipToBounds: ({val: false, has: false}), transform: ({val: ({scale: null, translation: null, rotation: 0.0}), has: false})}, Field1: {color: to_option_10572177(makeNimstrLit("teal")), radius: ({val: {Field0: 0.0, Field1: 0.0, Field2: 0.0, Field3: 0.0}, has: false}), stroke: ({val: null, has: false}), strokeWidth: ({val: 0.0, has: false})}};
        F.line = 229;
        var children_14465015 = [];
        F.line = 230;
        var behaviors_14465016 = [];
        F.line = 40;
        var res_14480033 = create_rectangle_11491539(elem_parts_14475010.Field1, elem_parts_14475010.Field0, children_14465015);
        L3: do {
          F.line = 502;
          var behavior_14485014 = ({update: ({val: null}), added: ({val: null})});
          F.line = 184;
          var i_14655391 = 0;
          F.line = 185;
          var l_14655392 = (behaviors_14465016 != null ? behaviors_14465016.length : 0);
          L4: do {
            F.line = 186;
              L5: while (true) {
              if (!(i_14655391 < l_14655392)) break L5;
                F.line = 40;
                nimCopy(behavior_14485014, behaviors_14465016[chckIndx(i_14655391, 0, (behaviors_14465016 != null ? behaviors_14465016.length : 0)+0-1)-0], NTI11686068);
                F.line = 40;
                add_11745074(res_14480033, behavior_14485014);
                F.line = 188;
                i_14655391 = addInt(i_14655391, 1);
                if (!(((behaviors_14465016 != null ? behaviors_14465016.length : 0) == l_14655392))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      } while(false);
      L6: do {
        F.line = 41;
        var elem_parts_14495028 = {Field0: {height: to_option_11470283(4.0000000000000000e+00), margin: to_option_11050654(thickness_11142530(circle_radius_14455384)), verticalAlignment: to_option_13590009(1), width: ({val: 0.0, has: false}), maxWidth: ({val: 0.0, has: false}), minWidth: ({val: 0.0, has: false}), maxHeight: ({val: 0.0, has: false}), minHeight: ({val: 0.0, has: false}), x: ({val: 0.0, has: false}), y: ({val: 0.0, has: false}), xOffset: ({val: 0.0, has: false}), yOffset: ({val: 0.0, has: false}), horizontalAlignment: ({val: 0, has: false}), visibility: ({val: 0, has: false}), clipToBounds: ({val: false, has: false}), transform: ({val: ({scale: null, translation: null, rotation: 0.0}), has: false})}, Field1: {color: to_option_10572177(makeNimstrLit("yellow")), radius: ({val: {Field0: 0.0, Field1: 0.0, Field2: 0.0, Field3: 0.0}, has: false}), stroke: ({val: null, has: false}), strokeWidth: ({val: 0.0, has: false})}};
        F.line = 229;
        var children_14485109 = [];
        F.line = 230;
        var behaviors_14485110 = [];
        F.line = 41;
        var res_14500033 = create_rectangle_11491539(elem_parts_14495028.Field1, elem_parts_14495028.Field0, children_14485109);
        L7: do {
          F.line = 502;
          var behavior_14505014 = ({update: ({val: null}), added: ({val: null})});
          F.line = 184;
          var i_14655398 = 0;
          F.line = 185;
          var l_14655399 = (behaviors_14485110 != null ? behaviors_14485110.length : 0);
          L8: do {
            F.line = 186;
              L9: while (true) {
              if (!(i_14655398 < l_14655399)) break L9;
                F.line = 41;
                nimCopy(behavior_14505014, behaviors_14485110[chckIndx(i_14655398, 0, (behaviors_14485110 != null ? behaviors_14485110.length : 0)+0-1)-0], NTI11686068);
                F.line = 41;
                add_11745074(res_14500033, behavior_14505014);
                F.line = 188;
                i_14655398 = addInt(i_14655398, 1);
                if (!(((behaviors_14485110 != null ? behaviors_14485110.length : 0) == l_14655399))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      } while(false);
      L10: do {
        F.line = 49;
        var elem_parts_14515010 = {Field0: {verticalAlignment: to_option_13590009(1), width: ({val: 0.0, has: false}), height: ({val: 0.0, has: false}), maxWidth: ({val: 0.0, has: false}), minWidth: ({val: 0.0, has: false}), maxHeight: ({val: 0.0, has: false}), minHeight: ({val: 0.0, has: false}), x: ({val: 0.0, has: false}), y: ({val: 0.0, has: false}), xOffset: ({val: 0.0, has: false}), yOffset: ({val: 0.0, has: false}), margin: ({val: {Field0: 0.0, Field1: 0.0, Field2: 0.0, Field3: 0.0}, has: false}), horizontalAlignment: ({val: 0, has: false}), visibility: ({val: 0, has: false}), clipToBounds: ({val: false, has: false}), transform: ({val: ({scale: null, translation: null, rotation: 0.0}), has: false})}, Field1: {radius: circle_radius_14455384, color: ({val: null, has: false}), stroke: ({val: null, has: false}), strokeWidth: ({val: 0.0, has: false})}};
        F.line = 229;
        var children_14505109 = [];
        F.line = 230;
        var behaviors_14505110 = [on_hover_14443014(hovering_thumb_14455383), on_drag_12186093(HEX3Aanonymous_14515116)];
        F.line = 49;
        var res_14520031 = create_circle_11480443(elem_parts_14515010.Field1, elem_parts_14515010.Field0, children_14505109);
        F.line = 89;
        subscribe_13780457(thumb_pos_14456858, HEX3Aanonymous_14530177);
        F.line = 49;
        subscribe_13845457(choose_14520089(to_observable_13736148(hovering_thumb_14455383), makeNimstrLit("orange"), makeNimstrLit("red")), HEX3Aanonymous_14535177);
        L11: do {
          F.line = 502;
          var behavior_14535454 = ({update: ({val: null}), added: ({val: null})});
          F.line = 184;
          var i_14655405 = 0;
          F.line = 185;
          var l_14655406 = (behaviors_14505110 != null ? behaviors_14505110.length : 0);
          L12: do {
            F.line = 186;
              L13: while (true) {
              if (!(i_14655405 < l_14655406)) break L13;
                F.line = 49;
                nimCopy(behavior_14535454, behaviors_14505110[chckIndx(i_14655405, 0, (behaviors_14505110 != null ? behaviors_14505110.length : 0)+0-1)-0], NTI11686068);
                F.line = 49;
                add_11745074(res_14520031, behavior_14535454);
                F.line = 188;
                i_14655405 = addInt(i_14655405, 1);
                if (!(((behaviors_14505110 != null ? behaviors_14505110.length : 0) == l_14655406))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      } while(false);
      var children_14457804 = [res_14480033, res_14500033, res_14520031];
      F.line = 230;
      var behaviors_14457805 = [];
      F.line = 42;
      var res_14540050 = new_element_13450297(elem_parts_14465010.Field1, elem_parts_14465010.Field0, children_14457804);
      L14: do {
        F.line = 502;
        var behavior_14545014 = ({update: ({val: null}), added: ({val: null})});
        F.line = 184;
        var i_14655409 = 0;
        F.line = 185;
        var l_14655410 = (behaviors_14457805 != null ? behaviors_14457805.length : 0);
        L15: do {
          F.line = 186;
            L16: while (true) {
            if (!(i_14655409 < l_14655410)) break L16;
              F.line = 42;
              nimCopy(behavior_14545014, behaviors_14457805[chckIndx(i_14655409, 0, (behaviors_14457805 != null ? behaviors_14457805.length : 0)+0-1)-0], NTI11686068);
              F.line = 42;
              add_11745074(res_14540050, behavior_14545014);
              F.line = 188;
              i_14655409 = addInt(i_14655409, 1);
              if (!(((behaviors_14457805 != null ? behaviors_14457805.length : 0) == l_14655410))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
    } while(false);
    result_14455347 = res_14540050;
  framePtr = F.prev;

  return result_14455347;

}
function measure_stack_11406089(self_11406091, props_11406092, available_size_11406097) {
            var Tmp4;
            var Tmp5;
            var Tmp6;
              var Tmp7;
            var Tmp8;
            var Tmp9;
              var Tmp10;
    var Tmp11;

  var result_11406102 = null;

  var F={procname:"stack.measureStack",prev:framePtr,filename:"stack.nim",line:0};
  framePtr = F;
    F.line = 16;
    F.line = 16;
    var width_11406103 = 0.0;
    F.line = 17;
    var accumulated_height_11406104 = [0.0];
    F.line = 18;
    var is_vertical_11406184 = (props_11406092.direction == 0);
    L1: do {
      F.line = 19;
      var child_11406197 = null;
      F.line = 184;
      var i_14655485 = 0;
      F.line = 185;
      var l_14655486 = (self_11406091.children != null ? self_11406091.children.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14655485 < l_14655486)) break L3;
            F.line = 19;
            child_11406197 = self_11406091.children[chckIndx(i_14655485, 0, (self_11406091.children != null ? self_11406091.children.length : 0)+0-1)-0];
            F.line = 20;
            if (is_vertical_11406184) {
            Tmp4 = with_y_11160542(available_size_11406097, 0.0);
            }
            else {
            Tmp4 = with_x_11155542(available_size_11406097, 0.0);
            }
            
            measure_10912033(child_11406197, Tmp4);
            if (is_some_10915042(child_11406197.desiredSize)) {
            F.line = 22;
            if (is_vertical_11406184) {
            Tmp5 = (Tmp6 = get_10915281(child_11406197.desiredSize), Tmp6)[0][Tmp6[1]].x;
            }
            else {
            Tmp5 = (Tmp7 = get_10915281(child_11406197.desiredSize), Tmp7)[0][Tmp7[1]].y;
            }
            
            width_11406103 = max_90014(width_11406103, Tmp5);
            F.line = 23;
            if (is_vertical_11406184) {
            Tmp8 = (Tmp9 = get_10915281(child_11406197.desiredSize), Tmp9)[0][Tmp9[1]].y;
            }
            else {
            Tmp8 = (Tmp10 = get_10915281(child_11406197.desiredSize), Tmp10)[0][Tmp10[1]].x;
            }
            
            HEX2BHEX3D_9705021(accumulated_height_11406104, 0, Tmp8);
            }
            else {
              F.line = 25;
            rawEcho(makeNimstrLit("WARN: Child of stack did not have a desired size"));
            }
            
            F.line = 188;
            i_14655485 = addInt(i_14655485, 1);
            if (!(((self_11406091.children != null ? self_11406091.children.length : 0) == l_14655486))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    if (is_vertical_11406184) {
    Tmp11 = vec2_9953092(width_11406103, accumulated_height_11406104[0]);
    }
    else {
    Tmp11 = vec2_9953092(accumulated_height_11406104[0], width_11406103);
    }
    
    result_11406102 = Tmp11;
  framePtr = F.prev;

  return result_11406102;

}
function add_y_11435062(self_11435066, other_11435067) {
  var result_11435069 = null;

  var F={procname:"addY.addY",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 51;
    result_11435069 = vec2_9953092(self_11435066.x, (self_11435066.y + other_11435067));
  framePtr = F.prev;

  return result_11435069;

}
function add_x_11435167(self_11435171, other_11435172) {
  var result_11435174 = null;

  var F={procname:"addX.addX",prev:framePtr,filename:"vec.nim",line:0};
  framePtr = F;
    F.line = 48;
    result_11435174 = vec2_9953092((self_11435171.x + other_11435172), self_11435171.y);
  framePtr = F.prev;

  return result_11435174;

}
function arrange_stack_11425026(self_11425028, props_11425029, available_size_11425034) {
            var Tmp4;
            var Tmp5;
              var Tmp6;
            var Tmp7;
            var Tmp8;
              var Tmp9;
    var Tmp10;

  var result_11425039 = null;

  var F={procname:"stack.arrangeStack",prev:framePtr,filename:"stack.nim",line:0};
  framePtr = F;
    F.line = 30;
    F.line = 30;
    var next_pos_11425046 = vec2_9953092(0.0, 0.0);
    F.line = 31;
    var is_vertical_11425113 = (props_11425029.direction == 0);
    L1: do {
      F.line = 32;
      var child_11425126 = null;
      F.line = 184;
      var i_14655489 = 0;
      F.line = 185;
      var l_14655490 = (self_11425028.children != null ? self_11425028.children.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14655489 < l_14655490)) break L3;
            F.line = 32;
            child_11425126 = self_11425028.children[chckIndx(i_14655489, 0, (self_11425028.children != null ? self_11425028.children.length : 0)+0-1)-0];
            if (is_some_10915042(child_11425126.desiredSize)) {
            F.line = 34;
            if (is_vertical_11425113) {
            Tmp4 = vec2_9953092(available_size_11425034.x, (Tmp5 = get_10915281(child_11425126.desiredSize), Tmp5)[0][Tmp5[1]].y);
            }
            else {
            Tmp4 = vec2_9953092((Tmp6 = get_10915281(child_11425126.desiredSize), Tmp6)[0][Tmp6[1]].x, available_size_11425034.y);
            }
            
            arrange_10921371(child_11425126, rect_10480068(next_pos_11425046, Tmp4));
            F.line = 44;
            if (is_vertical_11425113) {
            Tmp7 = add_y_11435062(next_pos_11425046, (Tmp8 = get_10915281(child_11425126.desiredSize), Tmp8)[0][Tmp8[1]].y);
            }
            else {
            Tmp7 = add_x_11435167(next_pos_11425046, (Tmp9 = get_10915281(child_11425126.desiredSize), Tmp9)[0][Tmp9[1]].x);
            }
            
            next_pos_11425046 = Tmp7;
            }
            else {
              F.line = 46;
            rawEcho(makeNimstrLit("WARN: Child of stack did not have a desired size"));
            }
            
            F.line = 188;
            i_14655489 = addInt(i_14655489, 1);
            if (!(((self_11425028.children != null ? self_11425028.children.length : 0) == l_14655490))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    result_11425039 = (Tmp10 = get_10915281(self_11425028.desiredSize), Tmp10)[0][Tmp10[1]];
  framePtr = F.prev;

  return result_11425039;

}
function create_stack_11435418(stack_props_11435420, props_11435421, children_11435438) {
    function HEX3Aanonymous_11435440(elem_11435442, av_size_11435447) {
      var result_11435452 = null;

      var F={procname:"createStack.:anonymous",prev:framePtr,filename:"stack.nim",line:0};
      framePtr = F;
        F.line = 52;
        result_11435452 = measure_stack_11406089(elem_11435442, stack_props_11435420, av_size_11435447);
      framePtr = F.prev;

      return result_11435452;

    }
    function HEX3Aanonymous_11435466(self_11435468, available_size_11435473) {
      var result_11435478 = null;

      var F={procname:"createStack.:anonymous",prev:framePtr,filename:"stack.nim",line:0};
      framePtr = F;
        F.line = 53;
        result_11435478 = arrange_stack_11425026(self_11435468, stack_props_11435420, available_size_11435473);
      framePtr = F.prev;

      return result_11435478;

    }

  var result_11435439 = null;

  var F={procname:"stack.createStack",prev:framePtr,filename:"stack.nim",line:0};
  framePtr = F;
    F.line = 50;
    result_11435439 = new_element_11030693(props_11435421, children_11435438, some_11380404({name: makeNimstrLit("stack"), measure: HEX3Aanonymous_11435440, arrange: HEX3Aanonymous_11435466}), none_11030793(), none_11040005(), none_11040005());
  framePtr = F.prev;

  return result_11435439;

}
function render_14545165() {
          function HEX3Aanonymous_14600134(x_14600136) {
            var result_14600137 = null;

            var F={procname:"render.:anonymous",prev:framePtr,filename:"midio_slider.nim",line:0};
            framePtr = F;
              F.line = 64;
              F.line = 64;
              var fmt_res_14600142 = [mnewString(0)];
              F.line = 64;
              if (fmt_res_14600142[0] != null) { fmt_res_14600142[0] = (fmt_res_14600142[0]).concat(makeNimstrLit("val: ")); } else { fmt_res_14600142[0] = makeNimstrLit("val: "); };
              F.line = 64;
              format_value_11120011(fmt_res_14600142, 0, x_14600136, []);
              result_14600137 = nimCopy(null, fmt_res_14600142[0], NTI112);
            framePtr = F.prev;

            return result_14600137;

          }
          function HEX3Aanonymous_14615177(new_valHEX60gensym14610002_14615179) {
            var F={procname:"render.:anonymous",prev:framePtr,filename:"dsl.nim",line:0};
            framePtr = F;
              F.line = 79;
              elem_parts_14595004.Field1.text = nimCopy(null, new_valHEX60gensym14610002_14615179, NTI112);
              F.line = 80;
              invalidate_layout_10965696(res_14600034);
            framePtr = F.prev;

            
          }
          function print_value_14545200(x_14545202) {
            var F={procname:"render.printValue",prev:framePtr,filename:"midio_slider.nim",line:0};
            framePtr = F;
              F.line = 58;
              next_12260114(val_14545199, x_14545202);
            framePtr = F.prev;

            
          }

  var result_14545167 = null;

  var F={procname:"midio_slider.render",prev:framePtr,filename:"midio_slider.nim",line:0};
  framePtr = F;
    F.line = 56;
    F.line = 56;
    var val_14545199 = behavior_subject_14455511(5.0000000000000000e-01);
    L1: do {
      F.line = 61;
      var elem_parts_14555004 = {Field0: {width: ({val: 0.0, has: false}), height: ({val: 0.0, has: false}), maxWidth: ({val: 0.0, has: false}), minWidth: ({val: 0.0, has: false}), maxHeight: ({val: 0.0, has: false}), minHeight: ({val: 0.0, has: false}), x: ({val: 0.0, has: false}), y: ({val: 0.0, has: false}), xOffset: ({val: 0.0, has: false}), yOffset: ({val: 0.0, has: false}), margin: ({val: {Field0: 0.0, Field1: 0.0, Field2: 0.0, Field3: 0.0}, has: false}), horizontalAlignment: ({val: 0, has: false}), verticalAlignment: ({val: 0, has: false}), visibility: ({val: 0, has: false}), clipToBounds: ({val: false, has: false}), transform: ({val: ({scale: null, translation: null, rotation: 0.0}), has: false})}, Field1: {}};
      F.line = 229;
      L2: do {
        F.line = 60;
        var elem_parts_14565010 = {Field0: {width: ({val: 0.0, has: false}), height: ({val: 0.0, has: false}), maxWidth: ({val: 0.0, has: false}), minWidth: ({val: 0.0, has: false}), maxHeight: ({val: 0.0, has: false}), minHeight: ({val: 0.0, has: false}), x: ({val: 0.0, has: false}), y: ({val: 0.0, has: false}), xOffset: ({val: 0.0, has: false}), yOffset: ({val: 0.0, has: false}), margin: ({val: {Field0: 0.0, Field1: 0.0, Field2: 0.0, Field3: 0.0}, has: false}), horizontalAlignment: ({val: 0, has: false}), verticalAlignment: ({val: 0, has: false}), visibility: ({val: 0, has: false}), clipToBounds: ({val: false, has: false}), transform: ({val: ({scale: null, translation: null, rotation: 0.0}), has: false})}, Field1: {color: to_option_10572177(makeNimstrLit("blue")), radius: ({val: {Field0: 0.0, Field1: 0.0, Field2: 0.0, Field3: 0.0}, has: false}), stroke: ({val: null, has: false}), strokeWidth: ({val: 0.0, has: false})}};
        F.line = 229;
        var children_14555009 = [];
        F.line = 230;
        var behaviors_14555010 = [];
        F.line = 60;
        var res_14570033 = create_rectangle_11491539(elem_parts_14565010.Field1, elem_parts_14565010.Field0, children_14555009);
        L3: do {
          F.line = 502;
          var behavior_14575014 = ({update: ({val: null}), added: ({val: null})});
          F.line = 184;
          var i_14655277 = 0;
          F.line = 185;
          var l_14655278 = (behaviors_14555010 != null ? behaviors_14555010.length : 0);
          L4: do {
            F.line = 186;
              L5: while (true) {
              if (!(i_14655277 < l_14655278)) break L5;
                F.line = 60;
                nimCopy(behavior_14575014, behaviors_14555010[chckIndx(i_14655277, 0, (behaviors_14555010 != null ? behaviors_14555010.length : 0)+0-1)-0], NTI11686068);
                F.line = 60;
                add_11745074(res_14570033, behavior_14575014);
                F.line = 188;
                i_14655277 = addInt(i_14655277, 1);
                if (!(((behaviors_14555010 != null ? behaviors_14555010.length : 0) == l_14655278))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      } while(false);
      L6: do {
        F.line = 66;
        var elem_parts_14585010 = {Field0: {horizontalAlignment: to_option_11490132(1), width: ({val: 0.0, has: false}), height: ({val: 0.0, has: false}), maxWidth: ({val: 0.0, has: false}), minWidth: ({val: 0.0, has: false}), maxHeight: ({val: 0.0, has: false}), minHeight: ({val: 0.0, has: false}), x: ({val: 0.0, has: false}), y: ({val: 0.0, has: false}), xOffset: ({val: 0.0, has: false}), yOffset: ({val: 0.0, has: false}), margin: ({val: {Field0: 0.0, Field1: 0.0, Field2: 0.0, Field3: 0.0}, has: false}), verticalAlignment: ({val: 0, has: false}), visibility: ({val: 0, has: false}), clipToBounds: ({val: false, has: false}), transform: ({val: ({scale: null, translation: null, rotation: 0.0}), has: false})}, Field1: {direction: 0}};
        F.line = 229;
        L7: do {
          F.line = 62;
          var elem_parts_14595004 = {Field0: {width: ({val: 0.0, has: false}), height: ({val: 0.0, has: false}), maxWidth: ({val: 0.0, has: false}), minWidth: ({val: 0.0, has: false}), maxHeight: ({val: 0.0, has: false}), minHeight: ({val: 0.0, has: false}), x: ({val: 0.0, has: false}), y: ({val: 0.0, has: false}), xOffset: ({val: 0.0, has: false}), yOffset: ({val: 0.0, has: false}), margin: ({val: {Field0: 0.0, Field1: 0.0, Field2: 0.0, Field3: 0.0}, has: false}), horizontalAlignment: ({val: 0, has: false}), verticalAlignment: ({val: 0, has: false}), visibility: ({val: 0, has: false}), clipToBounds: ({val: false, has: false}), transform: ({val: ({scale: null, translation: null, rotation: 0.0}), has: false})}, Field1: {text: null, fontSize: ({val: 0.0, has: false}), font: ({val: null, has: false}), color: ({val: null, has: false})}};
          F.line = 229;
          var children_14585015 = [];
          F.line = 230;
          var behaviors_14585016 = [];
          F.line = 62;
          var res_14600034 = create_text_13460305(elem_parts_14595004.Field1, elem_parts_14595004.Field0, children_14585015);
          F.line = 62;
          subscribe_13845457(map_14605475(to_observable_12280044(val_14545199), HEX3Aanonymous_14600134), HEX3Aanonymous_14615177);
          L8: do {
            F.line = 502;
            var behavior_14615448 = ({update: ({val: null}), added: ({val: null})});
            F.line = 184;
            var i_14655287 = 0;
            F.line = 185;
            var l_14655288 = (behaviors_14585016 != null ? behaviors_14585016.length : 0);
            L9: do {
              F.line = 186;
                L10: while (true) {
                if (!(i_14655287 < l_14655288)) break L10;
                  F.line = 62;
                  nimCopy(behavior_14615448, behaviors_14585016[chckIndx(i_14655287, 0, (behaviors_14585016 != null ? behaviors_14585016.length : 0)+0-1)-0], NTI11686068);
                  F.line = 62;
                  add_11745074(res_14600034, behavior_14615448);
                  F.line = 188;
                  i_14655287 = addInt(i_14655287, 1);
                  if (!(((behaviors_14585016 != null ? behaviors_14585016.length : 0) == l_14655288))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
        } while(false);
        L11: do {
          F.line = 70;
          var elem_parts_14625004 = {Field0: {width: ({val: 0.0, has: false}), height: ({val: 0.0, has: false}), maxWidth: ({val: 0.0, has: false}), minWidth: ({val: 0.0, has: false}), maxHeight: ({val: 0.0, has: false}), minHeight: ({val: 0.0, has: false}), x: ({val: 0.0, has: false}), y: ({val: 0.0, has: false}), xOffset: ({val: 0.0, has: false}), yOffset: ({val: 0.0, has: false}), margin: ({val: {Field0: 0.0, Field1: 0.0, Field2: 0.0, Field3: 0.0}, has: false}), horizontalAlignment: ({val: 0, has: false}), verticalAlignment: ({val: 0, has: false}), visibility: ({val: 0, has: false}), clipToBounds: ({val: false, has: false}), transform: ({val: ({scale: null, translation: null, rotation: 0.0}), has: false})}, Field1: {min: 0.0, max: 1.0000000000000000e+00, defaultValue: 5.0000000000000000e-01, onValueChanged: print_value_14545200}};
          F.line = 229;
          var children_14615588 = [];
          F.line = 230;
          var behaviors_14615589 = [];
          F.line = 70;
          var res_14630033 = create_slider_14455341(elem_parts_14625004.Field1, elem_parts_14625004.Field0, children_14615588);
          L12: do {
            F.line = 502;
            var behavior_14635014 = ({update: ({val: null}), added: ({val: null})});
            F.line = 184;
            var i_14655294 = 0;
            F.line = 185;
            var l_14655295 = (behaviors_14615589 != null ? behaviors_14615589.length : 0);
            L13: do {
              F.line = 186;
                L14: while (true) {
                if (!(i_14655294 < l_14655295)) break L14;
                  F.line = 70;
                  nimCopy(behavior_14635014, behaviors_14615589[chckIndx(i_14655294, 0, (behaviors_14615589 != null ? behaviors_14615589.length : 0)+0-1)-0], NTI11686068);
                  F.line = 70;
                  add_11745074(res_14630033, behavior_14635014);
                  F.line = 188;
                  i_14655294 = addInt(i_14655294, 1);
                  if (!(((behaviors_14615589 != null ? behaviors_14615589.length : 0) == l_14655295))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
        } while(false);
        var children_14575109 = [res_14600034, res_14630033];
        F.line = 230;
        var behaviors_14575110 = [];
        F.line = 66;
        var res_14640043 = create_stack_11435418(elem_parts_14585010.Field1, elem_parts_14585010.Field0, children_14575109);
        L15: do {
          F.line = 502;
          var behavior_14645014 = ({update: ({val: null}), added: ({val: null})});
          F.line = 184;
          var i_14655298 = 0;
          F.line = 185;
          var l_14655299 = (behaviors_14575110 != null ? behaviors_14575110.length : 0);
          L16: do {
            F.line = 186;
              L17: while (true) {
              if (!(i_14655298 < l_14655299)) break L17;
                F.line = 66;
                nimCopy(behavior_14645014, behaviors_14575110[chckIndx(i_14655298, 0, (behaviors_14575110 != null ? behaviors_14575110.length : 0)+0-1)-0], NTI11686068);
                F.line = 66;
                add_11745074(res_14640043, behavior_14645014);
                F.line = 188;
                i_14655298 = addInt(i_14655298, 1);
                if (!(((behaviors_14575110 != null ? behaviors_14575110.length : 0) == l_14655299))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      } while(false);
      var children_14545326 = [res_14570033, res_14640043];
      F.line = 230;
      var behaviors_14545327 = [];
      F.line = 61;
      var res_14650043 = new_element_13450297(elem_parts_14555004.Field1, elem_parts_14555004.Field0, children_14545326);
      L18: do {
        F.line = 502;
        var behavior_14655014 = ({update: ({val: null}), added: ({val: null})});
        F.line = 184;
        var i_14655302 = 0;
        F.line = 185;
        var l_14655303 = (behaviors_14545327 != null ? behaviors_14545327.length : 0);
        L19: do {
          F.line = 186;
            L20: while (true) {
            if (!(i_14655302 < l_14655303)) break L20;
              F.line = 61;
              nimCopy(behavior_14655014, behaviors_14545327[chckIndx(i_14655302, 0, (behaviors_14545327 != null ? behaviors_14545327.length : 0)+0-1)-0], NTI11686068);
              F.line = 61;
              add_11745074(res_14650043, behavior_14655014);
              F.line = 188;
              i_14655302 = addInt(i_14655302, 1);
              if (!(((behaviors_14545327 != null ? behaviors_14545327.length : 0) == l_14655303))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/home/hassel/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
    } while(false);
    result_14545167 = res_14650043;
  framePtr = F.prev;

  return result_14545167;

}
start_app_14436051(render_14545165, makeNimstrLit("rootCanvas"), makeNimstrLit("nativeContainer"));
